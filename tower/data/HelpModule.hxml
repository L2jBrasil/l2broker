<?xml version="1.0" encoding="utf-8"?>
<Help xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.l2tower.eu/XMLuaHelpSchema.xsd">
  <base name="iterator&lt;T&gt;">
    <tip>Luabind iterator type.</tip>
    <help>Allow to iterate over a list.</help>
    <sample>for it in iteratorObject do
  -- do something with 'it' object
end;</sample>
  </base>
  <base name="T">
    <tip>Template type</tip>
    <help>Type used as Template type, check a class definition to get information what type will be put here.</help>
  </base>
  <base name="string">
    <tip>Base string type</tip>
    <help format="HTML">Strings have the usual meaning:
a sequence of characters.
Lua is eight-bit clean
and so strings may contain characters with any numeric value,
including embedded zeros.
That means that you can store any binary data into a string.
Strings in Lua are immutable values.
You cannot change a character inside a string,
as you may in C;
instead, you create a new string with the desired modifications,
as in the next example:
&lt;pre&gt;
    a = "one string"
    b = string.gsub(a, "one", "another")  -- change string parts
    print(a)       --&gt; one string
    print(b)       --&gt; another string
&lt;/pre&gt;
&lt;p&gt;Strings in Lua are subject to automatic memory management,
like all Lua objects.
That means that you do not have to worry about allocation and
deallocation of strings; Lua handles this for you.
A string may contain a single letter or an entire book.
Lua handles long strings quite efficiently.
Programs that manipulate strings with 100K or 1M characters
are not unusual in Lua.
&lt;p&gt;We can delimit literal strings by
matching single or double quotes:
&lt;pre&gt;
    a = "a line"
    b = 'another line'
&lt;/pre&gt;
As a matter of style,
you should use always the same kind of quotes
(single or double) in a program,
unless the string itself has quotes;
then you use the other quote,
or escape those quotes with backslashes.
Strings in Lua can contain the following C-like escape sequences:
&lt;p&gt;&lt;table align="center" border=1&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\a&lt;/code&gt;&lt;/td&gt;&lt;td&gt;bell&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\b&lt;/code&gt;&lt;/td&gt;&lt;td&gt;back space&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\f&lt;/code&gt;&lt;/td&gt;&lt;td&gt;form feed&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\n&lt;/code&gt;&lt;/td&gt;&lt;td&gt;newline&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\r&lt;/code&gt;&lt;/td&gt;&lt;td&gt;carriage return&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\t&lt;/code&gt;&lt;/td&gt;&lt;td&gt;horizontal tab&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\v&lt;/code&gt;&lt;/td&gt;&lt;td&gt;vertical tab&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\\&lt;/code&gt;&lt;/td&gt;&lt;td&gt;backslash&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\"&lt;/code&gt;&lt;/td&gt;&lt;td&gt;double quote&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\'&lt;/code&gt;&lt;/td&gt;&lt;td&gt;single quote&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\[&lt;/code&gt;&lt;/td&gt;&lt;td&gt;left square bracket&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\]&lt;/code&gt;&lt;/td&gt;&lt;td&gt;right square bracket&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;p&gt;
We illustrate their use in the following examples:
&lt;pre&gt;
    &gt; print("one line\nnext line\n\"in quotes\", 'in quotes'")
    one line
    next line
    "in quotes", 'in quotes'
    &gt; print('a backslash inside quotes: \'\\\'')
    a backslash inside quotes: '\'
    &gt; print("a simpler way: '\\'")
    a simpler way: '\'
&lt;/pre&gt;
&lt;p&gt;We can specify a character in a string also by its numeric value
through the escape sequence &lt;code&gt;\ddd&lt;/code&gt;,
where &lt;code&gt;ddd&lt;/code&gt; is a sequence of up to three &lt;em&gt;decimal&lt;/em&gt; digits.
As a somewhat complex example,
the two literals &lt;code&gt;"alo\n123\""&lt;/code&gt; and
&lt;code&gt;'\97lo\10\04923"'&lt;/code&gt; have the same value,
in a system using ASCII:
97 is the ASCII code for &lt;code&gt;a&lt;/code&gt;,
10 is the code for newline,
and 49 (&lt;code&gt;\049&lt;/code&gt; in the example) is the code for the digit &lt;code&gt;1&lt;/code&gt;.
&lt;p&gt;We can delimit literal strings also by matching double
square brackets &lt;code&gt;[[...]]&lt;/code&gt;.
Literals in this bracketed form may run for several lines,
may nest, and do not interpret escape sequences.
Moreover, this form ignores the first character of the string
when this character is a newline.
This form is especially convenient for
writing strings that contain program pieces;
for instance,
&lt;pre&gt;
    page = [[
    &amp;lt;HTML&gt;
    &amp;lt;HEAD&gt;
    &amp;lt;TITLE&gt;An HTML Page&amp;lt;/TITLE&gt;
    &amp;lt;/HEAD&gt;
    &amp;lt;BODY&gt;
     &amp;lt;A HREF="http://www.lua.org"&gt;Lua&amp;lt;/A&gt;
     [[a text between double brackets]]
    &amp;lt;/BODY&gt;
    &amp;lt;/HTML&gt;
    ]]
    write(page)
&lt;/pre&gt;
&lt;p&gt;Lua provides automatic conversions between numbers and strings at run time.
Any numeric operation applied to a string tries to convert
the string to a number:
&lt;pre&gt;
    print("10" + 1)           --&gt; 11
    print("10 + 1")           --&gt; 10 + 1
    print("-5.3e-10"*"2")     --&gt; -1.06e-09
    print("hello" + 1)        -- ERROR (cannot convert "hello")
&lt;/pre&gt;
Lua applies such coercions not only in arithmetic operators,
but also in other places that expect a number.
Conversely, whenever it finds a number where it expects a string,
Lua converts the number to a string:
&lt;pre&gt;
    print(10 .. 20)        --&gt; 1020
&lt;/pre&gt;
(The &lt;code&gt;..&lt;/code&gt; is the string concatenation operator in Lua.
When you write it right after a numeral,
you must separate them with a space;
otherwise, Lua thinks that the first dot is a decimal point.)
&lt;p&gt;Despite those automatic conversions,
strings and numbers are different things.
A comparison like &lt;code&gt;10 == "10"&lt;/code&gt; is always false,
because 10 is a number and &lt;code&gt;"10"&lt;/code&gt; is a string.
If you need to convert a string to a number explicitly,
you can use the function &lt;code&gt;tonumber&lt;/code&gt;,
which returns &lt;B&gt;nil&lt;/B&gt; if the string does not denote a proper number:
&lt;pre&gt;
    line = io.read()     -- read a line
    n = tonumber(line)   -- try to convert it to a number
    if n == nil then
      error(line .. " is not a valid number")
    else
      print(n*2)
    end
&lt;/pre&gt;
&lt;p&gt;To convert a number to a string,
you can call the function &lt;code&gt;tostring&lt;/code&gt;
or concatenate the number with the empty string:
&lt;pre&gt;
    print(tostring(10) == "10")   --&gt; true
    print(10 .. "" == "10")       --&gt; true
&lt;/pre&gt;
Such conversions are always valid.
</help>
  </base>
  <base name="boolean">
    <tip>Boolean value. It can take one of two values: true or false.</tip>
    <help format="HTML">&lt;p&gt;The boolean type has two values,
&lt;B&gt;false&lt;/B&gt; and &lt;B&gt;true&lt;/B&gt;,
which represent the traditional boolean values.
However, they do not hold a monopoly of condition values:
In Lua, any value may represent a condition.
Conditionals (such as the ones in control structures)
consider &lt;B&gt;false&lt;/B&gt; and &lt;B&gt;nil&lt;/B&gt; as false
and anything else as true.
Beware that, unlike some other scripting languages,
Lua considers
both zero and the empty string as true in conditional tests.
</help>
  </base>
  <base name="float">
    <tip>Floating point number.</tip>
    <help>Real type, can contain value belong to '+/- 3.4e +/- 38 (~7 digits)'</help>
  </base>
  <base name="byte">
    <tip>Character or small integer.</tip>
    <help>Signed integer type: -128 to 127
Character contain 1 character in UTF8.</help>
  </base>
  <base name="ubyte">
    <tip>Character or small integer.</tip>
    <help>Unsigned integer type: 0 to 255.
Character contain 1 character in UTF8.</help>
  </base>
  <base name="wchar">
    <tip>Wide Character</tip>
    <help>Contain one 1 wide character in Unicode</help>
  </base>
  <base name="short">
    <tip>Short Integer</tip>
    <help>Signed integer type: -32768 to 32767</help>
  </base>
  <base name="ushort">
    <tip>Short Integer</tip>
    <help>Unsigned integer type: 0 to 65535</help>
  </base>
  <base name="uint">
    <tip>Integer</tip>
    <help>Unsigned integer type: 0 to 4294967295</help>
  </base>
  <base name="int">
    <tip>Integer</tip>
    <help>Signed integer type: -2147483648 to 2147483647</help>
  </base>
  <base name="int64">
    <tip>Big Integer (Default number type in this lua implementation)</tip>
    <help>Signed integer type: -9223372036854775808 to 9223372036854775807</help>
  </base>
  <base name="uint64">
    <tip>Big Integer</tip>
    <help>Unsigned integer type: 0 to  18446744073709551615</help>
  </base>
  <base name="object">
    <tip>Lua object</tip>
    <help>Type fits to standard lua objects: nil, number, string, tables and some L2Tower objects like vector, rotator</help>
  </base>
  <package name="Build-In Featues">
    <tip>List of compiled in Lua modules</tip>
    <help>List of compiled in Lua modules</help>
    <info name="* Lua language *">
      <tip />
      <help format="HTML">http://www.lua.org/manual/5.1/manual.html#2</help>
    </info>
    <info name="Module - coroutine">
      <tip />
      <help format="HTML">http://www.lua.org/manual/5.1/manual.html#5.2</help>
    </info>
    <info name="Module - debug">
      <tip />
      <help format="HTML">http://www.lua.org/manual/5.1/manual.html#5.9</help>
    </info>
    <info name="Module - io">
      <tip />
      <help format="HTML">http://www.lua.org/manual/5.1/manual.html#5.7</help>
    </info>
    <info name="Module - math">
      <tip />
      <help format="HTML">http://www.lua.org/manual/5.1/manual.html#5.6</help>
    </info>
    <info name="Module - os">
      <tip />
      <help format="HTML">http://www.lua.org/manual/5.1/manual.html#5.8</help>
    </info>
    <info name="Module - package">
      <tip />
      <help format="HTML">http://www.lua.org/manual/5.1/manual.html#5.3</help>
    </info>
    <info name="Module - string">
      <tip />
      <help format="HTML">http://www.lua.org/manual/5.1/manual.html#5.4</help>
    </info>
    <info name="Module - table">
      <tip />
      <help format="HTML">http://www.lua.org/manual/5.1/manual.html#5.5</help>
    </info>
    <info name="Module - ffi">
      <tip />
      <help format="HTML">http://luajit.org/ext_ffi.html</help>
    </info>
    <info name="Module - jit">
      <tip />
      <help format="HTML">http://luajit.org/ext_jit.html</help>
    </info>
    <info name="Module - bit">
      <tip />
      <help format="HTML">http://bitop.luajit.org/api.html</help>
    </info>
    <info name="Functions">
      <tip />
      <help format="HTML">http://www.lua.org/manual/5.1/manual.html#5.1</help>
    </info>
  </package>
  <package name="L2Tower Free API">
    <tip>Set of L2Tower functions and classes available for premium and free users.</tip>
    <help>Set of L2Tower functions and classes available for premium and free users.</help>
    <enum name="THtmlButtonStyle">
      <tip>Html button style</tip>
      <help>Html button style</help>
      <item name="BUTTON_ACTION" value="4">
        <tip>BUTTON_ACTION html style enum, value: 4</tip>
        <help>BUTTON_ACTION html style enum, value: 4</help>
      </item>
      <item name="BUTTON_CUSTOM" value="0">
        <tip>BUTTON_CUSTOM html style enum, value: 0</tip>
        <help>BUTTON_CUSTOM html style enum, value: 0</help>
      </item>
      <item name="BUTTON_EXTRA" value="3">
        <tip>BUTTON_EXTRA html style enum, value: 3</tip>
        <help>BUTTON_EXTRA html style enum, value: 3</help>
      </item>
      <item name="BUTTON_NO_CLICK" value="1">
        <tip>BUTTON_NO_CLICK html style enum, value: 1</tip>
        <help>BUTTON_NO_CLICK html style enum, value: 1</help>
      </item>
      <item name="BUTTON_ON_OFF" value="2">
        <tip>BUTTON_ON_OFF html style enum, value: 2</tip>
        <help>BUTTON_ON_OFF html style enum, value: 2</help>
      </item>
      <item name="BUTTON_TAB" value="5">
        <tip>BUTTON_TAB html style enum, value: 5</tip>
        <help>BUTTON_TAB html style enum, value: 5</help>
      </item>
    </enum>
    <enum name="L2Race">
      <tip>Enum describe all available races</tip>
      <help>Enum describe all available races</help>
      <item name="RACE_Darkelf" value="2">
        <tip>RACE_Darkelf race enum, id: 2</tip>
        <help>RACE_Darkelf race enum, id: 2</help>
      </item>
      <item name="RACE_Dwarf" value="4">
        <tip>RACE_Dwarf race enum, id: 4</tip>
        <help>RACE_Dwarf race enum, id: 4</help>
      </item>
      <item name="RACE_Elf" value="1">
        <tip>RACE_Elf race enum, id: 1</tip>
        <help>RACE_Elf race enum, id: 1</help>
      </item>
      <item name="RACE_Human" value="0">
        <tip>RACE_Human race enum, id: 0</tip>
        <help>RACE_Human race enum, id: 0</help>
      </item>
      <item name="RACE_Kamael" value="5">
        <tip>RACE_Kamael race enum, id: 5</tip>
        <help>RACE_Kamael race enum, id: 5</help>
      </item>
      <item name="RACE_Orc" value="3">
        <tip>RACE_Orc race enum, id: 3</tip>
        <help>RACE_Orc race enum, id: 3</help>
      </item>
    </enum>
    <enum name="L2ClanRank">
      <tip>Enum describe clan rank types</tip>
      <help>Enum describe clan rank types</help>
      <item name="RANK_BARON" value="5">
        <tip>RANK_BARON clan rank type enum, id: 5</tip>
        <help>RANK_BARON clan rank type enum, id: 5</help>
      </item>
      <item name="RANK_COUNT" value="7">
        <tip>RANK_COUNT clan rank type enum, id: 7</tip>
        <help>RANK_COUNT clan rank type enum, id: 7</help>
      </item>
      <item name="RANK_DISTINGUISHED_KING" value="11">
        <tip>RANK_DISTINGUISHED_KING clan rank type enum, id: 11</tip>
        <help>RANK_DISTINGUISHED_KING clan rank type enum, id: 11</help>
      </item>
      <item name="RANK_DUKE" value="9">
        <tip>RANK_DUKE clan rank type enum, id: 9</tip>
        <help>RANK_DUKE clan rank type enum, id: 9</help>
      </item>
      <item name="RANK_ELDER" value="4">
        <tip>RANK_ELDER clan rank type enum, id: 4</tip>
        <help>RANK_ELDER clan rank type enum, id: 4</help>
      </item>
      <item name="RANK_GRAND_DUKE" value="10">
        <tip>RANK_GRAND_DUKE clan rank type enum, id: 10</tip>
        <help>RANK_GRAND_DUKE clan rank type enum, id: 10</help>
      </item>
      <item name="RANK_HEIR" value="2">
        <tip>RANK_HEIR clan rank type enum, id: 2</tip>
        <help>RANK_HEIR clan rank type enum, id: 2</help>
      </item>
      <item name="RANK_KNIGHT" value="3">
        <tip>RANK_KNIGHT clan rank type enum, id: 3</tip>
        <help>RANK_KNIGHT clan rank type enum, id: 3</help>
      </item>
      <item name="RANK_MARQUIS" value="8">
        <tip>RANK_MARQUIS clan rank type enum, id: 8</tip>
        <help>RANK_MARQUIS clan rank type enum, id: 8</help>
      </item>
      <item name="RANK_VAGABOND" value="0">
        <tip>RANK_VAGABOND clan rank type enum, id: 0</tip>
        <help>RANK_VAGABOND clan rank type enum, id: 0</help>
      </item>
      <item name="RANK_VASSAL" value="1">
        <tip>RANK_VASSAL clan rank type enum, id: 1</tip>
        <help>RANK_VASSAL clan rank type enum, id: 1</help>
      </item>
      <item name="RANK_VISCOUNT" value="6">
        <tip>RANK_VISCOUNT clan rank type enum, id: 6</tip>
        <help>RANK_VISCOUNT clan rank type enum, id: 6</help>
      </item>
    </enum>
    <enum name="L2Sex">
      <tip>Sex type enum</tip>
      <help>Sex type enum</help>
      <item name="SEX_Female" value="1">
        <tip>SEX_Female Sex type enum, id: 1</tip>
        <help>SEX_Female Sex type enum, id: 1</help>
      </item>
      <item name="SEX_Male" value="0">
        <tip>SEX_Male Sex type enum, id: 0</tip>
        <help>SEX_Male Sex type enum, id: 0</help>
      </item>
    </enum>
    <enum name="L2Class">
      <tip>Enum describe all available classes</tip>
      <help>Enum describe all available classes</help>
      <item name="CLASS_AbyssWalker" value="36">
        <tip>CLASS_AbyssWalker class enum, id: 36</tip>
        <help>CLASS_AbyssWalker class enum, id: 36</help>
      </item>
      <item name="CLASS_Adventurer" value="93">
        <tip>CLASS_Adventurer class enum, id: 93</tip>
        <help>CLASS_Adventurer class enum, id: 93</help>
      </item>
      <item name="CLASS_AeoreCardinal" value="179">
        <tip>CLASS_AeoreCardinal class enum, id: 179</tip>
        <help>CLASS_AeoreCardinal class enum, id: 179</help>
      </item>
      <item name="CLASS_AeoreEvasSaint" value="180">
        <tip>CLASS_AeoreEvasSaint class enum, id: 180</tip>
        <help>CLASS_AeoreEvasSaint class enum, id: 180</help>
      </item>
      <item name="CLASS_AeoreHealer" value="146">
        <tip>CLASS_AeoreHealer class enum, id: 146</tip>
        <help>CLASS_AeoreHealer class enum, id: 146</help>
      </item>
      <item name="CLASS_AeoreShillienSaint" value="181">
        <tip>CLASS_AeoreShillienSaint class enum, id: 181</tip>
        <help>CLASS_AeoreShillienSaint class enum, id: 181</help>
      </item>
      <item name="CLASS_Arbalester" value="130">
        <tip>CLASS_Arbalester class enum, id: 130</tip>
        <help>CLASS_Arbalester class enum, id: 130</help>
      </item>
      <item name="CLASS_ArcanaLord" value="96">
        <tip>CLASS_ArcanaLord class enum, id: 96</tip>
        <help>CLASS_ArcanaLord class enum, id: 96</help>
      </item>
      <item name="CLASS_Archmage" value="94">
        <tip>CLASS_Archmage class enum, id: 94</tip>
        <help>CLASS_Archmage class enum, id: 94</help>
      </item>
      <item name="CLASS_Artisan" value="56">
        <tip>CLASS_Artisan class enum, id: 56</tip>
        <help>CLASS_Artisan class enum, id: 56</help>
      </item>
      <item name="CLASS_Assassin" value="35">
        <tip>CLASS_Assassin class enum, id: 35</tip>
        <help>CLASS_Assassin class enum, id: 35</help>
      </item>
      <item name="CLASS_Berserker" value="127">
        <tip>CLASS_Berserker class enum, id: 127</tip>
        <help>CLASS_Berserker class enum, id: 127</help>
      </item>
      <item name="CLASS_Bishop" value="16">
        <tip>CLASS_Bishop class enum, id: 16</tip>
        <help>CLASS_Bishop class enum, id: 16</help>
      </item>
      <item name="CLASS_Bladedancer" value="34">
        <tip>CLASS_Bladedancer class enum, id: 34</tip>
        <help>CLASS_Bladedancer class enum, id: 34</help>
      </item>
      <item name="CLASS_BountyHunter" value="55">
        <tip>CLASS_BountyHunter class enum, id: 55</tip>
        <help>CLASS_BountyHunter class enum, id: 55</help>
      </item>
      <item name="CLASS_Cardinal" value="97">
        <tip>CLASS_Cardinal class enum, id: 97</tip>
        <help>CLASS_Cardinal class enum, id: 97</help>
      </item>
      <item name="CLASS_Cleric" value="15">
        <tip>CLASS_Cleric class enum, id: 15</tip>
        <help>CLASS_Cleric class enum, id: 15</help>
      </item>
      <item name="CLASS_CloudBreaker" value="185">
        <tip>CLASS_CloudBreaker class enum, id: 185</tip>
        <help>CLASS_CloudBreaker class enum, id: 185</help>
      </item>
      <item name="CLASS_DarkAvenger" value="6">
        <tip>CLASS_DarkAvenger class enum, id: 6</tip>
        <help>CLASS_DarkAvenger class enum, id: 6</help>
      </item>
      <item name="CLASS_DarkFighter" value="31">
        <tip>CLASS_DarkFighter class enum, id: 31</tip>
        <help>CLASS_DarkFighter class enum, id: 31</help>
      </item>
      <item name="CLASS_DarkMystic" value="38">
        <tip>CLASS_DarkMystic class enum, id: 38</tip>
        <help>CLASS_DarkMystic class enum, id: 38</help>
      </item>
      <item name="CLASS_DarkWizard" value="39">
        <tip>CLASS_DarkWizard class enum, id: 39</tip>
        <help>CLASS_DarkWizard class enum, id: 39</help>
      </item>
      <item name="CLASS_Destroyer" value="46">
        <tip>CLASS_Destroyer class enum, id: 46</tip>
        <help>CLASS_Destroyer class enum, id: 46</help>
      </item>
      <item name="CLASS_Dominator" value="115">
        <tip>CLASS_Dominator class enum, id: 115</tip>
        <help>CLASS_Dominator class enum, id: 115</help>
      </item>
      <item name="CLASS_Doombringer" value="131">
        <tip>CLASS_Doombringer class enum, id: 131</tip>
        <help>CLASS_Doombringer class enum, id: 131</help>
      </item>
      <item name="CLASS_Doomcryer" value="116">
        <tip>CLASS_Doomcryer class enum, id: 116</tip>
        <help>CLASS_Doomcryer class enum, id: 116</help>
      </item>
      <item name="CLASS_Dragoon" value="125">
        <tip>CLASS_Dragoon class enum, id: 125</tip>
        <help>CLASS_Dragoon class enum, id: 125</help>
      </item>
      <item name="CLASS_Dreadnought" value="89">
        <tip>CLASS_Dreadnought class enum, id: 89</tip>
        <help>CLASS_Dreadnought class enum, id: 89</help>
      </item>
      <item name="CLASS_Duelist" value="88">
        <tip>CLASS_Duelist class enum, id: 88</tip>
        <help>CLASS_Duelist class enum, id: 88</help>
      </item>
      <item name="CLASS_DwarvenFighter" value="53">
        <tip>CLASS_DwarvenFighter class enum, id: 53</tip>
        <help>CLASS_DwarvenFighter class enum, id: 53</help>
      </item>
      <item name="CLASS_ElementalMaster" value="104">
        <tip>CLASS_ElementalMaster class enum, id: 104</tip>
        <help>CLASS_ElementalMaster class enum, id: 104</help>
      </item>
      <item name="CLASS_ElementalSummoner" value="28">
        <tip>CLASS_ElementalSummoner class enum, id: 28</tip>
        <help>CLASS_ElementalSummoner class enum, id: 28</help>
      </item>
      <item name="CLASS_ElvenElder" value="30">
        <tip>CLASS_ElvenElder class enum, id: 30</tip>
        <help>CLASS_ElvenElder class enum, id: 30</help>
      </item>
      <item name="CLASS_ElvenFighter" value="18">
        <tip>CLASS_ElvenFighter class enum, id: 18</tip>
        <help>CLASS_ElvenFighter class enum, id: 18</help>
      </item>
      <item name="CLASS_ElvenKnight" value="19">
        <tip>CLASS_ElvenKnight class enum, id: 19</tip>
        <help>CLASS_ElvenKnight class enum, id: 19</help>
      </item>
      <item name="CLASS_ElvenMystic" value="25">
        <tip>CLASS_ElvenMystic class enum, id: 25</tip>
        <help>CLASS_ElvenMystic class enum, id: 25</help>
      </item>
      <item name="CLASS_ElvenOracle" value="29">
        <tip>CLASS_ElvenOracle class enum, id: 29</tip>
        <help>CLASS_ElvenOracle class enum, id: 29</help>
      </item>
      <item name="CLASS_ElvenScout" value="22">
        <tip>CLASS_ElvenScout class enum, id: 22</tip>
        <help>CLASS_ElvenScout class enum, id: 22</help>
      </item>
      <item name="CLASS_ElvenWizard" value="26">
        <tip>CLASS_ElvenWizard class enum, id: 26</tip>
        <help>CLASS_ElvenWizard class enum, id: 26</help>
      </item>
      <item name="CLASS_ErtheiaFighter" value="182">
        <tip>CLASS_ErtheiaFighter class enum, id: 182</tip>
        <help>CLASS_ErtheiaFighter class enum, id: 182</help>
      </item>
      <item name="CLASS_ErtheiaWizard" value="183">
        <tip>CLASS_ErtheiaWizard class enum, id: 183</tip>
        <help>CLASS_ErtheiaWizard class enum, id: 183</help>
      </item>
      <item name="CLASS_EvaSaint" value="105">
        <tip>CLASS_EvaSaint class enum, id: 105</tip>
        <help>CLASS_EvaSaint class enum, id: 105</help>
      </item>
      <item name="CLASS_EvaTemplar" value="99">
        <tip>CLASS_EvaTemplar class enum, id: 99</tip>
        <help>CLASS_EvaTemplar class enum, id: 99</help>
      </item>
      <item name="CLASS_Eviscerator" value="188">
        <tip>CLASS_Eviscerator class enum, id: 188</tip>
        <help>CLASS_Eviscerator class enum, id: 188</help>
      </item>
      <item name="CLASS_FemaleSoldier" value="124">
        <tip>CLASS_FemaleSoldier class enum, id: 124</tip>
        <help>CLASS_FemaleSoldier class enum, id: 124</help>
      </item>
      <item name="CLASS_FemaleSoulBreaker" value="129">
        <tip>CLASS_FemaleSoulBreaker class enum, id: 129</tip>
        <help>CLASS_FemaleSoulBreaker class enum, id: 129</help>
      </item>
      <item name="CLASS_FemaleSoulHound" value="133">
        <tip>CLASS_FemaleSoulHound class enum, id: 133</tip>
        <help>CLASS_FemaleSoulHound class enum, id: 133</help>
      </item>
      <item name="CLASS_FeohArchmage" value="166">
        <tip>CLASS_FeohArchmage class enum, id: 166</tip>
        <help>CLASS_FeohArchmage class enum, id: 166</help>
      </item>
      <item name="CLASS_FeohMysticMuse" value="168">
        <tip>CLASS_FeohMysticMuse class enum, id: 168</tip>
        <help>CLASS_FeohMysticMuse class enum, id: 168</help>
      </item>
      <item name="CLASS_FeohSoulhound" value="170">
        <tip>CLASS_FeohSoulhound class enum, id: 170</tip>
        <help>CLASS_FeohSoulhound class enum, id: 170</help>
      </item>
      <item name="CLASS_FeohSoultaker" value="167">
        <tip>CLASS_FeohSoultaker class enum, id: 167</tip>
        <help>CLASS_FeohSoultaker class enum, id: 167</help>
      </item>
      <item name="CLASS_FeohStormScreamer" value="169">
        <tip>CLASS_FeohStormScreamer class enum, id: 169</tip>
        <help>CLASS_FeohStormScreamer class enum, id: 169</help>
      </item>
      <item name="CLASS_FeohWizard" value="143">
        <tip>CLASS_FeohWizard class enum, id: 143</tip>
        <help>CLASS_FeohWizard class enum, id: 143</help>
      </item>
      <item name="CLASS_FortuneSeeker" value="117">
        <tip>CLASS_FortuneSeeker class enum, id: 117</tip>
        <help>CLASS_FortuneSeeker class enum, id: 117</help>
      </item>
      <item name="CLASS_GhostHunter" value="108">
        <tip>CLASS_GhostHunter class enum, id: 108</tip>
        <help>CLASS_GhostHunter class enum, id: 108</help>
      </item>
      <item name="CLASS_GhostSentinel" value="109">
        <tip>CLASS_GhostSentinel class enum, id: 109</tip>
        <help>CLASS_GhostSentinel class enum, id: 109</help>
      </item>
      <item name="CLASS_Gladiator" value="2">
        <tip>CLASS_Gladiator class enum, id: 2</tip>
        <help>CLASS_Gladiator class enum, id: 2</help>
      </item>
      <item name="CLASS_GrandKhavatari" value="114">
        <tip>CLASS_GrandKhavatari class enum, id: 114</tip>
        <help>CLASS_GrandKhavatari class enum, id: 114</help>
      </item>
      <item name="CLASS_Hawkeye" value="9">
        <tip>CLASS_Hawkeye class enum, id: 9</tip>
        <help>CLASS_Hawkeye class enum, id: 9</help>
      </item>
      <item name="CLASS_HellKnight" value="91">
        <tip>CLASS_HellKnight class enum, id: 91</tip>
        <help>CLASS_HellKnight class enum, id: 91</help>
      </item>
      <item name="CLASS_Hierophant" value="98">
        <tip>CLASS_Hierophant class enum, id: 98</tip>
        <help>CLASS_Hierophant class enum, id: 98</help>
      </item>
      <item name="CLASS_HumanFighter" value="0">
        <tip>CLASS_HumanFighter class enum, id: 0</tip>
        <help>CLASS_HumanFighter class enum, id: 0</help>
      </item>
      <item name="CLASS_HumanKnight" value="4">
        <tip>CLASS_HumanKnight class enum, id: 4</tip>
        <help>CLASS_HumanKnight class enum, id: 4</help>
      </item>
      <item name="CLASS_HumanMystic" value="10">
        <tip>CLASS_HumanMystic class enum, id: 10</tip>
        <help>CLASS_HumanMystic class enum, id: 10</help>
      </item>
      <item name="CLASS_HumanWizard" value="11">
        <tip>CLASS_HumanWizard class enum, id: 11</tip>
        <help>CLASS_HumanWizard class enum, id: 11</help>
      </item>
      <item name="CLASS_Inspector" value="135">
        <tip>CLASS_Inspector class enum, id: 135</tip>
        <help>CLASS_Inspector class enum, id: 135</help>
      </item>
      <item name="CLASS_IssDominator" value="174">
        <tip>CLASS_IssDominator class enum, id: 174</tip>
        <help>CLASS_IssDominator class enum, id: 174</help>
      </item>
      <item name="CLASS_IssDoomcryer" value="175">
        <tip>CLASS_IssDoomcryer class enum, id: 175</tip>
        <help>CLASS_IssDoomcryer class enum, id: 175</help>
      </item>
      <item name="CLASS_IssEnchanter" value="144">
        <tip>CLASS_IssEnchanter class enum, id: 144</tip>
        <help>CLASS_IssEnchanter class enum, id: 144</help>
      </item>
      <item name="CLASS_IssHierophant" value="171">
        <tip>CLASS_IssHierophant class enum, id: 171</tip>
        <help>CLASS_IssHierophant class enum, id: 171</help>
      </item>
      <item name="CLASS_IssSpectralDancer" value="173">
        <tip>CLASS_IssSpectralDancer class enum, id: 173</tip>
        <help>CLASS_IssSpectralDancer class enum, id: 173</help>
      </item>
      <item name="CLASS_IssSwordMuse" value="172">
        <tip>CLASS_IssSwordMuse class enum, id: 172</tip>
        <help>CLASS_IssSwordMuse class enum, id: 172</help>
      </item>
      <item name="CLASS_Judicator" value="136">
        <tip>CLASS_Judicator class enum, id: 136</tip>
        <help>CLASS_Judicator class enum, id: 136</help>
      </item>
      <item name="CLASS_Maestro" value="118">
        <tip>CLASS_Maestro class enum, id: 118</tip>
        <help>CLASS_Maestro class enum, id: 118</help>
      </item>
      <item name="CLASS_MaleSoldier" value="123">
        <tip>CLASS_MaleSoldier class enum, id: 123</tip>
        <help>CLASS_MaleSoldier class enum, id: 123</help>
      </item>
      <item name="CLASS_MaleSoulBreaker" value="128">
        <tip>CLASS_MaleSoulBreaker class enum, id: 128</tip>
        <help>CLASS_MaleSoulBreaker class enum, id: 128</help>
      </item>
      <item name="CLASS_MaleSoulHound" value="132">
        <tip>CLASS_MaleSoulHound class enum, id: 132</tip>
        <help>CLASS_MaleSoulHound class enum, id: 132</help>
      </item>
      <item name="CLASS_Marauder" value="184">
        <tip>CLASS_Marauder class enum, id: 184</tip>
        <help>CLASS_Marauder class enum, id: 184</help>
      </item>
      <item name="CLASS_Monk" value="47">
        <tip>CLASS_Monk class enum, id: 47</tip>
        <help>CLASS_Monk class enum, id: 47</help>
      </item>
      <item name="CLASS_MoonlightSentinel" value="102">
        <tip>CLASS_MoonlightSentinel class enum, id: 102</tip>
        <help>CLASS_MoonlightSentinel class enum, id: 102</help>
      </item>
      <item name="CLASS_MysticMuse" value="103">
        <tip>CLASS_MysticMuse class enum, id: 103</tip>
        <help>CLASS_MysticMuse class enum, id: 103</help>
      </item>
      <item name="CLASS_Necromancer" value="13">
        <tip>CLASS_Necromancer class enum, id: 13</tip>
        <help>CLASS_Necromancer class enum, id: 13</help>
      </item>
      <item name="CLASS_OrcFighter" value="44">
        <tip>CLASS_OrcFighter class enum, id: 44</tip>
        <help>CLASS_OrcFighter class enum, id: 44</help>
      </item>
      <item name="CLASS_OrcMystic" value="49">
        <tip>CLASS_OrcMystic class enum, id: 49</tip>
        <help>CLASS_OrcMystic class enum, id: 49</help>
      </item>
      <item name="CLASS_OrcRaider" value="45">
        <tip>CLASS_OrcRaider class enum, id: 45</tip>
        <help>CLASS_OrcRaider class enum, id: 45</help>
      </item>
      <item name="CLASS_OrcShaman" value="50">
        <tip>CLASS_OrcShaman class enum, id: 50</tip>
        <help>CLASS_OrcShaman class enum, id: 50</help>
      </item>
      <item name="CLASS_OthellAdventurer" value="158">
        <tip>CLASS_OthellAdventurer class enum, id: 158</tip>
        <help>CLASS_OthellAdventurer class enum, id: 158</help>
      </item>
      <item name="CLASS_OthellFortuneSeeker" value="161">
        <tip>CLASS_OthellFortuneSeeker class enum, id: 161</tip>
        <help>CLASS_OthellFortuneSeeker class enum, id: 161</help>
      </item>
      <item name="CLASS_OthellGhostHunter" value="160">
        <tip>CLASS_OthellGhostHunter class enum, id: 160</tip>
        <help>CLASS_OthellGhostHunter class enum, id: 160</help>
      </item>
      <item name="CLASS_OthellRogue" value="141">
        <tip>CLASS_OthellRogue class enum, id: 141</tip>
        <help>CLASS_OthellRogue class enum, id: 141</help>
      </item>
      <item name="CLASS_OthellWindRider" value="159">
        <tip>CLASS_OthellWindRider class enum, id: 159</tip>
        <help>CLASS_OthellWindRider class enum, id: 159</help>
      </item>
      <item name="CLASS_Overlord" value="51">
        <tip>CLASS_Overlord class enum, id: 51</tip>
        <help>CLASS_Overlord class enum, id: 51</help>
      </item>
      <item name="CLASS_Paladin" value="5">
        <tip>CLASS_Paladin class enum, id: 5</tip>
        <help>CLASS_Paladin class enum, id: 5</help>
      </item>
      <item name="CLASS_PalusKnight" value="32">
        <tip>CLASS_PalusKnight class enum, id: 32</tip>
        <help>CLASS_PalusKnight class enum, id: 32</help>
      </item>
      <item name="CLASS_PhantomRanger" value="37">
        <tip>CLASS_PhantomRanger class enum, id: 37</tip>
        <help>CLASS_PhantomRanger class enum, id: 37</help>
      </item>
      <item name="CLASS_PhantomSummoner" value="41">
        <tip>CLASS_PhantomSummoner class enum, id: 41</tip>
        <help>CLASS_PhantomSummoner class enum, id: 41</help>
      </item>
      <item name="CLASS_PhoenixKnight" value="90">
        <tip>CLASS_PhoenixKnight class enum, id: 90</tip>
        <help>CLASS_PhoenixKnight class enum, id: 90</help>
      </item>
      <item name="CLASS_Plainswalker" value="23">
        <tip>CLASS_Plainswalker class enum, id: 23</tip>
        <help>CLASS_Plainswalker class enum, id: 23</help>
      </item>
      <item name="CLASS_Prophet" value="17">
        <tip>CLASS_Prophet class enum, id: 17</tip>
        <help>CLASS_Prophet class enum, id: 17</help>
      </item>
      <item name="CLASS_Ripper" value="186">
        <tip>CLASS_Ripper class enum, id: 186</tip>
        <help>CLASS_Ripper class enum, id: 186</help>
      </item>
      <item name="CLASS_Rogue" value="7">
        <tip>CLASS_Rogue class enum, id: 7</tip>
        <help>CLASS_Rogue class enum, id: 7</help>
      </item>
      <item name="CLASS_Sagittarius" value="92">
        <tip>CLASS_Sagittarius class enum, id: 92</tip>
        <help>CLASS_Sagittarius class enum, id: 92</help>
      </item>
      <item name="CLASS_SayhasSeer" value="189">
        <tip>CLASS_SayhasSeer class enum, id: 189</tip>
        <help>CLASS_SayhasSeer class enum, id: 189</help>
      </item>
      <item name="CLASS_Scavenger" value="54">
        <tip>CLASS_Scavenger class enum, id: 54</tip>
        <help>CLASS_Scavenger class enum, id: 54</help>
      </item>
      <item name="CLASS_ShillienElder" value="43">
        <tip>CLASS_ShillienElder class enum, id: 43</tip>
        <help>CLASS_ShillienElder class enum, id: 43</help>
      </item>
      <item name="CLASS_ShillienKnight" value="33">
        <tip>CLASS_ShillienKnight class enum, id: 33</tip>
        <help>CLASS_ShillienKnight class enum, id: 33</help>
      </item>
      <item name="CLASS_ShillienOracle" value="42">
        <tip>CLASS_ShillienOracle class enum, id: 42</tip>
        <help>CLASS_ShillienOracle class enum, id: 42</help>
      </item>
      <item name="CLASS_ShillienSaint" value="112">
        <tip>CLASS_ShillienSaint class enum, id: 112</tip>
        <help>CLASS_ShillienSaint class enum, id: 112</help>
      </item>
      <item name="CLASS_ShillienTemplar" value="106">
        <tip>CLASS_ShillienTemplar class enum, id: 106</tip>
        <help>CLASS_ShillienTemplar class enum, id: 106</help>
      </item>
      <item name="CLASS_SigelEvasTemplar" value="150">
        <tip>CLASS_SigelEvasTemplar class enum, id: 150</tip>
        <help>CLASS_SigelEvasTemplar class enum, id: 150</help>
      </item>
      <item name="CLASS_SigelHellKnight" value="149">
        <tip>CLASS_SigelHellKnight class enum, id: 149</tip>
        <help>CLASS_SigelHellKnight class enum, id: 149</help>
      </item>
      <item name="CLASS_SigelKnight" value="139">
        <tip>CLASS_SigelKnight class enum, id: 139</tip>
        <help>CLASS_SigelKnight class enum, id: 139</help>
      </item>
      <item name="CLASS_SigelPhoenixKnight" value="148">
        <tip>CLASS_SigelPhoenixKnight class enum, id: 148</tip>
        <help>CLASS_SigelPhoenixKnight class enum, id: 148</help>
      </item>
      <item name="CLASS_SigelShillienTemplar" value="151">
        <tip>CLASS_SigelShillienTemplar class enum, id: 151</tip>
        <help>CLASS_SigelShillienTemplar class enum, id: 151</help>
      </item>
      <item name="CLASS_SilverRanger" value="24">
        <tip>CLASS_SilverRanger class enum, id: 24</tip>
        <help>CLASS_SilverRanger class enum, id: 24</help>
      </item>
      <item name="CLASS_Sorceror" value="12">
        <tip>CLASS_Sorceror class enum, id: 12</tip>
        <help>CLASS_Sorceror class enum, id: 12</help>
      </item>
      <item name="CLASS_Soultaker" value="95">
        <tip>CLASS_Soultaker class enum, id: 95</tip>
        <help>CLASS_Soultaker class enum, id: 95</help>
      </item>
      <item name="CLASS_SpectralDancer" value="107">
        <tip>CLASS_SpectralDancer class enum, id: 107</tip>
        <help>CLASS_SpectralDancer class enum, id: 107</help>
      </item>
      <item name="CLASS_SpectralMaster" value="111">
        <tip>CLASS_SpectralMaster class enum, id: 111</tip>
        <help>CLASS_SpectralMaster class enum, id: 111</help>
      </item>
      <item name="CLASS_Spellhowler" value="40">
        <tip>CLASS_Spellhowler class enum, id: 40</tip>
        <help>CLASS_Spellhowler class enum, id: 40</help>
      </item>
      <item name="CLASS_Spellsinger" value="27">
        <tip>CLASS_Spellsinger class enum, id: 27</tip>
        <help>CLASS_Spellsinger class enum, id: 27</help>
      </item>
      <item name="CLASS_StormScreamer" value="110">
        <tip>CLASS_StormScreamer class enum, id: 110</tip>
        <help>CLASS_StormScreamer class enum, id: 110</help>
      </item>
      <item name="CLASS_Stratomancer" value="187">
        <tip>CLASS_Stratomancer class enum, id: 187</tip>
        <help>CLASS_Stratomancer class enum, id: 187</help>
      </item>
      <item name="CLASS_SwordMuse" value="100">
        <tip>CLASS_SwordMuse class enum, id: 100</tip>
        <help>CLASS_SwordMuse class enum, id: 100</help>
      </item>
      <item name="CLASS_Swordsinger" value="21">
        <tip>CLASS_Swordsinger class enum, id: 21</tip>
        <help>CLASS_Swordsinger class enum, id: 21</help>
      </item>
      <item name="CLASS_TempleKnight" value="20">
        <tip>CLASS_TempleKnight class enum, id: 20</tip>
        <help>CLASS_TempleKnight class enum, id: 20</help>
      </item>
      <item name="CLASS_Titan" value="113">
        <tip>CLASS_Titan class enum, id: 113</tip>
        <help>CLASS_Titan class enum, id: 113</help>
      </item>
      <item name="CLASS_TreasureHunter" value="8">
        <tip>CLASS_TreasureHunter class enum, id: 8</tip>
        <help>CLASS_TreasureHunter class enum, id: 8</help>
      </item>
      <item name="CLASS_Trickster" value="134">
        <tip>CLASS_Trickster class enum, id: 134</tip>
        <help>CLASS_Trickster class enum, id: 134</help>
      </item>
      <item name="CLASS_Tyrant" value="48">
        <tip>CLASS_Tyrant class enum, id: 48</tip>
        <help>CLASS_Tyrant class enum, id: 48</help>
      </item>
      <item name="CLASS_TyrrDoombringer" value="157">
        <tip>CLASS_TyrrDoombringer class enum, id: 157</tip>
        <help>CLASS_TyrrDoombringer class enum, id: 157</help>
      </item>
      <item name="CLASS_TyrrDreadnought" value="153">
        <tip>CLASS_TyrrDreadnought class enum, id: 153</tip>
        <help>CLASS_TyrrDreadnought class enum, id: 153</help>
      </item>
      <item name="CLASS_TyrrDuelist" value="152">
        <tip>CLASS_TyrrDuelist class enum, id: 152</tip>
        <help>CLASS_TyrrDuelist class enum, id: 152</help>
      </item>
      <item name="CLASS_TyrrGrandKhavatari" value="155">
        <tip>CLASS_TyrrGrandKhavatari class enum, id: 155</tip>
        <help>CLASS_TyrrGrandKhavatari class enum, id: 155</help>
      </item>
      <item name="CLASS_TyrrMaestro" value="156">
        <tip>CLASS_TyrrMaestro class enum, id: 156</tip>
        <help>CLASS_TyrrMaestro class enum, id: 156</help>
      </item>
      <item name="CLASS_TyrrTitan" value="154">
        <tip>CLASS_TyrrTitan class enum, id: 154</tip>
        <help>CLASS_TyrrTitan class enum, id: 154</help>
      </item>
      <item name="CLASS_TyrrWarrior" value="140">
        <tip>CLASS_TyrrWarrior class enum, id: 140</tip>
        <help>CLASS_TyrrWarrior class enum, id: 140</help>
      </item>
      <item name="CLASS_Warcryer" value="52">
        <tip>CLASS_Warcryer class enum, id: 52</tip>
        <help>CLASS_Warcryer class enum, id: 52</help>
      </item>
      <item name="CLASS_Warder" value="126">
        <tip>CLASS_Warder class enum, id: 126</tip>
        <help>CLASS_Warder class enum, id: 126</help>
      </item>
      <item name="CLASS_Warlock" value="14">
        <tip>CLASS_Warlock class enum, id: 14</tip>
        <help>CLASS_Warlock class enum, id: 14</help>
      </item>
      <item name="CLASS_Warlord" value="3">
        <tip>CLASS_Warlord class enum, id: 3</tip>
        <help>CLASS_Warlord class enum, id: 3</help>
      </item>
      <item name="CLASS_Warrior" value="1">
        <tip>CLASS_Warrior class enum, id: 1</tip>
        <help>CLASS_Warrior class enum, id: 1</help>
      </item>
      <item name="CLASS_Warsmith" value="57">
        <tip>CLASS_Warsmith class enum, id: 57</tip>
        <help>CLASS_Warsmith class enum, id: 57</help>
      </item>
      <item name="CLASS_WindRider" value="101">
        <tip>CLASS_WindRider class enum, id: 101</tip>
        <help>CLASS_WindRider class enum, id: 101</help>
      </item>
      <item name="CLASS_WynnArcanaLord" value="176">
        <tip>CLASS_WynnArcanaLord class enum, id: 176</tip>
        <help>CLASS_WynnArcanaLord class enum, id: 176</help>
      </item>
      <item name="CLASS_WynnElementalMaster" value="177">
        <tip>CLASS_WynnElementalMaster class enum, id: 177</tip>
        <help>CLASS_WynnElementalMaster class enum, id: 177</help>
      </item>
      <item name="CLASS_WynnSpectralMaster" value="178">
        <tip>CLASS_WynnSpectralMaster class enum, id: 178</tip>
        <help>CLASS_WynnSpectralMaster class enum, id: 178</help>
      </item>
      <item name="CLASS_WynnSummoner" value="145">
        <tip>CLASS_WynnSummoner class enum, id: 145</tip>
        <help>CLASS_WynnSummoner class enum, id: 145</help>
      </item>
      <item name="CLASS_YulArcher" value="142">
        <tip>CLASS_YulArcher class enum, id: 142</tip>
        <help>CLASS_YulArcher class enum, id: 142</help>
      </item>
      <item name="CLASS_YulGhostSentinel" value="164">
        <tip>CLASS_YulGhostSentinel class enum, id: 164</tip>
        <help>CLASS_YulGhostSentinel class enum, id: 164</help>
      </item>
      <item name="CLASS_YulMoonlightSentinel" value="163">
        <tip>CLASS_YulMoonlightSentinel class enum, id: 163</tip>
        <help>CLASS_YulMoonlightSentinel class enum, id: 163</help>
      </item>
      <item name="CLASS_YulSagittarius" value="162">
        <tip>CLASS_YulSagittarius class enum, id: 162</tip>
        <help>CLASS_YulSagittarius class enum, id: 162</help>
      </item>
      <item name="CLASS_YulTrickster" value="165">
        <tip>CLASS_YulTrickster class enum, id: 165</tip>
        <help>CLASS_YulTrickster class enum, id: 165</help>
      </item>
    </enum>
    <enum name="L2BuffType">
      <tip>Enum buff type</tip>
      <help>Enum buff type</help>
      <item name="BUFFTYPE_ETC" value="1">
        <tip>BUFFTYPE_ETC enum with value 1</tip>
        <help>BUFFTYPE_ETC enum with value 1</help>
      </item>
      <item name="BUFFTYPE_NORMAL" value="0">
        <tip>BUFFTYPE_NORMAL enum with value 0</tip>
        <help>BUFFTYPE_NORMAL enum with value 0</help>
      </item>
      <item name="BUFFTYPE_PARTY" value="5">
        <tip>BUFFTYPE_PARTY enum with value 5</tip>
        <help>BUFFTYPE_PARTY enum with value 5</help>
      </item>
      <item name="BUFFTYPE_PET" value="4">
        <tip>BUFFTYPE_PET enum with value 4</tip>
        <help>BUFFTYPE_PET enum with value 4</help>
      </item>
      <item name="BUFFTYPE_SHORT" value="2">
        <tip>BUFFTYPE_SHORT enum with value 2</tip>
        <help>BUFFTYPE_SHORT enum with value 2</help>
      </item>
      <item name="BUFFTYPE_SUMMON" value="3">
        <tip>BUFFTYPE_SUMMON enum with value 3</tip>
        <help>BUFFTYPE_SUMMON enum with value 3</help>
      </item>
    </enum>
    <enum name="L2ZoneType">
      <tip>Enum zone type</tip>
      <help>Enum zone type</help>
      <item name="ALTERED_1" value="8">
        <tip>ALTERED_1 enum with value 8</tip>
        <help>ALTERED_1 enum with value 8</help>
      </item>
      <item name="ALTERED_2" value="9">
        <tip>ALTERED_2 enum with value 9</tip>
        <help>ALTERED_2 enum with value 9</help>
      </item>
      <item name="GENERAL" value="15">
        <tip>GENERAL enum with value 15</tip>
        <help>GENERAL enum with value 15</help>
      </item>
      <item name="PEACEFUL" value="12">
        <tip>PEACEFUL enum with value 12</tip>
        <help>PEACEFUL enum with value 12</help>
      </item>
      <item name="PVP" value="14">
        <tip>PVP enum with value 14</tip>
        <help>PVP enum with value 14</help>
      </item>
      <item name="SEVEN_SIGNS" value="13">
        <tip>SEVEN_SIGNS enum with value 13</tip>
        <help>SEVEN_SIGNS enum with value 13</help>
      </item>
      <item name="SIEGE_WAR" value="11">
        <tip>SIEGE_WAR enum with value 11</tip>
        <help>SIEGE_WAR enum with value 11</help>
      </item>
    </enum>
    <enum name="EUserCounter">
      <tip>Enum for counters</tip>
      <help>Enum for counters</help>
      <item name="eUserCounter_ALLY" value="4">
        <tip>Enum eUserCounter_ALLY, value: 4</tip>
        <help>Enum eUserCounter_ALLY, value: 4</help>
      </item>
      <item name="eUserCounter_CLAN" value="3">
        <tip>Enum eUserCounter_CLAN, value: 3</tip>
        <help>Enum eUserCounter_CLAN, value: 3</help>
      </item>
      <item name="eUserCounter_ENEMY" value="6">
        <tip>Enum eUserCounter_ENEMY, value: 6</tip>
        <help>Enum eUserCounter_ENEMY, value: 6</help>
      </item>
      <item name="eUserCounter_FRIEND" value="5">
        <tip>Enum eUserCounter_FRIEND, value: 5</tip>
        <help>Enum eUserCounter_FRIEND, value: 5</help>
      </item>
      <item name="eUserCounter_ME" value="0">
        <tip>Enum eUserCounter_ME, value: 0</tip>
        <help>Enum eUserCounter_ME, value: 0</help>
      </item>
      <item name="eUserCounter_MONSTER" value="8">
        <tip>Enum eUserCounter_MONSTER, value: 8</tip>
        <help>Enum eUserCounter_MONSTER, value: 8</help>
      </item>
      <item name="eUserCounter_NPC" value="9">
        <tip>Enum eUserCounter_NPC, value: 9</tip>
        <help>Enum eUserCounter_NPC, value: 9</help>
      </item>
      <item name="eUserCounter_OTHER" value="10">
        <tip>Enum eUserCounter_OTHER, value: 10</tip>
        <help>Enum eUserCounter_OTHER, value: 10</help>
      </item>
      <item name="eUserCounter_PARTY" value="2">
        <tip>Enum eUserCounter_PARTY, value: 2</tip>
        <help>Enum eUserCounter_PARTY, value: 2</help>
      </item>
      <item name="eUserCounter_PET" value="1">
        <tip>Enum eUserCounter_PET, value: 1</tip>
        <help>Enum eUserCounter_PET, value: 1</help>
      </item>
      <item name="eUserCounter_PLAYER" value="7">
        <tip>Enum eUserCounter_PLAYER, value: 7</tip>
        <help>Enum eUserCounter_PLAYER, value: 7</help>
      </item>
    </enum>
    <enum name="UserCounterType">
      <tip>Enum for counter types</tip>
      <help>Enum for counter types</help>
      <item name="eUserCounterType_M_HIT" value="1">
        <tip>Enum eUserCounterType_M_HIT, value: 1</tip>
        <help>Enum eUserCounterType_M_HIT, value: 1</help>
      </item>
      <item name="eUserCounterType_M_TARGET" value="0">
        <tip>Enum eUserCounterType_M_TARGET, value: 0</tip>
        <help>Enum eUserCounterType_M_TARGET, value: 0</help>
      </item>
      <item name="eUserCounterType_O_HIT" value="3">
        <tip>Enum eUserCounterType_O_HIT, value: 3</tip>
        <help>Enum eUserCounterType_O_HIT, value: 3</help>
      </item>
      <item name="eUserCounterType_O_TARGET" value="2">
        <tip>Enum eUserCounterType_O_TARGET, value: 2</tip>
        <help>Enum eUserCounterType_O_TARGET, value: 2</help>
      </item>
    </enum>
    <enum name="L2ChatType">
      <tip>Enum contain chat type.</tip>
      <help>Enum contain chat type.</help>
      <item name="CHAT_ALLIANCE" value="9">
        <tip>ALLIANCE (%) chat type</tip>
        <help>ALLIANCE (%) chat type</help>
      </item>
      <item name="CHAT_ANNOUNCE" value="10">
        <tip>ANNOUNCE chat type</tip>
        <help>ANNOUNCE chat type</help>
      </item>
      <item name="CHAT_CLAN" value="4">
        <tip>CLAN (@) chat type</tip>
        <help>CLAN (@) chat type</help>
      </item>
      <item name="CHAT_COMMANDER_CHAT" value="15">
        <tip>COMMANDER_CHAT chat type</tip>
        <help>COMMANDER_CHAT chat type</help>
      </item>
      <item name="CHAT_CRITICAL_ANNOUNCE" value="18">
        <tip>CRITICAL_ANNOUNCE chat type</tip>
        <help>CRITICAL_ANNOUNCE chat type</help>
      </item>
      <item name="CHAT_CUSTOM" value="11">
        <tip>CUSTOM chat type</tip>
        <help>CUSTOM chat type</help>
      </item>
      <item name="CHAT_DOMINIONWAR" value="20">
        <tip>DOMINIONWAR chat type</tip>
        <help>DOMINIONWAR chat type</help>
      </item>
      <item name="CHAT_FRIEND_ANNOUNCE" value="24">
        <tip>FRIEND_ANNOUNCE chat type</tip>
        <help>FRIEND_ANNOUNCE chat type</help>
      </item>
      <item name="CHAT_GM_PET" value="7">
        <tip>GM_PETITION (*) chat type</tip>
        <help>GM_PETITION (*) chat type</help>
      </item>
      <item name="CHAT_HERO" value="17">
        <tip>HERO chat type</tip>
        <help>HERO chat type</help>
      </item>
      <item name="CHAT_INTER_PARTYMASTER_CHAT" value="16">
        <tip>INTER_PARTYMASTER_CHAT chat type</tip>
        <help>INTER_PARTYMASTER_CHAT chat type</help>
      </item>
      <item name="CHAT_L2_FRIEND" value="12">
        <tip>L2_FRIEND chat type</tip>
        <help>L2_FRIEND chat type</help>
      </item>
      <item name="CHAT_MARKET" value="8">
        <tip>MARKET (+) chat type</tip>
        <help>MARKET (+) chat type</help>
      </item>
      <item name="CHAT_MPCC_ROOM" value="21">
        <tip>MPCC_ROOM chat type</tip>
        <help>MPCC_ROOM chat type</help>
      </item>
      <item name="CHAT_MSN_CHAT" value="13">
        <tip>MSN_CHAT chat type</tip>
        <help>MSN_CHAT chat type</help>
      </item>
      <item name="CHAT_NORMAL" value="0">
        <tip>NORMAL chat type</tip>
        <help>NORMAL chat type</help>
      </item>
      <item name="CHAT_NPC_NORMAL" value="22">
        <tip>NPC_NORMAL chat type</tip>
        <help>NPC_NORMAL chat type</help>
      </item>
      <item name="CHAT_NPC_SHOUT" value="23">
        <tip>NPC_SHOUT chat type</tip>
        <help>NPC_SHOUT chat type</help>
      </item>
      <item name="CHAT_PARTY" value="3">
        <tip>PARTY (#) chat type</tip>
        <help>PARTY (#) chat type</help>
      </item>
      <item name="CHAT_PARTY_ROOM_CHAT" value="14">
        <tip>PARTY_ROOM_CHAT chat type</tip>
        <help>PARTY_ROOM_CHAT chat type</help>
      </item>
      <item name="CHAT_SCREEN_ANNOUNCE" value="19">
        <tip>SCREEN_ANNOUNCE chat type</tip>
        <help>SCREEN_ANNOUNCE chat type</help>
      </item>
      <item name="CHAT_SHOUT" value="1">
        <tip>SHOUT (!) chat type</tip>
        <help>SHOUT (!) chat type</help>
      </item>
      <item name="CHAT_SYSTEM" value="5">
        <tip>SYSTEM chat type</tip>
        <help>SYSTEM chat type</help>
      </item>
      <item name="CHAT_TELL" value="2">
        <tip>TELL (") chat type</tip>
        <help>TELL (") chat type</help>
      </item>
      <item name="CHAT_USER_PET" value="6">
        <tip>USER_PETITION (&amp;) chat type</tip>
        <help>USER_PETITION (&amp;) chat type</help>
      </item>
      <item name="CHAT_WORLD" value="25">
        <tip>WORLD chat type</tip>
        <help>WORLD chat type</help>
      </item>
    </enum>
    <enum name="EAugmentResult">
      <tip>Augment result enum</tip>
      <help>Augment result enum</help>
      <item name="AUGMENT_CANCEL_ERROR" value="3">
        <tip>AUGMENT_CANCEL_ERROR augment result enum, id: 3</tip>
        <help>AUGMENT_CANCEL_ERROR augment result enum, id: 3</help>
      </item>
      <item name="AUGMENT_CANCEL_FINISHED" value="2">
        <tip>AUGMENT_CANCEL_FINISHED augment result enum, id: 2</tip>
        <help>AUGMENT_CANCEL_FINISHED augment result enum, id: 2</help>
      </item>
      <item name="AUGMENT_CANCEL_NONE" value="0">
        <tip>AUGMENT_CANCEL_NONE augment result enum, id: 0</tip>
        <help>AUGMENT_CANCEL_NONE augment result enum, id: 0</help>
      </item>
      <item name="AUGMENT_CANCEL_PENDING" value="1">
        <tip>AUGMENT_CANCEL_PENDING augment result enum, id: 1</tip>
        <help>AUGMENT_CANCEL_PENDING augment result enum, id: 1</help>
      </item>
      <item name="AUGMENT_ERROR" value="3">
        <tip>AUGMENT_ERROR augment result enum, id: 3</tip>
        <help>AUGMENT_ERROR augment result enum, id: 3</help>
      </item>
      <item name="AUGMENT_FINISHED" value="2">
        <tip>AUGMENT_FINISHED augment result enum, id: 2</tip>
        <help>AUGMENT_FINISHED augment result enum, id: 2</help>
      </item>
      <item name="AUGMENT_NONE" value="0">
        <tip>AUGMENT_NONE augment result enum, id: 0</tip>
        <help>AUGMENT_NONE augment result enum, id: 0</help>
      </item>
      <item name="AUGMENT_PENDING" value="1">
        <tip>AUGMENT_PENDING augment result enum, id: 1</tip>
        <help>AUGMENT_PENDING augment result enum, id: 1</help>
      </item>
    </enum>
    <enum name="EEnchantResult">
      <tip>Enchant result enum</tip>
      <help>Enchant result enum</help>
      <item name="ENCHANT_ERROR" value="4">
        <tip>ENCHANT_ERROR enchant result enum, id: 4</tip>
        <help>ENCHANT_ERROR enchant result enum, id: 4</help>
      </item>
      <item name="ENCHANT_FAILURE" value="3">
        <tip>ENCHANT_FAILURE enchant result enum, id: 3</tip>
        <help>ENCHANT_FAILURE enchant result enum, id: 3</help>
      </item>
      <item name="ENCHANT_NONE" value="0">
        <tip>ENCHANT_NONE enchant result enum, id: 0</tip>
        <help>ENCHANT_NONE enchant result enum, id: 0</help>
      </item>
      <item name="ENCHANT_PENDING" value="1">
        <tip>ENCHANT_PENDING enchant result enum, id: 1</tip>
        <help>ENCHANT_PENDING enchant result enum, id: 1</help>
      </item>
      <item name="ENCHANT_SUCCESS" value="2">
        <tip>ENCHANT_SUCCESS enchant result enum, id: 2</tip>
        <help>ENCHANT_SUCCESS enchant result enum, id: 2</help>
      </item>
    </enum>
    <enum name="CommandChatType">
      <tip>Command chat type enum</tip>
      <help>Command chat type enum</help>
      <item name="CHAT_ALLY" value="6">
        <tip>CHAT_ALLY L2Tower chat type, value: 6</tip>
        <help>CHAT_ALLY L2Tower chat type, value: 6</help>
      </item>
      <item name="CHAT_CLAN" value="5">
        <tip>CHAT_CLAN L2Tower chat type, value: 5</tip>
        <help>CHAT_CLAN L2Tower chat type, value: 5</help>
      </item>
      <item name="CHAT_CMD" value="1">
        <tip>CHAT_CMD L2Tower chat type, value: 1</tip>
        <help>CHAT_CMD L2Tower chat type, value: 1</help>
      </item>
      <item name="CHAT_CMD2" value="2">
        <tip>CHAT_CMD2 L2Tower chat type, value: 2</tip>
        <help>CHAT_CMD2 L2Tower chat type, value: 2</help>
      </item>
      <item name="CHAT_HERO" value="10">
        <tip>CHAT_HERO L2Tower chat type, value: 10</tip>
        <help>CHAT_HERO L2Tower chat type, value: 10</help>
      </item>
      <item name="CHAT_INTERNAL" value="0">
        <tip>CHAT_INTERNAL L2Tower chat type, value: 0</tip>
        <help>CHAT_INTERNAL L2Tower chat type, value: 0</help>
      </item>
      <item name="CHAT_PARTY" value="4">
        <tip>CHAT_PARTY L2Tower chat type, value: 4</tip>
        <help>CHAT_PARTY L2Tower chat type, value: 4</help>
      </item>
      <item name="CHAT_PM" value="3">
        <tip>CHAT_PM L2Tower chat type, value: 3</tip>
        <help>CHAT_PM L2Tower chat type, value: 3</help>
      </item>
      <item name="CHAT_PUBLIC" value="7">
        <tip>CHAT_PUBLIC L2Tower chat type, value: 7</tip>
        <help>CHAT_PUBLIC L2Tower chat type, value: 7</help>
      </item>
      <item name="CHAT_SHOUT" value="8">
        <tip>CHAT_SHOUT L2Tower chat type, value: 8</tip>
        <help>CHAT_SHOUT L2Tower chat type, value: 8</help>
      </item>
      <item name="CHAT_TRADE" value="9">
        <tip>CHAT_TRADE L2Tower chat type, value: 9</tip>
        <help>CHAT_TRADE L2Tower chat type, value: 9</help>
      </item>
    </enum>
    <enum name="CommandAccessLevel">
      <tip>Command chat access level enum</tip>
      <help>Command chat access level enum</help>
      <item name="ACCESS_ALLY" value="5">
        <tip>ACCESS_ALLY L2Tower chat access level, value: 5</tip>
        <help>ACCESS_ALLY L2Tower chat access level, value: 5</help>
      </item>
      <item name="ACCESS_ANYONE" value="6">
        <tip>ACCESS_ANYONE L2Tower chat access level, value: 6</tip>
        <help>ACCESS_ANYONE L2Tower chat access level, value: 6</help>
      </item>
      <item name="ACCESS_CLAN" value="4">
        <tip>ACCESS_CLAN L2Tower chat access level, value: 4</tip>
        <help>ACCESS_CLAN L2Tower chat access level, value: 4</help>
      </item>
      <item name="ACCESS_CUSTOM" value="2">
        <tip>ACCESS_CUSTOM L2Tower chat access level, value: 2</tip>
        <help>ACCESS_CUSTOM L2Tower chat access level, value: 2</help>
      </item>
      <item name="ACCESS_ME" value="1">
        <tip>ACCESS_ME L2Tower chat access level, value: 1</tip>
        <help>ACCESS_ME L2Tower chat access level, value: 1</help>
      </item>
      <item name="ACCESS_PARTY" value="3">
        <tip>ACCESS_PARTY L2Tower chat access level, value: 3</tip>
        <help>ACCESS_PARTY L2Tower chat access level, value: 3</help>
      </item>
      <item name="ACCESS_SCRIPT" value="0">
        <tip>ACCESS_SCRIPT L2Tower chat access level, value: 0</tip>
        <help>ACCESS_SCRIPT L2Tower chat access level, value: 0</help>
      </item>
    </enum>
    <class name="StringVector">
      <tip>StringVector base class used by some methods</tip>
      <help>StringVector base class used by some methods</help>
      <method name="at">
        <tip>Method returns element from specyfic index</tip>
        <help>Method returns element from specyfic index</help>
        <return type="string">
          <tip>string element</tip>
          <help>string element</help>
        </return>
        <arg name="index" type="uint">
          <tip>index from what return element</tip>
        </arg>
      </method>
      <method name="push_back">
        <tip>Method insert element to end of vector</tip>
        <help>Method insert element to end of vector</help>
        <arg name="element" type="string">
          <tip>string element</tip>
        </arg>
      </method>
      <method name="size">
        <tip>Method returns count of elements on vector</tip>
        <help>Method returns count of elements on vector</help>
        <return type="uint">
          <tip>count of elements on vector</tip>
          <help>count of elements on vector</help>
        </return>
      </method>
      <method name="clear">
        <tip>Method removed all elements from vector</tip>
        <help>Method removed all elements from vector</help>
      </method>
      <method name="pop_back">
        <tip>Method remove last element from vector</tip>
        <help>Method remove last element from vector</help>
      </method>
      <constructor>
        <tip>StringVector base constructor/creator</tip>
        <help>StringVector base constructor/creator</help>
      </constructor>
    </class>
    <class name="FVector">
      <tip>FVector class, class used as "location" in 3d world.</tip>
      <help> FVector class, class used as "location" in 3d world.</help>
      <property type="float" name="X">
        <tip>X position</tip>
        <help>X position</help>
      </property>
      <property type="float" name="Y">
        <tip>Y position</tip>
        <help>Y position</help>
      </property>
      <property type="float" name="Z">
        <tip>Z position</tip>
        <help>Z position</help>
      </property>
      <method name="IsNonZero">
        <tip>Checks if Vector is new set</tip>
        <help>Checks if Vector is new set</help>
        <return type="boolean">
          <tip>true if empty, false if not</tip>
          <help>true if empty, false if not</help>
        </return>
      </method>
      <constructor>
        <tip>Counstructor with float parameters</tip>
        <help> Counstructor with float parameters
sets X,Y,Z to specyfic values</help>
        <arg name="X" type="float">
          <tip>X positiom</tip>
        </arg>
        <arg name="Y" type="float">
          <tip>Y position</tip>
        </arg>
        <arg name="Z" type="float">
          <tip>Z position</tip>
        </arg>
      </constructor>
      <constructor>
        <tip>Default counstructor</tip>
        <help> Default counstructor
sets X,Y,Z to 0.0</help>
      </constructor>
    </class>
    <class name="FRotator">
      <tip>Contain information about int what side character is turned off, or in what side is looking</tip>
      <help>Contain information about int what side character is turned off, or in what side is looking</help>
      <property type="int" name="Pitch">
        <tip>Looking up and down (0=Straight Ahead, +Up, -Down).</tip>
        <help>Looking up and down (0=Straight Ahead, +Up, -Down).</help>
      </property>
      <property type="int" name="Yaw">
        <tip>Rotating around (running in circles), 0=East, +North, -South.</tip>
        <help>Rotating around (running in circles), 0=East, +North, -South.</help>
      </property>
      <property type="int" name="Roll">
        <tip>Rotation about axis of screen, 0=Straight, +Clockwise, -CCW.</tip>
        <help>Rotation about axis of screen, 0=Straight, +Clockwise, -CCW.</help>
      </property>
      <constructor>
        <tip>Default, constructor, sets all class members to 0</tip>
        <help>Default, constructor, sets all class members to 0</help>
      </constructor>
    </class>
    <class name="L2Buff" creatable="false">
      <tip>Buff info class</tip>
      <help>Buff info class</help>
      <property type="L2BuffType" name="type" readonly="true">
        <tip>Skill buff type, information how it was added to list.</tip>
        <help>Skill buff type, information how it was added to list.</help>
      </property>
      <property type="int" name="skillId" readonly="true">
        <tip>The buffs skill id</tip>
        <help>The buffs skill id</help>
      </property>
      <property type="int" name="skillLvl" readonly="true">
        <tip>The buffs skill level</tip>
        <help>The buffs skill level</help>
      </property>
      <property type="int" name="skillSubLvl" readonly="true">
        <tip>The buffs skill sub level</tip>
        <help>The buffs skill sub level</help>
      </property>
      <property type="uint64" name="endTime" readonly="true">
        <tip>Time when buff ends</tip>
        <help>Time when buff ends</help>
      </property>
      <property type="byte" name="index" readonly="true">
        <tip>Buff index</tip>
        <help>Buff index</help>
      </property>
      <method name="IsValid">
        <tip>Method returns true if buff is valid and still exists.</tip>
        <help>Method returns true if buff is valid and still exists.</help>
        <return type="boolean">
          <tip>True if valid, False if not</tip>
          <help>True if valid, False if not</help>
        </return>
      </method>
    </class>
    <class name="User" creatable="false">
      <tip>User info class</tip>
      <help>User info class</help>
      <method name="GetBuff">
        <tip>Method return buff information</tip>
        <help>Method return buff information</help>
        <return type="L2Buff">
          <tip>L2UserBuff or nil if not found</tip>
          <help>L2UserBuff or nil if not found</help>
        </return>
        <arg name="skillId" type="int">
          <tip>skill id of buff</tip>
        </arg>
      </method>
      <method name="GotBuff">
        <tip>Method checks if user got buffs</tip>
        <help>Method checks if user got buffs</help>
        <return type="boolean">
          <tip>true if has, false if not</tip>
          <help>true if has, false if not</help>
        </return>
        <arg name="skillId" type="int">
          <tip>skill id of buff</tip>
        </arg>
      </method>
      <method name="IsValid">
        <tip>Checks if user is valid</tip>
        <help>Checks if user is valid</help>
        <return type="boolean">
          <tip>True if user is valid</tip>
          <help>True if user is valid</help>
        </return>
      </method>
      <method name="IsPlayer">
        <tip>Returns true if user is a player</tip>
        <help>Returns true if user is a player</help>
        <return type="boolean">
          <tip>True/False</tip>
          <help>True/False</help>
        </return>
      </method>
      <method name="IsMyPartyMember">
        <tip>Returns true if user is my party member</tip>
        <help>Returns true if user is my party member</help>
        <return type="boolean">
          <tip>True/False</tip>
          <help>True/False</help>
        </return>
      </method>
      <method name="IsMyPartyMemberMaster">
        <tip>Checks if this player is party leader</tip>
        <help>Checks if this player is party leader</help>
        <return type="boolean">
          <tip>True if is</tip>
          <help>True if is</help>
        </return>
      </method>
      <method name="IsFriend">
        <tip>Returns true if user is a friend (clan member, ally member, party member, me or my pet)</tip>
        <help>Returns true if user is a friend (clan member, ally member, party member, me or my pet)</help>
        <return type="boolean">
          <tip>True/False</tip>
          <help>True/False</help>
        </return>
      </method>
      <method name="IsMe">
        <tip>Returns true if user is Me</tip>
        <help>Returns true if user is Me</help>
        <return type="boolean">
          <tip>True/False</tip>
          <help>True/False</help>
        </return>
      </method>
      <method name="IsNpc">
        <tip>Returns true if user is a npc</tip>
        <help>Returns true if user is a npc</help>
        <return type="boolean">
          <tip>True/False</tip>
          <help>True/False</help>
        </return>
      </method>
      <method name="IsMonster">
        <tip>Returns true if user is a monster</tip>
        <help>Returns true if user is a monster</help>
        <return type="boolean">
          <tip>True/False</tip>
          <help>True/False</help>
        </return>
      </method>
      <method name="IsInCombat">
        <tip>Checks if user is in combat</tip>
        <help>Checks if user is in combat</help>
        <return type="boolean">
          <tip>True if user is in combat</tip>
          <help>True if user is in combat</help>
        </return>
      </method>
      <method name="IsMyClanMember">
        <tip>Returns true if user is a my clan member</tip>
        <help>Returns true if user is a my clan member</help>
        <return type="boolean">
          <tip>True/False</tip>
          <help>True/False</help>
        </return>
      </method>
      <method name="IsMyClanMemberMaster">
        <tip>Returns true if user is a my clan leader</tip>
        <help>Returns true if user is a my clan leader</help>
        <return type="boolean">
          <tip>True/False</tip>
          <help>True/False</help>
        </return>
      </method>
      <method name="IsMyAllianceMember">
        <tip>Returns true if user is a mu alliance member</tip>
        <help>Returns true if user is a mu alliance member</help>
        <return type="boolean">
          <tip>True/False</tip>
          <help>True/False</help>
        </return>
      </method>
      <method name="IsWalking">
        <tip>Returns true if user is walking</tip>
        <help>Returns true if user is walking</help>
        <return type="boolean">
          <tip>True/False</tip>
          <help>True/False</help>
        </return>
      </method>
      <method name="HaveCubic">
        <tip>Method checks if user got specyfic cubic</tip>
        <help>Method checks if user got specyfic cubic
CUBIC_DO_NOT_EXIST = 0,
CUBIC_DD = 1,
CUBIC_DRAIN = 2,
CUBIC_HEAL = 3,
CUBIC_POISON = 4,
CUBIC_DEBUF = 5,
CUBIC_PARALYZE = 6,
CUBIC_WATER_DOT = 7,
CUBIC_SHOCK = 8,
CUBIC_ATTRACT = 9,
CUBIC_TEMPLEK_SMART = 10,
CUBIC_SHILLIENK_SMART = 11,
CUBIC_WARLOCK_SMART = 12,
CUBIC_ELEMENTALS_SMART = 13,
CUBIC_PHANTOMS_SMART = 14,
CUBIC_AVENGE = 15,
CUBIC_KNIGHT = 16,
CUBIC_HEALER = 17,
CUBIC_SIGEL_LIFE = 18,
CUBIC_SIGEL_MIND = 19,
CUBIC_SIGEL_VAMPIRIC = 20,
CUBIC_SIGEL_HEX = 21,
CUBIC_SIGEL_GUARDIAN = 22</help>
        <sample>GetMe():HaveCubic(13);</sample>
        <return type="boolean">
          <tip>true if has, false if not</tip>
          <help>true if has, false if not</help>
        </return>
        <arg name="cubicId" type="int">
          <tip>cubic id</tip>
        </arg>
      </method>
      <method name="GetAgathionID">
        <tip>Returns AgathionID, this is not id of item</tip>
        <help>Returns AgathionID, this is not id of item</help>
        <return type="int">
          <tip>AgathionID, -1 if no agation found</tip>
          <help>AgathionID, -1 if no agation found</help>
        </return>
      </method>
      <method name="IsSiting">
        <tip>Returns true if user is siting</tip>
        <help>Returns true if user is siting</help>
        <return type="boolean">
          <tip>True/False</tip>
          <help>True/False</help>
        </return>
      </method>
      <method name="IsEnemy">
        <tip>Returns true if user is a enemy</tip>
        <help>Returns true if user is a enemy</help>
        <return type="boolean">
          <tip>True/False</tip>
          <help>True/False</help>
        </return>
      </method>
      <method name="IsPvPFlag">
        <tip>Checks if pvp flag is on or blinking</tip>
        <help>Checks if pvp flag is on or blinking</help>
        <return type="boolean">
          <tip>true if pvp flag is on</tip>
          <help>true if pvp flag is on</help>
        </return>
      </method>
      <method name="IsPvPFlagBlink">
        <tip>Checks if pvp flag is blinking</tip>
        <help>Checks if pvp flag is blinking</help>
        <return type="boolean">
          <tip>true if pvp flag is blinking</tip>
          <help>true if pvp flag is blinking</help>
        </return>
      </method>
      <method name="IsAlikeDeath">
        <tip>Checks if user is death</tip>
        <help>Checks if user is death</help>
        <return type="boolean">
          <tip>true if user is death</tip>
          <help>true if user is death</help>
        </return>
      </method>
      <method name="IsSpoiled">
        <tip>Checks if monster is spoiled</tip>
        <help>Checks if monster is spoiled</help>
        <return type="boolean">
          <tip>true if monster is spoiled</tip>
          <help>true if monster is spoiled</help>
        </return>
      </method>
      <method name="IsPet">
        <tip>Checks if user is a pet</tip>
        <help>Checks if user is a pet</help>
        <return type="boolean">
          <tip>true if user is a pet</tip>
          <help>true if user is a pet</help>
        </return>
      </method>
      <method name="IsMyPet">
        <tip>Checks if user is my pet</tip>
        <help>Checks if user is my pet</help>
        <return type="boolean">
          <tip>true if user is my pet</tip>
          <help>true if user is my pet</help>
        </return>
      </method>
      <method name="IsSummon">
        <tip>Checks if user is a summon</tip>
        <help>Checks if user is a summon</help>
        <return type="boolean">
          <tip>true if user is a summon</tip>
          <help>true if user is a summon</help>
        </return>
      </method>
      <method name="IsPetOrSummon">
        <tip>Checks if user is a summon or pet</tip>
        <help>Checks if user is a summon or pet</help>
        <return type="boolean">
          <tip>true if user is a summon or pet</tip>
          <help>true if user is a summon or pet</help>
        </return>
      </method>
      <method name="IsAttacking">
        <tip>Checks if user is attacking</tip>
        <help>Checks if user is attacking</help>
        <return type="boolean">
          <tip>true if user is attacking</tip>
          <help>true if user is attacking</help>
        </return>
      </method>
      <method name="GetId">
        <tip>Returns user objectId</tip>
        <help>Returns user objectId</help>
        <return type="int">
          <tip>objectId of user</tip>
          <help>objectId of user</help>
        </return>
      </method>
      <method name="GetLocation">
        <tip>Returns user location</tip>
        <help>Returns user location</help>
        <return type="FVector">
          <tip>location of user</tip>
          <help>location of user</help>
        </return>
      </method>
      <method name="GetHp">
        <tip>Returns HP of user</tip>
        <help>Returns HP of user</help>
        <return type="int">
          <tip>HP</tip>
          <help>HP</help>
        </return>
      </method>
      <method name="GetMp">
        <tip>Returns MP of user</tip>
        <help>Returns MP of user</help>
        <return type="int">
          <tip>MP</tip>
          <help>MP</help>
        </return>
      </method>
      <method name="GetCp">
        <tip>Returns CP of user</tip>
        <help>Returns CP of user</help>
        <return type="int">
          <tip>CP</tip>
          <help>CP</help>
        </return>
      </method>
      <method name="GetMaxHp">
        <tip>Returns Max HP of user</tip>
        <help>Returns Max HP of user</help>
        <return type="int">
          <tip>Max HP</tip>
          <help>Max HP</help>
        </return>
      </method>
      <method name="GetMaxMp">
        <tip>Returns Max MP of user</tip>
        <help>Returns Max MP of user</help>
        <return type="int">
          <tip>Max MP</tip>
          <help>Max MP</help>
        </return>
      </method>
      <method name="GetMaxCp">
        <tip>Returns Max CP of user</tip>
        <help>Returns Max CP of user</help>
        <return type="int">
          <tip>Max CP</tip>
          <help>Max CP</help>
        </return>
      </method>
      <method name="GetHpPercent">
        <tip>Returns user HP in percent</tip>
        <help>Returns user HP in percent</help>
        <return type="float">
          <tip>HpPercent</tip>
          <help>HpPercent</help>
        </return>
      </method>
      <method name="GetMpPercent">
        <tip>Returns user MP in percent</tip>
        <help>Returns user MP in percent</help>
        <return type="float">
          <tip>MpPercent</tip>
          <help>MpPercent</help>
        </return>
      </method>
      <method name="GetCpPercent">
        <tip>Returns user CP in percent</tip>
        <help>Returns user CP in percent</help>
        <return type="float">
          <tip>CpPercent</tip>
          <help>CpPercent</help>
        </return>
      </method>
      <method name="GetLevel">
        <tip>Returns user level</tip>
        <help>Returns user level</help>
        <return type="int">
          <tip>level</tip>
          <help>level</help>
        </return>
      </method>
      <method name="GetPenaltyLevel">
        <tip>Returns user penalty level (level of skillId: 5076)</tip>
        <help>Returns user penalty level (level of skillId: 5076)</help>
        <return type="int">
          <tip>penalty level</tip>
          <help>penalty level</help>
        </return>
      </method>
      <method name="GetSoulLevel">
        <tip>Returns user soul level (level of skillId: 5446)</tip>
        <help>Returns user soul level (level of skillId: 5446)</help>
        <return type="int">
          <tip>soul level</tip>
          <help>soul level</help>
        </return>
      </method>
      <method name="GetRace">
        <tip>Returns user race</tip>
        <help>Returns user race</help>
        <return type="L2Race">
          <tip>L2Race of user</tip>
          <help>L2Race of user</help>
        </return>
      </method>
      <method name="GetStatSTR">
        <tip>Returns user STR stats</tip>
        <help>Returns user STR stats</help>
        <return type="int">
          <tip>STR</tip>
          <help>STR</help>
        </return>
      </method>
      <method name="GetStatDEX">
        <tip>Returns user DEX stats</tip>
        <help>Returns user DEX stats</help>
        <return type="int">
          <tip>DEX</tip>
          <help>DEX</help>
        </return>
      </method>
      <method name="GetStatCON">
        <tip>Returns user CON stats</tip>
        <help>Returns user CON stats</help>
        <return type="int">
          <tip>CON</tip>
          <help>CON</help>
        </return>
      </method>
      <method name="GetStatINT">
        <tip>Returns user INT stats</tip>
        <help>Returns user INT stats</help>
        <return type="int">
          <tip>INT</tip>
          <help>INT</help>
        </return>
      </method>
      <method name="GetStatMEN">
        <tip>Returns user MEN stats</tip>
        <help>Returns user MEN stats</help>
        <return type="int">
          <tip>MEN</tip>
          <help>MEN</help>
        </return>
      </method>
      <method name="GetStatWIT">
        <tip>Returns user WIT stats</tip>
        <help>Returns user WIT stats</help>
        <return type="int">
          <tip>WIT</tip>
          <help>WIT</help>
        </return>
      </method>
      <method name="GetName">
        <tip>Returns user name</tip>
        <help>Returns user name</help>
        <return type="string">
          <tip>name of user</tip>
          <help>name of user</help>
        </return>
      </method>
      <method name="GetNickName">
        <tip>Metohod returns actual nick name</tip>
        <help>Metohod returns actual nick name</help>
        <return type="string">
          <tip>user nick name</tip>
          <help>user nick name</help>
        </return>
      </method>
      <method name="GetNpcId">
        <tip>Returns user npc id</tip>
        <help>Returns user npc id</help>
        <return type="int">
          <tip>npc id of user</tip>
          <help>npc id of user</help>
        </return>
      </method>
      <method name="GetWeightLimit">
        <tip>Returns user weight limit</tip>
        <help>Returns user weight limit</help>
        <return type="int">
          <tip>weight limit of user</tip>
          <help>weight limit of user</help>
        </return>
      </method>
      <method name="GetWeight">
        <tip>Returns user weight</tip>
        <help>Returns user weight</help>
        <return type="int">
          <tip>weight of user</tip>
          <help>weight of user</help>
        </return>
      </method>
      <method name="GetWeightPercent">
        <tip>Returns user weight in percent</tip>
        <help>Returns user weight in percent</help>
        <return type="float">
          <tip>weight in percent of user</tip>
          <help>weight in percent of user</help>
        </return>
      </method>
      <method name="GetStatAccuracy">
        <tip>Returns user Accuracy stats</tip>
        <help>Returns user Accuracy stats</help>
        <return type="int">
          <tip>Accuracy</tip>
          <help>Accuracy</help>
        </return>
      </method>
      <method name="GetStatCriticalRate">
        <tip>Returns user CriticalRate stats</tip>
        <help>Returns user CriticalRate stats</help>
        <return type="int">
          <tip>CriticalRate</tip>
          <help>CriticalRate</help>
        </return>
      </method>
      <method name="GetStatPhysicalAttack">
        <tip>Returns user PhysicalAttack stats</tip>
        <help>Returns user PhysicalAttack stats</help>
        <return type="int">
          <tip>PhysicalAttack</tip>
          <help>PhysicalAttack</help>
        </return>
      </method>
      <method name="GetStatAttackSpeed">
        <tip>Returns user AttackSpeed stats</tip>
        <help>Returns user AttackSpeed stats</help>
        <return type="int">
          <tip>AttackSpeed</tip>
          <help>AttackSpeed</help>
        </return>
      </method>
      <method name="GetStatPhysicalDefense">
        <tip>Returns user PhysicalDefense stats</tip>
        <help>Returns user PhysicalDefense stats</help>
        <return type="int">
          <tip>PhysicalDefense</tip>
          <help>PhysicalDefense</help>
        </return>
      </method>
      <method name="GetStatEvasion">
        <tip>Returns user Evasion stats</tip>
        <help>Returns user Evasion stats</help>
        <return type="int">
          <tip>Evasion</tip>
          <help>Evasion</help>
        </return>
      </method>
      <method name="GetStatMagicAttack">
        <tip>Returns user MagicAttack stats</tip>
        <help>Returns user MagicAttack stats</help>
        <return type="int">
          <tip>MagicAttack</tip>
          <help>MagicAttack</help>
        </return>
      </method>
      <method name="GetStatMagicEvasion">
        <tip>Returns user MagicEvasion stats</tip>
        <help>Returns user MagicEvasion stats</help>
        <return type="int">
          <tip>MagicEvasion</tip>
          <help>MagicEvasion</help>
        </return>
      </method>
      <method name="GetStatMagicAccuracy">
        <tip>Returns user MagicAccuracy stats</tip>
        <help>Returns user MagicAccuracy stats</help>
        <return type="int">
          <tip>MagicAccuracy</tip>
          <help>MagicAccuracy</help>
        </return>
      </method>
      <method name="GetStatMagicCriticalRate">
        <tip>Returns user MagicCriticalRate stats</tip>
        <help>Returns user MagicCriticalRate stats</help>
        <return type="int">
          <tip>MagicCriticalRate</tip>
          <help>MagicCriticalRate</help>
        </return>
      </method>
      <method name="GetStatMagicDefense">
        <tip>Returns user MagicDefense stats</tip>
        <help>Returns user MagicDefense stats</help>
        <return type="int">
          <tip>MagicDefense</tip>
          <help>MagicDefense</help>
        </return>
      </method>
      <method name="GetStatCastingSpeed">
        <tip>Returns user CastingSpeed stats</tip>
        <help>Returns user CastingSpeed stats</help>
        <return type="int">
          <tip>CastingSpeed</tip>
          <help>CastingSpeed</help>
        </return>
      </method>
      <method name="GetClanId">
        <tip>Returns user clan id</tip>
        <help>Returns user clan id</help>
        <return type="int">
          <tip>clan id</tip>
          <help>clan id</help>
        </return>
      </method>
      <method name="GetClanCrestId">
        <tip>Returns user clan crest id</tip>
        <help>Returns user clan crest id</help>
        <return type="int">
          <tip>clan crest id</tip>
          <help>clan crest id</help>
        </return>
      </method>
      <method name="GetAllianceId">
        <tip>Returns user alliance id</tip>
        <help>Returns user alliance id</help>
        <return type="int">
          <tip>alliance id</tip>
          <help>alliance id</help>
        </return>
      </method>
      <method name="GetAllianceCrestId">
        <tip>Returns user alliance crest id</tip>
        <help>Returns user alliance crest id</help>
        <return type="int">
          <tip>alliance crest id</tip>
          <help>alliance crest id</help>
        </return>
      </method>
      <method name="GetTarget">
        <tip>Returns user target objectId</tip>
        <help>Returns user target objectId</help>
        <return type="int">
          <tip>target objectId of user</tip>
          <help>target objectId of user</help>
        </return>
      </method>
      <method name="GetClass">
        <tip>Returns user L2Class</tip>
        <help>Returns user L2Class</help>
        <return type="L2Class">
          <tip>lineage 2 class</tip>
          <help>lineage 2 class</help>
        </return>
      </method>
      <method name="GetMasterName">
        <tip>Returns name of user who is owner of pet/summon</tip>
        <help>Returns name of user who is owner of pet/summon</help>
        <return type="string">
          <tip>Master name</tip>
          <help>Master name</help>
        </return>
      </method>
      <method name="GetDestinationLocation">
        <tip>Returns user move desitnation</tip>
        <help>Returns user move desitnation</help>
        <return type="FVector">
          <tip>user move desitnation</tip>
          <help>user move desitnation</help>
        </return>
      </method>
      <method name="IsBlocked">
        <tip>Checks if user is blocked by stun, sleep or other effect</tip>
        <help>Checked effect by this method:
CONFUSED, INVULNERABLE, FIREROOT_STUN, DANCE_STUNNED, SLEEP, 'STUN', IMPRISIONING_1, IMPRISIONING_2</help>
        <return type="boolean">
          <tip>True if is</tip>
          <help>True if is</help>
        </return>
        <arg name="includeStun" type="boolean">
          <tip>set to true if should include STUN</tip>
        </arg>
      </method>
      <method name="GetPetId">
        <tip>If this user got pet, this meethod will return his id</tip>
        <help>If this user got pet, this meethod will return his id</help>
        <return type="int">
          <tip>PetId</tip>
          <help>PetId</help>
        </return>
      </method>
      <method name="GetMasterId">
        <tip>Returns id of user who is owner of pet/summon</tip>
        <help>Returns id of user who is owner of pet/summon</help>
        <return type="int">
          <tip>MasterId</tip>
          <help>MasterId</help>
        </return>
      </method>
      <method name="IsUsingMagic">
        <tip>Checks if is using magic</tip>
        <help>Checks if is using magic</help>
        <return type="boolean">
          <tip>True if is</tip>
          <help>True if is</help>
        </return>
      </method>
      <method name="CanSeeMe">
        <tip>Checks if other user can see our character</tip>
        <help>Checks if other user can see our character</help>
        <return type="boolean">
          <tip>True if can</tip>
          <help>True if can</help>
        </return>
      </method>
      <method name="GetRangeTo">
        <tip>Calculates range to player</tip>
        <help>Calculates range to player</help>
        <return type="float">
          <tip>Range to player</tip>
          <help>Range to player</help>
        </return>
        <arg name="player" type="User">
          <tip>player to that calculate range</tip>
        </arg>
      </method>
      <method name="GetRangeTo">
        <tip>Calculates range to location</tip>
        <help>Calculates range to location</help>
        <return type="float">
          <tip>Range to location</tip>
          <help>Range to location</help>
        </return>
        <arg name="X" type="float">
          <tip>X location</tip>
        </arg>
        <arg name="Y" type="float">
          <tip>Y location</tip>
        </arg>
        <arg name="Z" type="float">
          <tip>Z location</tip>
        </arg>
      </method>
      <method name="GetDistance">
        <tip>Returns distance from us to this user</tip>
        <help>Returns distance from us to this user</help>
        <return type="int">
          <tip>distance</tip>
          <help>distance</help>
        </return>
      </method>
      <method name="GetUserType">
        <tip>Returns user type (0 - player, 1 - npc)</tip>
        <help>Returns user type (0 - player, 1 - npc)</help>
        <return type="int">
          <tip>user type</tip>
          <help>user type</help>
        </return>
      </method>
      <method name="GetSummonType">
        <tip>Returns summon type (0 - none, 1 - pet/summon)</tip>
        <help>Returns summon type (0 - none, 1 - pet/summon)</help>
        <return type="int">
          <tip>summon type</tip>
          <help>summon type</help>
        </return>
      </method>
      <method name="GetNpcType">
        <tip>Returns npc type (0 - npc, 1 - monster)</tip>
        <help>Returns npc type (0 - npc, 1 - monster)</help>
        <return type="int">
          <tip>npc type</tip>
          <help>npc type</help>
        </return>
      </method>
      <method name="GetGenderId">
        <tip>Returns gender Id (Male, Female)</tip>
        <help>Returns gender Id (Male, Female)</help>
        <return type="L2Sex">
          <tip>Male, Female</tip>
          <help>Male, Female</help>
        </return>
      </method>
      <method name="GetEXP">
        <tip>Returns user EXP</tip>
        <help>Returns user EXP</help>
        <return type="int64">
          <tip>user EXP</tip>
          <help>user EXP</help>
        </return>
      </method>
      <method name="GetEnergyLevel">
        <tip>Returns user energy level (level of skillId: 4271)</tip>
        <help>Returns user energy level (level of skillId: 4271)</help>
        <return type="int">
          <tip>energy level</tip>
          <help>energy level</help>
        </return>
      </method>
      <method name="GetMeleAttackRange">
        <tip>Returns user mele attack range</tip>
        <help>Returns user mele attack range</help>
        <return type="int">
          <tip>user mele attack range</tip>
          <help>user mele attack range</help>
        </return>
      </method>
      <method name="GetEquip_UnderwearId">
        <tip>Returns user equipment: UnderwearId</tip>
        <help>Returns user equipment: UnderwearId</help>
        <return type="int">
          <tip>UnderwearId</tip>
          <help>UnderwearId</help>
        </return>
      </method>
      <method name="GetEquip_RightEarringId">
        <tip>Returns user equipment: RightEarringId</tip>
        <help>Returns user equipment: RightEarringId</help>
        <return type="int">
          <tip>RightEarringId</tip>
          <help>RightEarringId</help>
        </return>
      </method>
      <method name="GetEquip_LeftEarringId">
        <tip>Returns user equipment: LeftEarringId</tip>
        <help>Returns user equipment: LeftEarringId</help>
        <return type="int">
          <tip>LeftEarringId</tip>
          <help>LeftEarringId</help>
        </return>
      </method>
      <method name="GetEquip_NecklaceId">
        <tip>Returns user equipment: NecklaceId</tip>
        <help>Returns user equipment: NecklaceId</help>
        <return type="int">
          <tip>NecklaceId</tip>
          <help>NecklaceId</help>
        </return>
      </method>
      <method name="GetEquip_LeftRingId">
        <tip>Returns user equipment: LeftRingId</tip>
        <help>Returns user equipment: LeftRingId</help>
        <return type="int">
          <tip>LeftRingId</tip>
          <help>LeftRingId</help>
        </return>
      </method>
      <method name="GetEquip_RightRingId">
        <tip>Returns user equipment: RightRingId</tip>
        <help>Returns user equipment: RightRingId</help>
        <return type="int">
          <tip>RightRingId</tip>
          <help>RightRingId</help>
        </return>
      </method>
      <method name="GetEquip_HelmId">
        <tip>Returns user equipment: HelmId</tip>
        <help>Returns user equipment: HelmId</help>
        <return type="int">
          <tip>HelmId</tip>
          <help>HelmId</help>
        </return>
      </method>
      <method name="GetEquip_TwoHandedWeaponId">
        <tip>Returns user equipment: TwoHandedWeaponId</tip>
        <help>Returns user equipment: TwoHandedWeaponId</help>
        <return type="int">
          <tip>TwoHandedWeaponId</tip>
          <help>TwoHandedWeaponId</help>
        </return>
      </method>
      <method name="GetEquip_Unknown1Id">
        <tip>Returns user equipment: Unknown1Id</tip>
        <help>Returns user equipment: Unknown1Id</help>
        <return type="int">
          <tip>Unknown1Id</tip>
          <help>Unknown1Id</help>
        </return>
      </method>
      <method name="GetEquip_Unknown2Id">
        <tip>Returns user equipment: Unknown2Id</tip>
        <help>Returns user equipment: Unknown2Id</help>
        <return type="int">
          <tip>Unknown2Id</tip>
          <help>Unknown2Id</help>
        </return>
      </method>
      <method name="GetEquip_Unknown3Id">
        <tip>Returns user equipment: Unknown3Id</tip>
        <help>Returns user equipment: Unknown3Id</help>
        <return type="int">
          <tip>Unknown3Id</tip>
          <help>Unknown3Id</help>
        </return>
      </method>
      <method name="GetEquip_BraceletId">
        <tip>Returns user equipment: BraceletId</tip>
        <help>Returns user equipment: BraceletId</help>
        <return type="int">
          <tip>BraceletId</tip>
          <help>BraceletId</help>
        </return>
      </method>
      <method name="GetEquip_AgationId">
        <tip>Returns user equipment: AgationId</tip>
        <help>Returns user equipment: AgationId</help>
        <return type="int">
          <tip>AgationId</tip>
          <help>AgationId</help>
        </return>
      </method>
      <method name="GetEquip_Talizman1Id">
        <tip>Returns user equipment: Talizman1Id</tip>
        <help>Returns user equipment: Talizman1Id</help>
        <return type="int">
          <tip>Talizman1Id</tip>
          <help>Talizman1Id</help>
        </return>
      </method>
      <method name="GetEquip_Talizman2Id">
        <tip>Returns user equipment: Talizman2Id</tip>
        <help>Returns user equipment: Talizman2Id</help>
        <return type="int">
          <tip>Talizman2Id</tip>
          <help>Talizman2Id</help>
        </return>
      </method>
      <method name="GetEquip_Talizman3Id">
        <tip>Returns user equipment: Talizman3Id</tip>
        <help>Returns user equipment: Talizman3Id</help>
        <return type="int">
          <tip>Talizman3Id</tip>
          <help>Talizman3Id</help>
        </return>
      </method>
      <method name="GetEquip_Talizman4Id">
        <tip>Returns user equipment: Talizman4Id</tip>
        <help>Returns user equipment: Talizman4Id</help>
        <return type="int">
          <tip>Talizman4Id</tip>
          <help>Talizman4Id</help>
        </return>
      </method>
      <method name="GetEquip_Talizman5Id">
        <tip>Returns user equipment: Talizman5Id</tip>
        <help>Returns user equipment: Talizman5Id</help>
        <return type="int">
          <tip>Talizman5Id</tip>
          <help>Talizman5Id</help>
        </return>
      </method>
      <method name="GetEquip_Talizman6Id">
        <tip>Returns user equipment: Talizman6Id</tip>
        <help>Returns user equipment: Talizman6Id</help>
        <return type="int">
          <tip>Talizman6Id</tip>
          <help>Talizman6Id</help>
        </return>
      </method>
      <method name="GetEquip_BeltId">
        <tip>Returns user equipment: BeltId</tip>
        <help>Returns user equipment: BeltId</help>
        <return type="int">
          <tip>BeltId</tip>
          <help>BeltId</help>
        </return>
      </method>
      <method name="GetEquip_GlovesId">
        <tip>Returns user equipment: GlovesId</tip>
        <help>Returns user equipment: GlovesId</help>
        <return type="int">
          <tip>GlovesId</tip>
          <help>GlovesId</help>
        </return>
      </method>
      <method name="GetEquip_BodyUpId">
        <tip>Returns user equipment: BodyUpId</tip>
        <help>Returns user equipment: BodyUpId</help>
        <return type="int">
          <tip>BodyUpId</tip>
          <help>BodyUpId</help>
        </return>
      </method>
      <method name="GetEquip_BodyDownId">
        <tip>Returns user equipment: BodyDownId</tip>
        <help>Returns user equipment: BodyDownId</help>
        <return type="int">
          <tip>BodyDownId</tip>
          <help>BodyDownId</help>
        </return>
      </method>
      <method name="GetEquip_BootsId">
        <tip>Returns user equipment: BootsId</tip>
        <help>Returns user equipment: BootsId</help>
        <return type="int">
          <tip>BootsId</tip>
          <help>BootsId</help>
        </return>
      </method>
      <method name="GetEquip_CloakId">
        <tip>Returns user equipment: CloakId</tip>
        <help>Returns user equipment: CloakId</help>
        <return type="int">
          <tip>CloakId</tip>
          <help>CloakId</help>
        </return>
      </method>
      <method name="GetEquip_Accessory1Id">
        <tip>Returns user equipment: Accessory1Id</tip>
        <help>Returns user equipment: Accessory1Id</help>
        <return type="int">
          <tip>Accessory1Id</tip>
          <help>Accessory1Id</help>
        </return>
      </method>
      <method name="GetEquip_Accessory2Id">
        <tip>Returns user equipment: Accessory2Id</tip>
        <help>Returns user equipment: Accessory2Id</help>
        <return type="int">
          <tip>Accessory2Id</tip>
          <help>Accessory2Id</help>
        </return>
      </method>
      <method name="GetEquip_WeaponId">
        <tip>Returns user equipment: WeaponId</tip>
        <help>Returns user equipment: WeaponId</help>
        <return type="int">
          <tip>WeaponId</tip>
          <help>WeaponId</help>
        </return>
      </method>
      <method name="GetEquip_ShieldId">
        <tip>Returns user equipment: ShieldId</tip>
        <help>Returns user equipment: ShieldId</help>
        <return type="int">
          <tip>ShieldId</tip>
          <help>ShieldId</help>
        </return>
      </method>
      <method name="GetTitleColor">
        <tip>Returns Title color</tip>
        <help>Returns Title color</help>
        <return type="int">
          <tip>Colour encoded as integer</tip>
          <help>Colour encoded as integer</help>
        </return>
      </method>
      <method name="GetReputation">
        <tip>Returns user reputation</tip>
        <help>Returns user reputation</help>
        <return type="int">
          <tip>reputation</tip>
          <help>reputation</help>
        </return>
      </method>
      <method name="GetRunSpeed">
        <tip>Returns user run speed</tip>
        <help>Returns user run speed</help>
        <return type="int">
          <tip>run speed</tip>
          <help>run speed</help>
        </return>
      </method>
      <method name="GetWalkSpeed">
        <tip>Returns user walk speed</tip>
        <help>Returns user walk speed</help>
        <return type="int">
          <tip>walk speed</tip>
          <help>walk speed</help>
        </return>
      </method>
      <method name="GetSwimRunSpeed">
        <tip>Returns user swim run speed</tip>
        <help>Returns user swim run speed</help>
        <return type="int">
          <tip>swim run speed</tip>
          <help>swim run speed</help>
        </return>
      </method>
      <method name="GetSwimWalkSpeed">
        <tip>Returns user swim walk speed</tip>
        <help>Returns user swim walk speed</help>
        <return type="int">
          <tip>swim walk speed</tip>
          <help>swim walk speed</help>
        </return>
      </method>
      <method name="GetFlRunSpeed">
        <tip>Returns user follow run speed</tip>
        <help>Returns user follow run speed</help>
        <return type="int">
          <tip>follow run speed</tip>
          <help>follow run speed</help>
        </return>
      </method>
      <method name="GetFlWalkSpeed">
        <tip>Returns user follow walk speed</tip>
        <help>Returns user follow walk speed</help>
        <return type="int">
          <tip>follow walk speed</tip>
          <help>follow walk speed</help>
        </return>
      </method>
      <method name="GetFlyRunSpeed">
        <tip>Returns user fly run speed</tip>
        <help>Returns user fly run speed</help>
        <return type="int">
          <tip>fly run speed</tip>
          <help>fly run speed</help>
        </return>
      </method>
      <method name="GetFlyWalkSpeed">
        <tip>Returns user fly walk speed</tip>
        <help>Returns user fly walk speed</help>
        <return type="int">
          <tip>fly walk speed</tip>
          <help>fly walk speed</help>
        </return>
      </method>
      <method name="GetSP">
        <tip>Returns user SP</tip>
        <help>Returns user SP</help>
        <return type="int">
          <tip>SP</tip>
          <help>SP</help>
        </return>
      </method>
      <method name="GetShopStatus">
        <tip>Returns user shop status</tip>
        <help>Returns user shop status</help>
        <return type="int">
          <tip>shop status</tip>
          <help>shop status</help>
        </return>
      </method>
      <method name="GetPKCount">
        <tip>Returns user PK count</tip>
        <help>Returns user PK count</help>
        <return type="int">
          <tip>PK count</tip>
          <help>PK count</help>
        </return>
      </method>
      <method name="GetPvPCount">
        <tip>Returns user PvP count</tip>
        <help>Returns user PvP count</help>
        <return type="int">
          <tip>PvP count</tip>
          <help>PvP count</help>
        </return>
      </method>
      <method name="GetEvalPointsLeft">
        <tip>Returns user eval points left</tip>
        <help>Returns user eval points left</help>
        <return type="short">
          <tip>eval points left</tip>
          <help>eval points left</help>
        </return>
      </method>
      <method name="GetEvalPoints">
        <tip>Returns user eval points</tip>
        <help>Returns user eval points</help>
        <return type="short">
          <tip>eval points</tip>
          <help>eval points</help>
        </return>
      </method>
      <method name="GetInventoryLimit">
        <tip>Returns user inventory limit</tip>
        <help>Returns user inventory limit</help>
        <return type="short">
          <tip>inventory limit</tip>
          <help>inventory limit</help>
        </return>
      </method>
      <method name="GetWeaponEnchantLevel">
        <tip>Returns weapon enchant level</tip>
        <help>Returns weapon enchant level</help>
        <return type="int">
          <tip>weapon enchant level</tip>
          <help>weapon enchant level</help>
        </return>
      </method>
      <method name="GetDuelTeam">
        <tip>Returns user duel team
0 - No duel
1 - Blue Team
2 - Red Team</tip>
        <help>Returns user duel team
0 - No duel
1 - Blue Team
2 - Red Team</help>
        <return type="int">
          <tip>user duel team</tip>
          <help>user duel team</help>
        </return>
      </method>
      <method name="IsHero">
        <tip>Returns user hero status</tip>
        <help>Returns user hero status</help>
        <return type="boolean">
          <tip>True if is hero</tip>
          <help>True if is hero</help>
        </return>
      </method>
      <method name="IsNobles">
        <tip>Returns user nobles status</tip>
        <help>Returns user nobles status</help>
        <return type="boolean">
          <tip>True if is nobles</tip>
          <help>True if is nobles</help>
        </return>
      </method>
      <method name="GetNickColor">
        <tip>Returns user nick color</tip>
        <help>Returns user nick color</help>
        <return type="int">
          <tip>Colour encoded in integer</tip>
          <help>Colour encoded in integer</help>
        </return>
      </method>
      <method name="GetClanRank">
        <tip>Returns user clan rank</tip>
        <help>Returns user clan rank</help>
        <return type="L2ClanRank">
          <tip>clan rank</tip>
          <help>clan rank</help>
        </return>
      </method>
      <method name="GetHeadAccessoryId">
        <tip>Returns user head accessory id</tip>
        <help>Returns user head accessory id</help>
        <return type="int">
          <tip>head accessory id</tip>
          <help>head accessory id</help>
        </return>
      </method>
      <method name="GetMasterId2">
        <tip>Returns data from L2 User structure, I have no idea what a hell it is &lt;Not tested&gt;</tip>
        <help>Returns data from L2 User structure, I have no idea what a hell it is &lt;Not tested&gt;</help>
        <return type="int">
          <tip>Master 2 id</tip>
          <help>Master 2 id</help>
        </return>
      </method>
      <method name="GetTransformId">
        <tip>Returns user transform id</tip>
        <help>Returns user transform id</help>
        <return type="int">
          <tip>transform id</tip>
          <help>transform id</help>
        </return>
      </method>
      <method name="GetAttribute_AttackType">
        <tip>Method returns type of attribute in weapon</tip>
        <help>Method returns type of attribute in weapon
Posible values:
NONE = -1;
FIRE = 0;
WATER = 1;
WIND = 2;
EARTH = 3;
HOLY = 4;
DARK = 5;</help>
        <return type="short">
          <tip>attack attribute type</tip>
          <help>attack attribute type</help>
        </return>
      </method>
      <method name="GetAttribute_AttackValue">
        <tip>Method returns user attack attribute value</tip>
        <help>Method returns user attack attribute value</help>
        <return type="short">
          <tip>attack attribute value</tip>
          <help>attack attribute value</help>
        </return>
      </method>
      <method name="GetAttribute_DefenseFireValue">
        <tip>Method returns user defense fire attribute value</tip>
        <help>Method returns user defense fire attribute value</help>
        <return type="short">
          <tip>defense fire attribute value</tip>
          <help>defense fire attribute value</help>
        </return>
      </method>
      <method name="GetAttribute_DefenseWaterValue">
        <tip>Method returns user defense water attribute value</tip>
        <help>Method returns user defense water attribute value</help>
        <return type="short">
          <tip>defense water attribute value</tip>
          <help>defense water attribute value</help>
        </return>
      </method>
      <method name="GetAttribute_DefenseWindValue">
        <tip>Method returns user defense wind attribute value</tip>
        <help>Method returns user defense wind attribute value</help>
        <return type="short">
          <tip>defense wind attribute value</tip>
          <help>defense wind attribute value</help>
        </return>
      </method>
      <method name="GetAttribute_DefenseEarthValue">
        <tip>Method returns user defense earth attribute value</tip>
        <help>Method returns user defense earth attribute value</help>
        <return type="short">
          <tip>defense earth attribute value</tip>
          <help>defense earth attribute value</help>
        </return>
      </method>
      <method name="GetAttribute_DefenseHolyValue">
        <tip>Method returns user defense holy attribute value</tip>
        <help>Method returns user defense holy attribute value</help>
        <return type="short">
          <tip>defense holy attribute value</tip>
          <help>defense holy attribute value</help>
        </return>
      </method>
      <method name="GetAttribute_DefenseUnHolyValue">
        <tip>Method returns user defense unholy attribute value</tip>
        <help>Method returns user defense unholy attribute value</help>
        <return type="short">
          <tip>defense unholy attribute value</tip>
          <help>defense unholy attribute value</help>
        </return>
      </method>
      <method name="HasBootsSound">
        <tip>Method returns true if user has a boots sound</tip>
        <help>Method returns true if user has a boots sound</help>
        <return type="boolean">
          <tip>true if user has a boots sound</tip>
          <help>true if user has a boots sound</help>
        </return>
      </method>
      <method name="GetFlameRestrain">
        <tip>Method returns user flame restrain</tip>
        <help>Method returns user flame restrain</help>
        <return type="int">
          <tip>user flame restrain</tip>
          <help>user flame restrain</help>
        </return>
      </method>
      <method name="GetFlame">
        <tip>Method returns user flame</tip>
        <help>Method returns user flame</help>
        <return type="int">
          <tip>user flame</tip>
          <help>user flame</help>
        </return>
      </method>
      <method name="GetVitality">
        <tip>Method returns user vitality</tip>
        <help>Method returns user vitality</help>
        <return type="int">
          <tip>user vitality</tip>
          <help>user vitality</help>
        </return>
      </method>
      <method name="GetOldLocation">
        <tip>Returns old user location</tip>
        <help>Returns old user location</help>
        <return type="FVector">
          <tip>old user location</tip>
          <help>old user location</help>
        </return>
      </method>
      <method name="GetColLocation">
        <tip>Returns col user location</tip>
        <help>Returns col user location</help>
        <return type="FVector">
          <tip>col user location</tip>
          <help>col user location</help>
        </return>
      </method>
      <method name="GetVelocity">
        <tip>Returns user velocity</tip>
        <help>Returns user velocity</help>
        <return type="FVector">
          <tip>user velocity</tip>
          <help>user velocity</help>
        </return>
      </method>
      <method name="GetAcceleration">
        <tip>Returns user acceleration</tip>
        <help>Returns user acceleration</help>
        <return type="FVector">
          <tip>user acceleration</tip>
          <help>user acceleration</help>
        </return>
      </method>
      <method name="GetRotation">
        <tip>Returns user rotation</tip>
        <help>Returns user rotation</help>
        <return type="FRotator">
          <tip>user rotation</tip>
          <help>user rotation</help>
        </return>
      </method>
      <method name="GetNewNickName">
        <tip>Method returns new user nickname set by L2Tower</tip>
        <help>Method returns new user nickname set by L2Tower</help>
        <return type="string">
          <tip>user nickname set by L2Tower</tip>
          <help>user nickname set by L2Tower</help>
        </return>
        <arg name="includeTarget" type="boolean">
          <tip>include user target information</tip>
        </arg>
      </method>
      <method name="SetBlock">
        <tip>Sets block of targeting this user for 3 min</tip>
        <help>Sets block of targeting this user for 3 min</help>
        <arg name="value" type="boolean">
          <tip />
        </arg>
      </method>
      <method name="IsBlock">
        <tip>Checks if user is blocked</tip>
        <help>Checks if user is blocked</help>
        <return type="boolean">
          <tip>true if user is blocked</tip>
          <help>true if user is blocked</help>
        </return>
      </method>
      <method name="GetBuffByIdx">
        <tip>Method returns buff by index</tip>
        <help>Method returns buff by index</help>
        <return type="L2Buff">
          <tip>user buff</tip>
          <help>user buff</help>
        </return>
        <arg name="index" type="int">
          <tip>buff index</tip>
        </arg>
      </method>
      <method name="GetBuffsCount">
        <tip>Method returns count of buffs</tip>
        <help>Method returns count of buffs</help>
        <return type="int">
          <tip>count of user buffs</tip>
          <help>count of user buffs</help>
        </return>
      </method>
      <method name="GetBaseClass">
        <tip>Returns user base L2Class</tip>
        <help>Returns user base L2Class</help>
        <return type="L2Class">
          <tip>lineage 2 base class</tip>
          <help>lineage 2 base class</help>
        </return>
      </method>
      <method name="CounterGetTime">
        <tip>Returns user counter time</tip>
        <help>Returns user counter time</help>
        <return type="uint64">
          <tip>counter time</tip>
          <help>counter time</help>
        </return>
        <arg name="counterType" type="UserCounterType">
          <tip>counter type</tip>
        </arg>
        <arg name="counter" type="EUserCounter">
          <tip>counter</tip>
        </arg>
      </method>
      <method name="CounterGetValue">
        <tip>Returns user counter value</tip>
        <help>Returns user counter value</help>
        <return type="uint">
          <tip>counter value</tip>
          <help>counter value</help>
        </return>
        <arg name="counterType" type="UserCounterType">
          <tip>counter type</tip>
        </arg>
        <arg name="counter" type="EUserCounter">
          <tip>counter</tip>
        </arg>
      </method>
      <method name="CountIncrease">
        <tip>Increase user stats counter</tip>
        <help>Increase user stats counter</help>
        <arg name="counterType" type="UserCounterType">
          <tip>user counter type</tip>
        </arg>
        <arg name="counter" type="EUserCounter">
          <tip>user counter type</tip>
        </arg>
        <arg name="value" type="uint">
          <tip>value for what increase</tip>
        </arg>
      </method>
      <method name="CountDecrease">
        <tip>Decrease user stats counter</tip>
        <help>Decrease user stats counter</help>
        <arg name="counterType" type="UserCounterType">
          <tip>user counter type</tip>
        </arg>
        <arg name="counter" type="EUserCounter">
          <tip>user counter type</tip>
        </arg>
        <arg name="value" type="uint">
          <tip>value for what iecrease</tip>
        </arg>
      </method>
      <method name="GetClanName">
        <tip>Returns user clan name</tip>
        <help>Returns user clan name</help>
        <return type="string">
          <tip>Clane Name</tip>
          <help>Clane Name</help>
        </return>
      </method>
      <method name="GetAllianceName">
        <tip>Returns user alliance name</tip>
        <help>Returns user alliance name</help>
        <return type="string">
          <tip>Alliance Name</tip>
          <help>Alliance Name</help>
        </return>
      </method>
      <method name="IsClanWar2Side">
        <tip>Returns true if you have 2-side war with that user</tip>
        <help>Returns true if you have 2-side war with that user</help>
        <return type="boolean">
          <tip>True/False</tip>
          <help>True/False</help>
        </return>
      </method>
      <method name="IsClanWar1Side">
        <tip>Returns true if you have 1-side war with that user</tip>
        <help>Returns true if you have 1-side war with that user</help>
        <return type="boolean">
          <tip>True/False</tip>
          <help>True/False</help>
        </return>
      </method>
      <method name="IsSiegeAttacker">
        <tip>Returns true if user is a enemy on siege</tip>
        <help>Returns true if user is a enemy on siege</help>
        <return type="boolean">
          <tip>True/False</tip>
          <help>True/False</help>
        </return>
      </method>
      <method name="IsSiegeDefender">
        <tip>Returns true if user is a friend on siege</tip>
        <help>Returns true if user is a friend on siege</help>
        <return type="boolean">
          <tip>True/False</tip>
          <help>True/False</help>
        </return>
      </method>
      <method name="IsInSiege">
        <tip>Returns true if user is registred to siege or is in siege area</tip>
        <help>Returns true if user is registred to siege or is in siege area</help>
        <return type="boolean">
          <tip>True/False</tip>
          <help>True/False</help>
        </return>
      </method>
      <method name="IsInTerritoryWar">
        <tip>Returns true if user is registred to territory war</tip>
        <help>Returns true if user is registred to territory war</help>
        <return type="boolean">
          <tip>True/False</tip>
          <help>True/False</help>
        </return>
      </method>
      <method name="IsAttackerStatus">
        <tip>Returns true if user is user is attacker</tip>
        <help>Returns true if user is user is attacker</help>
        <return type="boolean">
          <tip>True/False</tip>
          <help>True/False</help>
        </return>
      </method>
      <method name="GetIntFromOffset">
        <tip>Method allow to read int from Lineage 2 User struct</tip>
        <help>Method allow to read int from Lineage 2 User struct</help>
        <return type="int">
          <tip>int value</tip>
          <help>int value</help>
        </return>
        <arg name="offset" type="int">
          <tip>offset (0-based) of memory</tip>
        </arg>
        <arg name="size of int (1,2,4)" type="ushort">
          <tip />
        </arg>
      </method>
      <method name="SetIntOnOffset">
        <tip>Method allow to change int in Lineage 2 User struct</tip>
        <help>Method allow to change int in Lineage 2 User struct</help>
        <arg name="offset" type="int">
          <tip>offset (0-based) of memory</tip>
        </arg>
        <arg name="value" type="int">
          <tip>new value to set</tip>
        </arg>
        <arg name="size of int (1,2,4)" type="ushort">
          <tip />
        </arg>
      </method>
      <method name="GetFloatFromOffset">
        <tip>Method allow to read float from Lineage 2 User struct</tip>
        <help>Method allow to read float from Lineage 2 User struct</help>
        <return type="float">
          <tip>float value</tip>
          <help>float value</help>
        </return>
        <arg name="offset" type="int">
          <tip>offset (0-based) of memory</tip>
        </arg>
      </method>
      <method name="SetFloatOnOffset">
        <tip>Method allow to change float in Lineage 2 User struct</tip>
        <help>Method allow to change float in Lineage 2 User struct</help>
        <arg name="offset" type="int">
          <tip>offset (0-based) of memory</tip>
        </arg>
        <arg name="value" type="float">
          <tip>new value to set</tip>
        </arg>
      </method>
      <method name="GetDoubleFromOffset">
        <tip>Method allow to read double from Lineage 2 User struct</tip>
        <help>Method allow to read double from Lineage 2 User struct</help>
        <return type="float">
          <tip>double value</tip>
          <help>double value</help>
        </return>
        <arg name="offset" type="int">
          <tip>offset (0-based) of memory</tip>
        </arg>
      </method>
      <method name="SetDoubleOnOffset">
        <tip>Method allow to change double in Lineage 2 User struct</tip>
        <help>Method allow to change double in Lineage 2 User struct</help>
        <arg name="offset" type="int">
          <tip>offset (0-based) of memory</tip>
        </arg>
        <arg name="value" type="float">
          <tip>new value to set</tip>
        </arg>
      </method>
      <method name="DumpToFile">
        <tip>it will dump user struct to C:\randomname.dump</tip>
        <help>it will dump user struct to C:\randomname.dump</help>
        <sample>GetMe():DumpToFile();</sample>
      </method>
      <method name="GetIntFromOffsetAPawn">
        <tip>Method allow to read int from Lineage 2 User-Pawn struct</tip>
        <help>Method allow to read int from Lineage 2 User-Pawn struct</help>
        <return type="int">
          <tip>int value</tip>
          <help>int value</help>
        </return>
        <arg name="offset" type="int">
          <tip>offset (0-based) of memory</tip>
        </arg>
        <arg name="size of int (1,2,4)" type="ushort">
          <tip />
        </arg>
      </method>
      <method name="SetIntOnOffsetAPawn">
        <tip>Method allow to change int in Lineage 2 User-Pawn struct</tip>
        <help>Method allow to change int in Lineage 2 User-Pawn struct</help>
        <arg name="offset" type="int">
          <tip>offset (0-based) of memory</tip>
        </arg>
        <arg name="value" type="int">
          <tip>new value to set</tip>
        </arg>
        <arg name="size of int (1,2,4)" type="ushort">
          <tip />
        </arg>
      </method>
      <method name="SetNewNickName">
        <tip>Sets custom user title</tip>
        <help>Sets custom user title</help>
        <arg name="title" type="string">
          <tip />
        </arg>
      </method>
    </class>
    <class name="Item" creatable="false">
      <tip>Inventory item class</tip>
      <help>Inventory item class</help>
      <property type="int" name="objectId" readonly="true">
        <tip>objectId property</tip>
        <help>objectId property</help>
      </property>
      <property type="int" name="displayId" readonly="true">
        <tip>displayId property</tip>
        <help>displayId property</help>
      </property>
      <property type="string" name="Name" readonly="true">
        <tip>Name property</tip>
        <help>Name property</help>
      </property>
      <property type="string" name="AdditionalName" readonly="true">
        <tip>AdditionalName property</tip>
        <help>AdditionalName property</help>
      </property>
      <property type="string" name="IconName" readonly="true">
        <tip>IconName property</tip>
        <help>IconName property</help>
      </property>
      <property type="string" name="IconNameEx1" readonly="true">
        <tip>IconNameEx1 property</tip>
        <help>IconNameEx1 property</help>
      </property>
      <property type="string" name="IconNameEx2" readonly="true">
        <tip>IconNameEx2 property</tip>
        <help>IconNameEx2 property</help>
      </property>
      <property type="string" name="IconNameEx3" readonly="true">
        <tip>IconNameEx3 property</tip>
        <help>IconNameEx3 property</help>
      </property>
      <property type="string" name="IconNameEx4" readonly="true">
        <tip>IconNameEx4 property</tip>
        <help>IconNameEx4 property</help>
      </property>
      <property type="string" name="ForeTexture" readonly="true">
        <tip>ForeTexture property</tip>
        <help>ForeTexture property</help>
      </property>
      <property type="string" name="Description" readonly="true">
        <tip>Description property</tip>
        <help>Description property</help>
      </property>
      <property type="string" name="DragSrcName" readonly="true">
        <tip>DragSrcName property</tip>
        <help>DragSrcName property</help>
      </property>
      <property type="string" name="IconPanel" readonly="true">
        <tip>IconPanel property</tip>
        <help>IconPanel property</help>
      </property>
      <property type="int" name="DragSrcReserved" readonly="true">
        <tip>DragSrcReserved property</tip>
        <help>DragSrcReserved property</help>
      </property>
      <property type="string" name="MacroCommand" readonly="true">
        <tip>MacroCommand property</tip>
        <help>MacroCommand property</help>
      </property>
      <property type="int" name="ItemType" readonly="true">
        <tip>ItemType property</tip>
        <help>ItemType property</help>
      </property>
      <property type="int" name="ItemSubType" readonly="true">
        <tip>ItemSubType property</tip>
        <help>ItemSubType property</help>
      </property>
      <property type="int64" name="ItemNum" readonly="true">
        <tip>ItemNum property</tip>
        <help>ItemNum property</help>
      </property>
      <property type="int64" name="Price" readonly="true">
        <tip>Price property</tip>
        <help>Price property</help>
      </property>
      <property type="int" name="Level" readonly="true">
        <tip>Level property</tip>
        <help>Level property</help>
      </property>
      <property type="int64" name="SlotBitType" readonly="true">
        <tip>SlotBitType property</tip>
        <help>SlotBitType property</help>
      </property>
      <property type="int" name="Weight" readonly="true">
        <tip>Weight property</tip>
        <help>Weight property</help>
      </property>
      <property type="int" name="MaterialType" readonly="true">
        <tip>MaterialType property</tip>
        <help>MaterialType property</help>
      </property>
      <property type="int" name="WeaponType" readonly="true">
        <tip>WeaponType property</tip>
        <help>WeaponType property</help>
      </property>
      <property type="float" name="PhysicalDefense" readonly="true">
        <tip>PhysicalDefense property</tip>
        <help>PhysicalDefense property</help>
      </property>
      <property type="float" name="MagicalDefense" readonly="true">
        <tip>MagicalDefense property</tip>
        <help>MagicalDefense property</help>
      </property>
      <property type="float" name="PhysicalDamage" readonly="true">
        <tip>PhysicalDamage property</tip>
        <help>PhysicalDamage property</help>
      </property>
      <property type="float" name="MagicalDamage" readonly="true">
        <tip>MagicalDamage property</tip>
        <help>MagicalDamage property</help>
      </property>
      <property type="float" name="PhysicalSpeedModify" readonly="true">
        <tip>PhysicalSpeedModify property</tip>
        <help>PhysicalSpeedModify property</help>
      </property>
      <property type="float" name="CastingSpeedModify" readonly="true">
        <tip>CastingSpeedModify property</tip>
        <help>CastingSpeedModify property</help>
      </property>
      <property type="float" name="PhysicalHitRateModify" readonly="true">
        <tip>PhysicalHitRateModify property</tip>
        <help>PhysicalHitRateModify property</help>
      </property>
      <property type="float" name="MagicalHitRateModify" readonly="true">
        <tip>MagicalHitRateModify property</tip>
        <help>MagicalHitRateModify property</help>
      </property>
      <property type="float" name="PhysicalCriticalRateModify" readonly="true">
        <tip>PhysicalCriticalRateModify property</tip>
        <help>PhysicalCriticalRateModify property</help>
      </property>
      <property type="float" name="MagicalCriticalRateModify" readonly="true">
        <tip>MagicalCriticalRateModify property</tip>
        <help>MagicalCriticalRateModify property</help>
      </property>
      <property type="float" name="MoveSpeedModify" readonly="true">
        <tip>MoveSpeedModify property</tip>
        <help>MoveSpeedModify property</help>
      </property>
      <property type="float" name="ShieldDefense" readonly="true">
        <tip>ShieldDefense property</tip>
        <help>ShieldDefense property</help>
      </property>
      <property type="float" name="ShieldDefenseRateModify" readonly="true">
        <tip>ShieldDefenseRateModify property</tip>
        <help>ShieldDefenseRateModify property</help>
      </property>
      <property type="float" name="PhysicalAvoidModify" readonly="true">
        <tip>PhysicalAvoidModify property</tip>
        <help>PhysicalAvoidModify property</help>
      </property>
      <property type="float" name="MagicalAvoidModify" readonly="true">
        <tip>MagicalAvoidModify property</tip>
        <help>MagicalAvoidModify property</help>
      </property>
      <property type="int" name="EnchantBonus" readonly="true">
        <tip>EnchantBonus property</tip>
        <help>EnchantBonus property</help>
      </property>
      <property type="int" name="Durability" readonly="true">
        <tip>Durability property</tip>
        <help>Durability property</help>
      </property>
      <property type="int" name="CrystalType" readonly="true">
        <tip>CrystalType property</tip>
        <help>CrystalType property</help>
      </property>
      <property type="int" name="RandomDamage" readonly="true">
        <tip>RandomDamage property</tip>
        <help>RandomDamage property</help>
      </property>
      <property type="int" name="MpConsume" readonly="true">
        <tip>MpConsume property</tip>
        <help>MpConsume property</help>
      </property>
      <property type="int" name="ArmorType" readonly="true">
        <tip>ArmorType property</tip>
        <help>ArmorType property</help>
      </property>
      <property type="int" name="Damaged" readonly="true">
        <tip>Damaged property</tip>
        <help>Damaged property</help>
      </property>
      <property type="int" name="Enchanted" readonly="true">
        <tip>Enchanted property</tip>
        <help>Enchanted property</help>
      </property>
      <property type="int" name="MpBonus" readonly="true">
        <tip>MpBonus property</tip>
        <help>MpBonus property</help>
      </property>
      <property type="int" name="SoulshotCount" readonly="true">
        <tip>SoulshotCount property</tip>
        <help>SoulshotCount property</help>
      </property>
      <property type="int" name="SpiritshotCount" readonly="true">
        <tip>SpiritshotCount property</tip>
        <help>SpiritshotCount property</help>
      </property>
      <property type="int" name="PopMsgNum" readonly="true">
        <tip>PopMsgNum property</tip>
        <help>PopMsgNum property</help>
      </property>
      <property type="int" name="BodyPart" readonly="true">
        <tip>BodyPart property</tip>
        <help>BodyPart property</help>
      </property>
      <property type="int" name="RefineryOp1" readonly="true">
        <tip>RefineryOp1 property</tip>
        <help>RefineryOp1 property</help>
      </property>
      <property type="int" name="RefineryOp2" readonly="true">
        <tip>RefineryOp2 property</tip>
        <help>RefineryOp2 property</help>
      </property>
      <property type="int" name="CurrentDurability" readonly="true">
        <tip>CurrentDurability property</tip>
        <help>CurrentDurability property</help>
      </property>
      <property type="int" name="CurrentPeriod" readonly="true">
        <tip>CurrentPeriod property</tip>
        <help>CurrentPeriod property</help>
      </property>
      <property type="int" name="EnchantOption1" readonly="true">
        <tip>EnchantOption1 property</tip>
        <help>EnchantOption1 property</help>
      </property>
      <property type="int" name="EnchantOption2" readonly="true">
        <tip>EnchantOption2 property</tip>
        <help>EnchantOption2 property</help>
      </property>
      <property type="int" name="EnchantOption3" readonly="true">
        <tip>EnchantOption3 property</tip>
        <help>EnchantOption3 property</help>
      </property>
      <property type="int" name="Reserved" readonly="true">
        <tip>Reserved property</tip>
        <help>Reserved property</help>
      </property>
      <property type="int64" name="Reserved64" readonly="true">
        <tip>Reserved64 property</tip>
        <help>Reserved64 property</help>
      </property>
      <property type="int64" name="DefaultPrice" readonly="true">
        <tip>DefaultPrice property</tip>
        <help>DefaultPrice property</help>
      </property>
      <property type="int" name="ConsumeType" readonly="true">
        <tip>ConsumeType property</tip>
        <help>ConsumeType property</help>
      </property>
      <property type="int" name="Blessed" readonly="true">
        <tip>Blessed property</tip>
        <help>Blessed property</help>
      </property>
      <property type="int64" name="AllItemCount" readonly="true">
        <tip>AllItemCount property</tip>
        <help>AllItemCount property</help>
      </property>
      <property type="int" name="IconIndex" readonly="true">
        <tip>IconIndex property</tip>
        <help>IconIndex property</help>
      </property>
      <property type="boolean" name="IsEquipped" readonly="true">
        <tip>IsEquipped property</tip>
        <help>IsEquipped property</help>
      </property>
      <property type="boolean" name="IsRecipe" readonly="true">
        <tip>IsRecipe property</tip>
        <help>IsRecipe property</help>
      </property>
      <property type="boolean" name="IsArrow" readonly="true">
        <tip>IsArrow property</tip>
        <help>IsArrow property</help>
      </property>
      <property type="boolean" name="IsShowCount" readonly="true">
        <tip>IsShowCount property</tip>
        <help>IsShowCount property</help>
      </property>
      <property type="int" name="IsDisabled" readonly="true">
        <tip>IsDisabled property</tip>
        <help>IsDisabled property</help>
      </property>
      <property type="int" name="IsSkillDisabled" readonly="true">
        <tip>IsSkillDisabled property</tip>
        <help>IsSkillDisabled property</help>
      </property>
      <property type="boolean" name="IsLock" readonly="true">
        <tip>IsLock property</tip>
        <help>IsLock property</help>
      </property>
      <property type="int" name="AttackAttributeType" readonly="true">
        <tip>AttackAttributeType property</tip>
        <help>AttackAttributeType property</help>
      </property>
      <property type="int" name="AttackAttributeValue" readonly="true">
        <tip>AttackAttributeValue property</tip>
        <help>AttackAttributeValue property</help>
      </property>
      <property type="int" name="DefenseAttributeValueFire" readonly="true">
        <tip>DefenseAttributeValueFire property</tip>
        <help>DefenseAttributeValueFire property</help>
      </property>
      <property type="int" name="DefenseAttributeValueWater" readonly="true">
        <tip>DefenseAttributeValueWater property</tip>
        <help>DefenseAttributeValueWater property</help>
      </property>
      <property type="int" name="DefenseAttributeValueWind" readonly="true">
        <tip>DefenseAttributeValueWind property</tip>
        <help>DefenseAttributeValueWind property</help>
      </property>
      <property type="int" name="DefenseAttributeValueEarth" readonly="true">
        <tip>DefenseAttributeValueEarth property</tip>
        <help>DefenseAttributeValueEarth property</help>
      </property>
      <property type="int" name="DefenseAttributeValueHoly" readonly="true">
        <tip>DefenseAttributeValueHoly property</tip>
        <help>DefenseAttributeValueHoly property</help>
      </property>
      <property type="int" name="DefenseAttributeValueUnholy" readonly="true">
        <tip>DefenseAttributeValueUnholy property</tip>
        <help>DefenseAttributeValueUnholy property</help>
      </property>
      <property type="int" name="RelatedQuestCnt" readonly="true">
        <tip>RelatedQuestCnt property</tip>
        <help>RelatedQuestCnt property</help>
      </property>
      <property type="int" name="ReuseDelayShareGroupID" readonly="true">
        <tip>ReuseDelayShareGroupID property</tip>
        <help>ReuseDelayShareGroupID property</help>
      </property>
      <property type="int" name="Attribution" readonly="true">
        <tip>Attribution property</tip>
        <help>Attribution property</help>
      </property>
      <property type="int" name="PropertyParams" readonly="true">
        <tip>PropertyParams property</tip>
        <help>PropertyParams property</help>
      </property>
      <property type="boolean" name="IsToggleSkill" readonly="true">
        <tip>IsToggleSkill property</tip>
        <help>IsToggleSkill property</help>
      </property>
      <property type="boolean" name="IsToggle" readonly="true">
        <tip>IsToggle property</tip>
        <help>IsToggle property</help>
      </property>
      <property type="int" name="IsBRPremium" readonly="true">
        <tip>IsBRPremium property</tip>
        <help>IsBRPremium property</help>
      </property>
      <property type="int" name="BR_CurrentEnergy" readonly="true">
        <tip>BR_CurrentEnergy property</tip>
        <help>BR_CurrentEnergy property</help>
      </property>
      <property type="int" name="BR_MaxEnergy" readonly="true">
        <tip>BR_MaxEnergy property</tip>
        <help>BR_MaxEnergy property</help>
      </property>
      <property type="int" name="LookChangeIconID" readonly="true">
        <tip>LookChangeIconID property</tip>
        <help>LookChangeIconID property</help>
      </property>
      <property type="int" name="LookChangeItemID" readonly="true">
        <tip>LookChangeItemID property</tip>
        <help>LookChangeItemID property</help>
      </property>
      <property type="string" name="LookChangeItemName" readonly="true">
        <tip>LookChangeItemName property</tip>
        <help>LookChangeItemName property</help>
      </property>
      <property type="string" name="LookChangeIconPanel" readonly="true">
        <tip>LookChangeIconPanel property</tip>
        <help>LookChangeIconPanel property</help>
      </property>
      <property type="int" name="ORDER" readonly="true">
        <tip>ORDER property</tip>
        <help>ORDER property</help>
      </property>
      <property type="string" name="tooltipTexutre" readonly="true">
        <tip>tooltipTexutre property</tip>
        <help>tooltipTexutre property</help>
      </property>
      <method name="GetRelatedQuestID">
        <tip>Returns related quest id, or 0 if not set</tip>
        <help>Returns related quest id, or 0 if not set</help>
        <return type="int">
          <tip>quest id</tip>
          <help>quest id</help>
        </return>
        <arg name="index" type="uint">
          <tip>quest id index, max is 10</tip>
        </arg>
      </method>
      <method name="IsQuestItem">
        <tip>Method checks if item is a quest item</tip>
        <help>Method checks if item is a quest item</help>
        <return type="boolean">
          <tip>true if quest item</tip>
          <help>true if quest item</help>
        </return>
      </method>
    </class>
    <class name="Skill" creatable="false">
      <tip>Class contain information about skill</tip>
      <help>Class contain information about skill</help>
      <property type="int" name="skillId" readonly="true">
        <tip>skillId property</tip>
        <help>skillId property</help>
      </property>
      <property type="short" name="skillLvl" readonly="true">
        <tip>skillLvl property</tip>
        <help>skillLvl property</help>
      </property>
      <property type="boolean" name="isPassive" readonly="true">
        <tip>isPassive property</tip>
        <help>isPassive property</help>
      </property>
      <property type="string" name="name" readonly="true">
        <tip>name property</tip>
        <help>name property</help>
      </property>
      <property type="string" name="description" readonly="true">
        <tip>description property</tip>
        <help>description property</help>
      </property>
      <property type="int" name="operTyp" readonly="true">
        <tip>operTyp property</tip>
        <help>operTyp property</help>
      </property>
      <property type="int" name="mpConsume" readonly="true">
        <tip>mpConsume property</tip>
        <help>mpConsume property</help>
      </property>
      <property type="int" name="hpConsume" readonly="true">
        <tip>hpConsume property</tip>
        <help>hpConsume property</help>
      </property>
      <property type="int" name="castRange" readonly="true">
        <tip>castRange property</tip>
        <help>castRange property</help>
      </property>
      <property type="int" name="castStyle" readonly="true">
        <tip>castStyle property</tip>
        <help>castStyle property</help>
      </property>
      <property type="float" name="hitTime" readonly="true">
        <tip>hitTime property</tip>
        <help>hitTime property</help>
      </property>
      <property type="boolean" name="isMagic" readonly="true">
        <tip>isMagic property</tip>
        <help>isMagic property</help>
      </property>
      <method name="IsSkillAvailable">
        <tip>Method checks if we have skill also checks reuse</tip>
        <help>Method checks if we have skill also checks reuse</help>
        <return type="boolean">
          <tip>true or false</tip>
          <help>true or false</help>
        </return>
      </method>
      <method name="CanBeUsed">
        <tip>Method checks if (skill is valid, Self struct is avaible, Skill can be casted, character isn't dead and blocked, checks hp and mp consume) also it calls IsSkillAvailable.</tip>
        <help>Method checks if (skill is valid, Self struct is avaible, Skill can be casted, character isn't dead and blocked, checks hp and mp consume) also it calls IsSkillAvailable.</help>
        <return type="boolean">
          <tip>true or false</tip>
          <help>true or false</help>
        </return>
      </method>
      <method name="GetReuse">
        <tip>Method return reuse of skill</tip>
        <help>Method return reuse of skill</help>
        <return type="uint64">
          <tip>reuse timer</tip>
          <help>reuse timer</help>
        </return>
      </method>
      <method name="IsSongOrDance">
        <tip>Method checks if skill is song or dance (only second and third profesion)</tip>
        <help>Method checks if skill is song or dance (only second and third profesion)</help>
        <return type="boolean">
          <tip>true or false</tip>
          <help>true or false</help>
        </return>
      </method>
    </class>
    <class name="ItemList" creatable="false">
      <tip>Class contain snapshot of list of items in inventory</tip>
      <help>Class contain snapshot of list of items in inventory</help>
      <property type="int" name="maxCount" readonly="true">
        <tip>Maximum count of inventory items</tip>
        <help>Maximum count of inventory items</help>
      </property>
      <property type="int" name="count" readonly="true">
        <tip>Count of items in inventory</tip>
        <help>Count of items in inventory</help>
      </property>
      <property type="iterator&lt;Item&gt;" name="list" readonly="true">
        <tip>List of all items in inventory</tip>
        <help>List of all items in inventory</help>
      </property>
      <method name="FindById">
        <tip>Finds a item by objectId in inventory snapshot</tip>
        <help>Finds a item by objectId in inventory snapshot</help>
        <return type="Item">
          <tip>nil if not found</tip>
          <help>nil if not found</help>
        </return>
        <arg name="objectId" type="int">
          <tip>item objectId</tip>
        </arg>
      </method>
      <method name="FindByDisplayId">
        <tip>Finds a item by displayId in inventory snapshot</tip>
        <help>Finds a item by displayId in inventory snapshot</help>
        <return type="Item">
          <tip>nil if not found</tip>
          <help>nil if not found</help>
        </return>
        <arg name="displayId" type="int">
          <tip>item displayId</tip>
        </arg>
      </method>
    </class>
    <class name="SkillList" creatable="false">
      <tip>Class contain snapshot of list of skills</tip>
      <help>Class contain snapshot of list of skills</help>
      <property type="int" name="count" readonly="true">
        <tip>Count of skills</tip>
        <help>Count of skills</help>
      </property>
      <property type="iterator&lt;Skill&gt;" name="list" readonly="true">
        <tip>List of all skills</tip>
        <help>List of all skills</help>
      </property>
      <method name="FindById">
        <tip>Finds a skill by id</tip>
        <help>Finds a skill by id</help>
        <return type="Skill">
          <tip>nil if not found</tip>
          <help>nil if not found</help>
        </return>
        <arg name="skillId" type="int">
          <tip>skillId of skill to be found</tip>
        </arg>
      </method>
    </class>
    <class name="UserList" creatable="false">
      <tip>List of users class</tip>
      <help>List of users class</help>
      <property type="iterator&lt;User&gt;" name="list" readonly="true">
        <tip>Array of users property</tip>
        <help>Array of users property</help>
      </property>
      <method name="GetByName">
        <tip>Finds a user by his name</tip>
        <help>Finds a user by his name</help>
        <return type="User">
          <tip>first found user or nil if not found</tip>
          <help>first found user or nil if not found</help>
        </return>
        <arg name="name" type="string">
          <tip>user name</tip>
        </arg>
      </method>
      <method name="GetByTitle">
        <tip>Finds a user by his title</tip>
        <help>Finds a user by his title</help>
        <return type="User">
          <tip>first found user or nil if not found</tip>
          <help>first found user or nil if not found</help>
        </return>
        <arg name="title" type="string">
          <tip>user title</tip>
        </arg>
        <arg name="arg2" type="User">
          <tip />
        </arg>
      </method>
      <method name="GetCount">
        <tip>Calculate count of users on list</tip>
        <help>Calculate count of users on list</help>
        <return type="int">
          <tip>Count of users</tip>
          <help>Count of users</help>
        </return>
      </method>
    </class>
    <class name="HtmlLink" creatable="false">
      <tip>Parsed html link information</tip>
      <help>Parsed html link information</help>
      <property type="boolean" name="isButton" readonly="true">
        <tip>isButton property</tip>
        <help>isButton property</help>
      </property>
      <property type="boolean" name="isTeleport" readonly="true">
        <tip>isTeleport property</tip>
        <help>isTeleport property</help>
      </property>
      <property type="string" name="text" readonly="true">
        <tip>text property</tip>
        <help>text property</help>
      </property>
      <property type="string" name="link" readonly="true">
        <tip>link property</tip>
        <help>link property</help>
      </property>
    </class>
    <class name="HtmlDialog">
      <tip>Parsed html dialog information</tip>
      <help>Parsed html dialog information</help>
      <property type="iterator&lt;HtmlLink&gt;" name="links" readonly="true">
        <tip>Property allow to access to array of links</tip>
        <help>Property allow to access to array of links</help>
      </property>
      <method name="GetHtml">
        <tip>Method returns html code</tip>
        <help>Method returns html code</help>
        <return type="string">
          <tip>html code</tip>
          <help>html code</help>
        </return>
      </method>
      <method name="GetLinkForText">
        <tip>Method finds link url for a text</tip>
        <help>Method finds link url for a text</help>
        <return type="string">
          <tip>link url</tip>
          <help>link url</help>
        </return>
        <arg name="text" type="string">
          <tip>link text</tip>
        </arg>
      </method>
      <method name="GetTextForLink">
        <tip>Method finds text for a link url</tip>
        <help>Method finds text for a link url</help>
        <return type="string">
          <tip>text</tip>
          <help>text</help>
        </return>
        <arg name="link" type="string">
          <tip>link url</tip>
        </arg>
      </method>
      <method name="HaveLink">
        <tip>Method checks if page contain link url</tip>
        <help>Method checks if page contain link url</help>
        <return type="boolean">
          <tip>true if page contain link</tip>
          <help>true if page contain link</help>
        </return>
        <arg name="link" type="string">
          <tip>link url</tip>
        </arg>
      </method>
      <constructor>
        <tip>Constructor that create object and sets html code of last open dialog</tip>
        <help>Constructor that create object and sets html code of last open dialog</help>
      </constructor>
    </class>
    <class name="Manor" creatable="false">
      <tip>Manor control class</tip>
      <help>Manor control class</help>
      <method name="AddSeed">
        <tip>Method add seed to list of items to buy.</tip>
        <help>Method add seed to list of items to buy.</help>
        <arg name="count" type="int">
          <tip>count of seeds</tip>
        </arg>
        <arg name="itemId" type="int">
          <tip>seed item id</tip>
        </arg>
      </method>
      <method name="CanBuy">
        <tip>Returns true if buy operation can be performed now</tip>
        <help>Returns true if buy operation can be performed now</help>
        <return type="boolean">
          <tip>true/false</tip>
          <help>true/false</help>
        </return>
      </method>
      <method name="BuySeeds">
        <tip>Method buy seeds if count &gt; 0</tip>
        <help>Method buy seeds if count &gt; 0</help>
        <sample>GetManorManager():SetManor(ManorID);
GetManorManager():SetBuyAll();
TargetNpc("Manor Manager", 35187);
while GetManorManager():CanBuy()==false do
Talk();
Click("manor_menu_select?ask=1&amp;state=-1&amp;time=0", "Purchase the Seed.");
Sleep(600);--best sleep time
end;
Sleep(300);
GetManorManager():BuySeeds();</sample>
        <return type="boolean">
          <tip>true/false</tip>
          <help>true/false</help>
        </return>
      </method>
      <method name="SetBuyAll">
        <tip>Method sets bot in state, that when new window with buy seeds shows up, bot will buy described seeds.</tip>
        <help>Method sets bot in state, that when new window with buy seeds shows up, bot will buy described seeds.</help>
      </method>
      <method name="SetManor">
        <tip>Method sets manor id.</tip>
        <help> Method sets manor id.
Manor IDs:
1 - gludio
2 - dion
3 - giran
4 - oren
5 - aden
6 - innadril
7 - goddard
8 - rune
9 - schuttgard</help>
        <arg name="arg1" type="int">
          <tip />
        </arg>
      </method>
      <method name="AddCrop">
        <tip>Method add crop to list of tiems to sell.</tip>
        <help>Method add crop to list of tiems to sell.</help>
        <arg name="id" type="int">
          <tip>crop id</tip>
        </arg>
        <arg name="manorId" type="int">
          <tip>manor id</tip>
        </arg>
        <arg name="count" type="int">
          <tip>count of crop</tip>
        </arg>
      </method>
      <method name="CanSell">
        <tip>Returns true if sell operation can be performed now</tip>
        <help>Returns true if sell operation can be performed now</help>
        <return type="boolean">
          <tip>true/false</tip>
          <help>true/false</help>
        </return>
      </method>
      <method name="ClearSell">
        <tip>Method removes all crops from list.</tip>
        <help>Method removes all crops from list.</help>
      </method>
      <method name="SellCrops">
        <tip>Returns true if sell operation succeed</tip>
        <help>Returns true if sell operation succeed</help>
        <return type="boolean">
          <tip>true/false</tip>
          <help>true/false</help>
        </return>
      </method>
    </class>
    <class name="Augment" creatable="false">
      <tip>Collection of methods for augmenting</tip>
      <help>Collection of methods for augmenting</help>
      <method name="setLifeStoneId">
        <tip>Sets the Lifestone to be used in augmenting</tip>
        <help>Sets the Lifestone to be used in augmenting</help>
        <arg name="id" type="int">
          <tip>Object Id of the Lifestone</tip>
        </arg>
      </method>
      <method name="getLifeStoneId">
        <tip>Gets the object id of the Lifestone to be used in augmenting</tip>
        <help>Gets the object id of the Lifestone to be used in augmenting</help>
        <return type="int">
          <tip>Integer, Object Id of the Lifestone</tip>
          <help>Integer, Object Id of the Lifestone</help>
        </return>
      </method>
      <method name="setItemId">
        <tip>Sets the item to be augmented</tip>
        <help>Sets the item to be augmented</help>
        <arg name="id" type="int">
          <tip>Object Id of the item to be augmented</tip>
        </arg>
      </method>
      <method name="getItemId">
        <tip>Gets the object id of the item to be augmented</tip>
        <help>Gets the object id of the item to be augmented</help>
        <return type="int">
          <tip>Integer, Object Id of the item to be augmented</tip>
          <help>Integer, Object Id of the item to be augmented</help>
        </return>
      </method>
      <method name="setGemstoneId">
        <tip>Sets the Gemstones to be used in augmenting</tip>
        <help>Sets the Gemstones to be used in augmenting</help>
        <arg name="id" type="int">
          <tip>Object Id of the Gemstones</tip>
        </arg>
        <arg name="arg2" type="int">
          <tip />
        </arg>
      </method>
      <method name="getGemstoneId">
        <tip>Gets the object id of the Gemstones to be used in augmenting</tip>
        <help>Gets the object id of the Gemstones to be used in augmenting</help>
        <return type="int">
          <tip>Integer, Object Id of the Gemstones</tip>
          <help>Integer, Object Id of the Gemstones</help>
        </return>
      </method>
      <method name="getAugmentResult">
        <tip>Gets the result of the augmentation</tip>
        <help>Gets the result of the augmentation</help>
        <return type="EAugmentResult">
          <tip>AugmentResult, Result of the augmentation</tip>
          <help>AugmentResult, Result of the augmentation</help>
        </return>
      </method>
      <method name="getAugmentCancelResult">
        <tip>Gets the result of the augmentation cancellation/removal</tip>
        <help>Gets the result of the augmentation cancellation/removal</help>
        <return type="EAugmentResult">
          <tip>AugmentCancelResult, Result of the cancellation</tip>
          <help>AugmentCancelResult, Result of the cancellation</help>
        </return>
      </method>
      <method name="Augment">
        <tip>Attempt the augmentation</tip>
        <help>Attempt the augmentation</help>
      </method>
      <method name="AugmentCancel">
        <tip>Attempt the augmentation cancellation/removal</tip>
        <help>Attempt the augmentation cancellation/removal</help>
      </method>
      <method name="KeepAugment">
        <tip>Checks the augment against the users selection in //xcfg -&gt; Augmentation</tip>
        <help>Checks the augment against the users selection in //xcfg -&gt; Augmentation</help>
        <return type="boolean">
          <tip>True/False, Returns true if the augment should be kept</tip>
          <help>True/False, Returns true if the augment should be kept</help>
        </return>
        <arg name="id" type="int">
          <tip>Integer, Augmentation Id</tip>
        </arg>
      </method>
    </class>
    <class name="Enchant" creatable="false">
      <tip>Collection of methods for enchanting</tip>
      <help>Collection of methods for enchanting</help>
      <method name="setEnchantId">
        <tip>Sets the Enchant Scroll to be used in the enchanting</tip>
        <help>Sets the Enchant Scroll to be used in the enchanting</help>
        <arg name="id" type="int">
          <tip>Object Id of the Enchant Scroll</tip>
        </arg>
      </method>
      <method name="getEnchantId">
        <tip>Gets the object id of the Enchant Scroll to be used in the enchanting</tip>
        <help>Gets the object id of the Enchant Scroll to be used in the enchanting</help>
        <return type="int">
          <tip>Integer, Object Id of the Enchant Scroll</tip>
          <help>Integer, Object Id of the Enchant Scroll</help>
        </return>
      </method>
      <method name="setItemId">
        <tip>Sets the item to be enchanted</tip>
        <help>Sets the item to be enchanted</help>
        <arg name="id" type="int">
          <tip>Object Id of the item to be enchanted</tip>
        </arg>
      </method>
      <method name="getItemId">
        <tip>Gets the object id of the item to be enchanted</tip>
        <help>Gets the object id of the item to be enchanted</help>
        <return type="int">
          <tip>Integer, Object Id of the item to be enchanted</tip>
          <help>Integer, Object Id of the item to be enchanted</help>
        </return>
      </method>
      <method name="setAuxiliaryStoneId">
        <tip>Sets the auxiliary stone to be used in the enchanting</tip>
        <help>Sets the auxiliary stone to be used in the enchanting</help>
        <arg name="id" type="int">
          <tip>Object Id of the auxiliary stone to be used in the enchanting</tip>
        </arg>
      </method>
      <method name="getAuxiliaryStoneId">
        <tip>Gets the object id of the auxiliary stone to be used in the enchanting</tip>
        <help>Gets the object id of the auxiliary stone to be used in the enchanting</help>
        <return type="int">
          <tip>Integer, Object Id of the auxiliary stone to be used in the enchanting</tip>
          <help>Integer, Object Id of the auxiliary stone to be used in the enchanting</help>
        </return>
      </method>
      <method name="getLastResult">
        <tip>Gets the result of the last enchantment attempt</tip>
        <help>Gets the result of the last enchantment attempt</help>
        <return type="EEnchantResult">
          <tip>EnchantResult, Result of the last enchantment attempt</tip>
          <help>EnchantResult, Result of the last enchantment attempt</help>
        </return>
      </method>
      <method name="Enchant">
        <tip>Attempt the enchantment</tip>
        <help>Attempt the enchantment</help>
        <return type="int">
          <tip />
        </return>
      </method>
      <method name="setDelay">
        <tip>Sets the delay between opening the Enchant Scroll and clicking 'Enchant'</tip>
        <help>Sets the delay between opening the Enchant Scroll and clicking 'Enchant'</help>
        <arg name="delay" type="int">
          <tip>Integer, Delay in miliseconds</tip>
        </arg>
      </method>
      <method name="getDelay">
        <tip>Gets the delay between opening the Enchant Scroll and clicking 'Enchant'</tip>
        <help>Gets the delay between opening the Enchant Scroll and clicking 'Enchant'</help>
        <return type="int">
          <tip>Integer, Delay in miliseconds</tip>
          <help>Integer, Delay in miliseconds</help>
        </return>
      </method>
    </class>
    <class name="Script" creatable="false">
      <tip>Script class</tip>
      <help> Class allows to access own Script settings.
Can be accessed only from Script.</help>
      <method name="Stop">
        <tip>Method stops script</tip>
        <help>Method stops script</help>
      </method>
      <method name="GetFilename">
        <tip>Method returns script filename</tip>
        <help>Method returns script filename</help>
        <return type="string">
          <tip>script filename</tip>
          <help>script filename</help>
        </return>
      </method>
      <method name="GetParams">
        <tip>Method returns script params</tip>
        <help>Method returns script params</help>
        <return type="string">
          <tip>script params</tip>
          <help>script params</help>
        </return>
      </method>
      <method name="Pause">
        <tip>Method allow to pause script</tip>
        <help>Method allow to pause script</help>
      </method>
      <method name="Log">
        <tip>Method logs string from script</tip>
        <help>Method logs string from script</help>
        <sample>this:Log("Message from script");</sample>
        <return type="boolean">
          <tip />
        </return>
        <arg name="message" type="string">
          <tip>message to log</tip>
        </arg>
      </method>
      <method name="Include">
        <tip>Method includes file, encrypted or not</tip>
        <help>Method includes file, encrypted or not</help>
        <sample>this:Include("script2.lua");</sample>
        <return type="boolean">
          <tip>true on success, false on fail</tip>
          <help>true on success, false on fail</help>
        </return>
        <arg name="file" type="string">
          <tip>filename to include</tip>
        </arg>
      </method>
    </class>
    <class name="ItemData" creatable="false">
      <tip>Item info class</tip>
      <help>Item info class</help>
      <method name="GetId">
        <tip>Returns ObjectId of item</tip>
        <help>Returns ObjectId of item</help>
        <return type="int">
          <tip>ObjectId</tip>
          <help>ObjectId</help>
        </return>
      </method>
      <method name="GetNameId">
        <tip>Returns NameId of item</tip>
        <help>Returns NameId of item</help>
        <return type="int">
          <tip>NameId</tip>
          <help>NameId</help>
        </return>
      </method>
      <method name="GetType">
        <tip>Returns Type of item</tip>
        <help>Returns Type of item</help>
        <return type="int">
          <tip>Type of item</tip>
          <help>Type of item</help>
        </return>
      </method>
      <method name="GetQuantity">
        <tip>Returns item count</tip>
        <help>Returns item count</help>
        <return type="int">
          <tip>item count</tip>
          <help>item count</help>
        </return>
      </method>
      <method name="GetLocation">
        <tip>Returns item location</tip>
        <help>Returns item location</help>
        <return type="FVector">
          <tip>item location</tip>
          <help>item location</help>
        </return>
      </method>
      <method name="GetRangeFixedTo">
        <tip>Returns range to user</tip>
        <help>Returns range to user</help>
        <return type="float">
          <tip>distance</tip>
          <help>distance</help>
        </return>
        <arg name="player" type="User">
          <tip>player</tip>
        </arg>
      </method>
      <method name="GetRangeTo">
        <tip>Returns range to user</tip>
        <help>Returns range to user</help>
        <return type="float">
          <tip>distance</tip>
          <help>distance</help>
        </return>
        <arg name="player" type="User">
          <tip>player</tip>
        </arg>
      </method>
      <method name="GetRangeTo">
        <tip>Returns range to location</tip>
        <help>Returns range to location</help>
        <return type="float">
          <tip>distance</tip>
          <help>distance</help>
        </return>
        <arg name="X" type="float">
          <tip>X location</tip>
        </arg>
        <arg name="Y" type="float">
          <tip>Y location</tip>
        </arg>
        <arg name="Z" type="float">
          <tip>Z location</tip>
        </arg>
      </method>
      <method name="GetDropTime">
        <tip>Returns DropTime of item</tip>
        <help>Returns DropTime of item</help>
        <return type="uint64">
          <tip>DropTime</tip>
          <help>DropTime</help>
        </return>
      </method>
      <method name="GetName">
        <tip>Returns Name of item</tip>
        <help>Returns Name of item</help>
        <return type="string">
          <tip>item name</tip>
          <help>item name</help>
        </return>
      </method>
    </class>
    <class name="PacketReader" creatable="false">
      <tip>Packet read class</tip>
      <help>Packet read class</help>
      <method name="Size">
        <tip>Method retuns size of packet as signed int</tip>
        <help>Method retuns size of packet as signed int</help>
        <return type="int">
          <tip>size of packet</tip>
          <help>size of packet</help>
        </return>
      </method>
      <method name="ReadInt">
        <tip>Reads signed int based on size from packet</tip>
        <help>Reads signed int based on size from packet</help>
        <return type="int64">
          <tip>signed __int64</tip>
          <help>signed __int64</help>
        </return>
        <arg name="arg1" type="uint">
          <tip />
        </arg>
      </method>
      <method name="ReadUInt">
        <tip>Reads unsigned int based on size from packet</tip>
        <help>Reads unsigned int based on size from packet</help>
        <return type="uint64">
          <tip>unsigned __int64</tip>
          <help>unsigned __int64</help>
        </return>
        <arg name="arg1" type="uint">
          <tip />
        </arg>
      </method>
      <method name="ReadString">
        <tip>Reads string from packet</tip>
        <help>Reads string from packet</help>
        <return type="string">
          <tip>string value</tip>
          <help>string value</help>
        </return>
      </method>
      <method name="ReadDouble">
        <tip>Reads double from packet</tip>
        <help>Reads double from packet</help>
        <return type="float">
          <tip>double value</tip>
          <help>double value</help>
        </return>
      </method>
      <method name="ReadFloat">
        <tip>Reads float from packet</tip>
        <help>Reads float from packet</help>
        <return type="float">
          <tip>float value</tip>
          <help>float value</help>
        </return>
      </method>
      <method name="GetCurrentOffset">
        <tip>Returns current packet offset</tip>
        <help>Returns current packet offset</help>
        <return type="int">
          <tip>current packet offset</tip>
          <help>current packet offset</help>
        </return>
      </method>
      <method name="SetOffset">
        <tip>Sets current packet offset</tip>
        <help>Sets current packet offset</help>
        <return type="boolean">
          <tip>true if success</tip>
          <help>true if success</help>
        </return>
        <arg name="offset" type="int">
          <tip>offset value</tip>
        </arg>
      </method>
      <method name="BlockMe">
        <tip>Method blocks packet</tip>
        <help>Method blocks packet</help>
      </method>
      <method name="GetID">
        <tip>Returns id of packet</tip>
        <help>Returns id of packet</help>
        <return type="ubyte">
          <tip>packet id</tip>
          <help>packet id</help>
        </return>
      </method>
      <method name="GetSubID">
        <tip>Returns sub id of packet, works only for IncomingPackets</tip>
        <help>Returns sub id of packet, works only for IncomingPackets</help>
        <return type="ushort">
          <tip>packet sub id</tip>
          <help>packet sub id</help>
        </return>
      </method>
      <method name="DumpToLog">
        <tip>Method dump packet to log</tip>
        <help>Method dump packet to log</help>
      </method>
      <method name="GetFormat">
        <tip>Method retuns packet format, works only for Outgoing packets</tip>
        <help>Method retuns packet format, works only for Outgoing packets</help>
        <return type="string">
          <tip>wide string</tip>
          <help>wide string</help>
        </return>
      </method>
      <method name="Move">
        <tip>Method move offset in packet</tip>
        <help>Method move offset in packet</help>
        <return type="boolean">
          <tip />
        </return>
        <arg name="howMany" type="int">
          <tip>howMany to move (newoffset = curOffset + howMany)</tip>
        </arg>
      </method>
    </class>
    <class name="Plugin" creatable="false">
      <tip>Plugin control class, use this to access it from plugin</tip>
      <help>Plugin control class, use this to access it from plugin</help>
      <method name="IsActive">
        <tip>Checks if plugin is active</tip>
        <help>Checks if plugin is active</help>
        <return type="boolean">
          <tip>true if active, false if not</tip>
          <help>true if active, false if not</help>
        </return>
      </method>
      <method name="GetFileName">
        <tip>Returns plugin filename</tip>
        <help>Returns plugin filename</help>
        <return type="string">
          <tip>plugin filename</tip>
          <help>plugin filename</help>
        </return>
      </method>
      <method name="Log">
        <tip>Logs message to log, will be visible in l2tower logs window</tip>
        <help>Logs message to log, will be visible in l2tower logs window</help>
        <return type="boolean">
          <tip>true if success, false on fail</tip>
          <help>true if success, false on fail</help>
        </return>
        <arg name="message" type="string">
          <tip>message to log</tip>
        </arg>
      </method>
      <method name="Include">
        <tip>Method includes file, encrypted or not</tip>
        <help>Method includes file, encrypted or not</help>
        <sample>this:Include("common.lua");</sample>
        <return type="boolean">
          <tip>true on success, false on fail</tip>
          <help>true on success, false on fail</help>
        </return>
        <arg name="file" type="string">
          <tip>filename to include</tip>
        </arg>
      </method>
      <method name="StartThread">
        <tip>Starts new thread and calls function with specyfic name</tip>
        <help>Starts new thread and calls function with specyfic name</help>
        <return type="boolean">
          <tip>true if success, false on fail</tip>
          <help>true if success, false on fail</help>
        </return>
        <arg name="functionName" type="string">
          <tip>function name to be called</tip>
        </arg>
      </method>
      <method name="IsPaused">
        <tip>Checks if plugin is paused</tip>
        <help>Checks if plugin is paused</help>
        <return type="boolean">
          <tip>true if paused, false if not</tip>
          <help>true if paused, false if not</help>
        </return>
      </method>
      <method name="SetPaused">
        <tip>Controls pause of plugin, paused plugin dont receive any events</tip>
        <help>Controls pause of plugin, paused plugin dont receive any events</help>
        <arg name="paused" type="boolean">
          <tip>true if plugin have to be paused</tip>
        </arg>
      </method>
      <method name="RegisterCommand">
        <tip>Method unregister custom command handler</tip>
        <help>Method unregister custom command handler</help>
        <return type="boolean">
          <tip>true on success, false on fail when such command already exist</tip>
          <help>true on success, false on fail when such command already exist</help>
        </return>
        <arg name="command" type="string">
          <tip>command to register</tip>
        </arg>
        <arg name="commandChatType" type="CommandChatType">
          <tip>chat used to capture command</tip>
        </arg>
        <arg name="commandAccessLevel" type="CommandAccessLevel">
          <tip>command access level used to control access to command</tip>
        </arg>
      </method>
      <method name="UnregisterCommand">
        <tip>Method unregister custom command handler</tip>
        <help>Method unregister custom command handler</help>
        <arg name="command" type="string">
          <tip>command to unregister</tip>
        </arg>
      </method>
      <event name="OnCreate">
        <tip>Event called after plugin load, usually before user login, you should setup here any default vars.</tip>
        <help>Event called after plugin load, usually before user login, you should setup here any default vars.</help>
        <sample>function OnCreate()
	ShowToClient("Plugin", "OnCreate called");
end</sample>
      </event>
      <event name="OnDestroy">
        <tip>Event called before plugin unload</tip>
        <help>Event called before plugin unload</help>
        <sample>function OnDestroy()
	ShowToClient("Plugin", "OnDestroy called");
end</sample>
      </event>
      <event name="OnSave">
        <tip>Event called before saving configuration file</tip>
        <help>Event called before saving configuration file</help>
        <sample>function OnSave()
	ShowToClient("Plugin", "OnSave called");
end</sample>
      </event>
      <event name="OnLoad">
        <tip>Event called after configuration file loads</tip>
        <help>Event called after configuration file loads</help>
        <sample>function OnLoad()
	ShowToClient("Plugin", "OnLoad called");
end</sample>
      </event>
      <event name="OnTick">
        <tip>Event called on every 100ms tick (every ~100ms)
Event is called always, some data maybe unavaible when no user is logged in.
Also calling some functions can make game crash (or force you to diconnect).</tip>
        <help>Event called on every 100ms tick (every ~100ms)
Event is called always, some data maybe unavaible when no user is logged in.
Also calling some functions can make game crash (or force you to diconnect).</help>
        <sample>function OnTick()
	ShowToClient("Plugin", "OnTick called");
end</sample>
      </event>
      <event name="OnTick1s">
        <tip>Event called on every 1s tick (every ~1s)
Event is called always, some data maybe unavaible when no user is logged in.
Also calling some functions can make game crash (or force you to diconnect).</tip>
        <help>Event called on every 1s tick (every ~1s)
Event is called always, some data maybe unavaible when no user is logged in.
Also calling some functions can make game crash (or force you to diconnect).</help>
        <sample>function OnTick1s()
	ShowToClient("Plugin", "OnTick1s called");
end</sample>
      </event>
      <event name="OnTick500ms">
        <tip>Event called on every 0.5s tick (every ~0.5s)
Event is called always, some data maybe unavaible when no user is logged in.
Also calling some functions can make game crash (or force you to diconnect).</tip>
        <help>Event called on every 0.5s tick (every ~0.5s)
Event is called always, some data maybe unavaible when no user is logged in.
Also calling some functions can make game crash (or force you to diconnect).</help>
        <sample>function OnTick500ms()
	ShowToClient("Plugin", "OnTick500ms called");
end</sample>
      </event>
      <event name="OnLTick">
        <tip>Event called on every 100ms tick (every ~100ms) but only after user login.</tip>
        <help>Event called on every 100ms tick (every ~100ms) but only after user login.</help>
        <sample>function OnLTick()
	ShowToClient("Plugin", "OnLTick called");
end</sample>
      </event>
      <event name="OnLTick1s">
        <tip>Event called on every 1s tick (every ~1s) but only after user login</tip>
        <help>Event called on every 1s tick (every ~1s) but only after user login</help>
        <sample>function OnLTick1s()
	ShowToClient("Plugin", "OnLTick1s called");
end</sample>
      </event>
      <event name="OnLTick500ms">
        <tip>Event called on every 0.5s tick (every ~0.5s) but only after user login</tip>
        <help>Event called on every 0.5s tick (every ~0.5s) but only after user login</help>
        <sample>function OnLTick500ms()
	ShowToClient("Plugin", "OnLTick500ms called");
end</sample>
      </event>
      <event name="OnLogin">
        <tip>Event called after user login</tip>
        <help>Event called after user login</help>
        <sample>function OnLogin(username)
	ShowToClient("Plugin", "OnLogin called");
end</sample>
        <arg name="username" type="string">
          <tip>Loged user username/character name</tip>
        </arg>
      </event>
      <event name="OnLogout">
        <tip>Event called before user logout</tip>
        <help>Event called before user logout</help>
        <sample>function OnLogout()
	ShowToClient("Plugin", "OnLogout called");
end</sample>
      </event>
      <event name="OnDisconnect">
        <tip>Event called on client disconnect</tip>
        <help>Event called on client disconnect</help>
        <sample>function OnDisconnect()
	ShowToClient("Plugin", "OnDisconnect called");
end</sample>
        <arg name="mode" type="short">
          <tip>disconnect mode: 0 - logout, 0 &gt; dc</tip>
        </arg>
      </event>
      <event name="OnAttackCanceled">
        <tip>Event called when some player/npc cancel his attack.</tip>
        <help>Event called when some player/npc cancel his attack.</help>
        <sample>function OnAttackCanceled(user)
	ShowToClient("Plugin", "OnAttackCanceled called");
end</sample>
        <arg name="user" type="User">
          <tip>user who cancels attack</tip>
        </arg>
      </event>
      <event name="OnAttack">
        <tip>Event called when some player/npc attack other.</tip>
        <help>Event called when some player/npc attack other.</help>
        <sample>function OnAttack(user, target)
	ShowToClient("Plugin", "OnAttack called");
end</sample>
        <arg name="user" type="User">
          <tip>user who attack</tip>
        </arg>
        <arg name="target" type="User">
          <tip>user who will be attacked</tip>
        </arg>
      </event>
      <event name="OnAttacked">
        <tip>Event called when some player/npc attacked other.</tip>
        <help>Event called when some player/npc attacked other.</help>
        <sample>function OnAttacked(user, target)
	ShowToClient("Plugin", "OnAttacked called");
end</sample>
        <arg name="user" type="User">
          <tip>user who attacking</tip>
        </arg>
        <arg name="target" type="User">
          <tip>user who is attacked</tip>
        </arg>
      </event>
      <event name="OnAutoAttackStart">
        <tip>Event called when some player/npc activate auto attack.</tip>
        <help>Event called when some player/npc activate auto attack.</help>
        <sample>function OnAutoAttackStart(user)
	ShowToClient("Plugin", "OnAutoAttackStart called");
end</sample>
        <arg name="user" type="User">
          <tip>user object</tip>
        </arg>
      </event>
      <event name="OnAutoAttackStop">
        <tip>Event called when some player/npc deactivate auto attack.</tip>
        <help>Event called when some player/npc deactivate auto attack.</help>
        <sample>function OnAutoAttackStop(user)
	ShowToClient("Plugin", "OnAutoAttackStop called");
end</sample>
        <arg name="user" type="User">
          <tip>user object</tip>
        </arg>
      </event>
      <event name="OnUserInfo">
        <tip>Event called when we get some info about ourself</tip>
        <help>Event called when we get some info about ourself</help>
        <sample>function OnUserInfo(user)
	ShowToClient("Plugin", "OnUserInfo called");
end</sample>
        <arg name="user" type="User">
          <tip>user object (our)</tip>
        </arg>
      </event>
      <event name="OnCharInfo">
        <tip>Event called when we get some info about someother players (he spawn)</tip>
        <help>Event called when we get some info about someother players (he spawn)</help>
        <sample>function OnCharInfo(user)
	ShowToClient("Plugin", "OnCharInfo called");
end</sample>
        <arg name="user" type="User">
          <tip>user object</tip>
        </arg>
      </event>
      <event name="OnNpcInfo">
        <tip>Event called when we get some info about some npc/monster (he spawn)</tip>
        <help>Event called when we get some info about some npc/monster (he spawn)</help>
        <sample>function OnNpcInfo(user)
	ShowToClient("Plugin", "OnNpcInfo called");
end</sample>
        <arg name="user" type="User">
          <tip>user object</tip>
        </arg>
      </event>
      <event name="OnDeleteUser">
        <tip>Event called when some npc/player/user dissaper from map.</tip>
        <help>Event called when some npc/player/user dissaper from map.</help>
        <sample>function OnDeleteUser(user)
	ShowToClient("Plugin", "OnDeleteUser called");
end</sample>
        <arg name="user" type="User">
          <tip>user object</tip>
        </arg>
      </event>
      <event name="OnDie">
        <tip>Event called when some npc/player/user die.</tip>
        <help>Event called when some npc/player/user die.</help>
        <sample>function OnDie(user, isSpoiled)
	ShowToClient("Plugin", "OnDie called");
end</sample>
        <arg name="user" type="User">
          <tip>user object</tip>
        </arg>
        <arg name="isSpoiled" type="boolean">
          <tip>True if user were spoiled (blue)</tip>
        </arg>
      </event>
      <event name="OnRevive">
        <tip>Event called when some npc/player/user revive.</tip>
        <help>Event called when some npc/player/user revive.</help>
        <sample>function OnRevive(user)
	ShowToClient("Plugin", "OnRevive called");
end</sample>
        <arg name="user" type="User">
          <tip>user object</tip>
        </arg>
      </event>
      <event name="OnMagicSkillCanceled">
        <tip>Event called when some npc/player/user cancel magic skill.</tip>
        <help>Event called when some npc/player/user cancel magic skill.</help>
        <sample>function OnMagicSkillCanceled(user)
	ShowToClient("Plugin", "OnMagicSkillCanceled called");
end</sample>
        <arg name="user" type="User">
          <tip>user object</tip>
        </arg>
      </event>
      <event name="OnMagicSkillLaunched">
        <tip>Event called when some npc/player/user casted magic skill on someone other. 
For AOE skills this event will be called for every target.</tip>
        <help>Event called when some npc/player/user casted magic skill on someone other. 
For AOE skills this event will be called for every target.</help>
        <sample>function OnMagicSkillLaunched(user, target, skillId, skillLvl)
	ShowToClient("Plugin", "OnMagicSkillLaunched called");
end</sample>
        <arg name="user" type="User">
          <tip>user object</tip>
        </arg>
        <arg name="target" type="User">
          <tip>skill target</tip>
        </arg>
        <arg name="skillId" type="int">
          <tip>skill id</tip>
        </arg>
        <arg name="skillLvl" type="int">
          <tip>skill level</tip>
        </arg>
        <arg name="skillsubLvl" type="int">
          <tip>skillsub level</tip>
        </arg>
      </event>
      <event name="OnMagicSkillUse">
        <tip>Event called when some npc/player/user start cast magic skill on someone other.</tip>
        <help>Event called when some npc/player/user start cast magic skill on someone other.</help>
        <sample>function OnMagicSkillUse(user, target, skillId, skillLvl, skillHit, skillReuse)
	ShowToClient("Plugin", "OnMagicSkillUse called");
end</sample>
        <arg name="user" type="User">
          <tip>user object</tip>
        </arg>
        <arg name="target" type="User">
          <tip>skill target</tip>
        </arg>
        <arg name="skillId" type="int">
          <tip>skill id</tip>
        </arg>
        <arg name="skillLvl" type="int">
          <tip>skill level</tip>
        </arg>
        <arg name="skillHit" type="int">
          <tip>skill hit time in ms</tip>
        </arg>
        <arg name="skillReuse" type="int">
          <tip>skill reuse in ms</tip>
        </arg>
        <arg name="skillsublvl" type="int">
          <tip>skillsub lvl</tip>
        </arg>
      </event>
      <event name="OnTargetSelected">
        <tip>Event called when some npc/player/user select target.</tip>
        <help>Event called when some npc/player/user select target.</help>
        <sample>function OnTargetSelected(user, target)
	ShowToClient("Plugin", "OnTargetSelected called");
end</sample>
        <arg name="user" type="User">
          <tip>user object
 target object</tip>
        </arg>
        <arg name="arg2" type="User">
          <tip />
        </arg>
      </event>
      <event name="OnTargetUnselected">
        <tip>Event called when some npc/player/we cancel target</tip>
        <help>Event called when some npc/player/we cancel target</help>
        <sample>function OnTargetUnselected(user)
	ShowToClient("Plugin", "OnTargetUnselected called");
end</sample>
        <arg name="user" type="User">
          <tip>user object</tip>
        </arg>
      </event>
      <event name="OnMyTargetSelected">
        <tip>Event called when our target get changed.</tip>
        <help>Event called when our target get changed.</help>
        <sample>function OnMyTargetSelected(target)
	ShowToClient("Plugin", "OnMyTargetSelected called");
end</sample>
        <arg name="target" type="User">
          <tip>our target object</tip>
        </arg>
      </event>
      <event name="OnChangeMoveType">
        <tip>Event called when user changes move type from run to walk, or from walk to run</tip>
        <help>Event called when user changes move type from run to walk, or from walk to run</help>
        <sample>function OnChangeMoveType(user)
	ShowToClient("Plugin", "OnChangeMoveType called");
end</sample>
        <arg name="user" type="User">
          <tip>user object</tip>
        </arg>
      </event>
      <event name="OnChangeWaitType">
        <tip>Event called when user changes wait type, from sit to stand or from stand to sit</tip>
        <help>Event called when user changes wait type, from sit to stand or from stand to sit</help>
        <sample>function OnChangeWaitType(user)
	ShowToClient("Plugin", "OnChangeWaitType called");
end</sample>
        <arg name="user" type="User">
          <tip>user object</tip>
        </arg>
      </event>
      <event name="OnChatUserMessage">
        <tip>Event called when message from users shows up on chat</tip>
        <help>Event called when message from users shows up on chat</help>
        <sample>function OnChatUserMessage(type, nick, message)
	ShowToClient("Plugin", "OnChatUserMessage called");
end</sample>
        <arg name="type" type="L2ChatType">
          <tip>chat type</tip>
        </arg>
        <arg name="nick" type="string">
          <tip>message author</tip>
        </arg>
        <arg name="message" type="string">
          <tip>user message</tip>
        </arg>
      </event>
      <event name="OnChatSystemMessage">
        <tip>Event called when system message shows up</tip>
        <help>Event called when system message shows up</help>
        <sample>function OnChatSystemMessage(msgId, message)
	ShowToClient("Plugin", "OnChatSystemMessage called");
end</sample>
        <arg name="msgId" type="int">
          <tip>system messageId</tip>
        </arg>
        <arg name="message" type="string">
          <tip>system message</tip>
        </arg>
      </event>
      <event name="OnPickupItem">
        <tip>Event called when some user pickups item</tip>
        <help>Event called when some user pickups item</help>
        <sample>function OnPickupItem(user, item)
	ShowToClient("Plugin", "OnPickupItem called");
end</sample>
        <arg name="user" type="User">
          <tip>user who pickups</tip>
        </arg>
        <arg name="item" type="ItemData">
          <tip>item on ground</tip>
        </arg>
      </event>
      <event name="OnDropItem">
        <tip>Event called when some user drops item</tip>
        <help>Event called when some user drops item</help>
        <sample>function OnDropItem(user, item)
	ShowToClient("Plugin", "OnDropItem called");
end</sample>
        <arg name="user" type="User">
          <tip>user who pickups</tip>
        </arg>
        <arg name="item" type="ItemData">
          <tip>item on ground</tip>
        </arg>
      </event>
      <event name="OnSpawnItem">
        <tip>Event called when item shows up on ground</tip>
        <help>Event called when item shows up on ground</help>
        <sample>function OnSpawnItem(item)
	ShowToClient("Plugin", "OnSpawnItem called");
end</sample>
        <arg name="item" type="ItemData">
          <tip>item on ground</tip>
        </arg>
      </event>
      <event name="OnDeleteItem">
        <tip>Event called when item is removed from ground</tip>
        <help>Event called when item is removed from ground</help>
        <sample>function OnDeleteItem(item)
	ShowToClient("Plugin", "OnDeleteItem called");
end</sample>
        <arg name="item" type="ItemData">
          <tip>item on ground</tip>
        </arg>
      </event>
      <event name="OnMoveToLocation">
        <tip>Event called when user request move to some location</tip>
        <help>Event called when user request move to some location</help>
        <sample>function OnMoveToLocation(user, oldLoc, newLoc)
	ShowToClient("Plugin", "OnMoveToLocation called");
end</sample>
        <arg name="user" type="User">
          <tip>user object</tip>
        </arg>
        <arg name="oldLoc" type="FVector">
          <tip>old location</tip>
        </arg>
        <arg name="newLoc" type="FVector">
          <tip>new location</tip>
        </arg>
      </event>
      <event name="OnTeleportToLocation">
        <tip>Event called when user request teleport to some location</tip>
        <help>Event called when user request teleport to some location</help>
        <sample>function OnTeleportToLocation(user, oldLoc, newLoc)
	ShowToClient("Plugin", "OnTeleportToLocation called");
end</sample>
        <arg name="user" type="User">
          <tip>user object</tip>
        </arg>
        <arg name="oldLoc" type="FVector">
          <tip>old location</tip>
        </arg>
        <arg name="newLoc" type="FVector">
          <tip>new location</tip>
        </arg>
      </event>
      <event name="OnStopMove">
        <tip>Event called when user request stop moving to some location</tip>
        <help>Event called when user request stop moving to some location</help>
        <sample>function OnStopMove(user, loc)
	ShowToClient("Plugin", "OnStopMove called");
end</sample>
        <arg name="user" type="User">
          <tip>user object</tip>
        </arg>
        <arg name="loc" type="FVector">
          <tip>stop location</tip>
        </arg>
      </event>
      <event name="OnIncomingPacket">
        <tip>Event called when L2 receives some packet</tip>
        <help>Event called when L2 receives some packet</help>
        <sample>function OnIncomingPacket(packet)
	ShowToClient("Plugin", "OnIncomingPacket called");
end</sample>
        <arg name="packet" type="PacketReader">
          <tip>packet object</tip>
        </arg>
      </event>
      <event name="OnL2TChatSystemMsg">
        <tip>Event called when system message has been received from L2Tower Community Server</tip>
        <help>Event called when system message has been received from L2Tower Community Server</help>
        <sample>function OnL2TChatSystemMsg(message, isError)
	ShowToClient("Plugin", "OnL2TChatSystemMsg called");
end</sample>
        <arg name="message" type="string">
          <tip>message text</tip>
        </arg>
        <arg name="isError" type="boolean">
          <tip>true if this system message is a error message</tip>
        </arg>
      </event>
      <event name="OnL2TChatGlobalMsg">
        <tip>Event called when global chat message has been received from L2Tower Community Server</tip>
        <help>Event called when global chat message has been received from L2Tower Community Server</help>
        <sample>function OnL2TChatGlobalMsg(user, message, connectionId)
	ShowToClient("Plugin", "OnL2TChatGlobalMsg called");
end</sample>
        <arg name="username" type="string">
          <tip>L2Tower username</tip>
        </arg>
        <arg name="message" type="string">
          <tip>message text</tip>
        </arg>
        <arg name="connectionId" type="uint">
          <tip>client connection id</tip>
        </arg>
      </event>
      <event name="OnL2TChatServerMsg">
        <tip>Event called when server chat message has been received from L2Tower Community Server</tip>
        <help>Event called when server chat message has been received from L2Tower Community Server</help>
        <sample>function OnL2TChatServerMsg(user, message, connectionId)
	ShowToClient("Plugin", "OnL2TChatServerMsg called");
end</sample>
        <arg name="username" type="string">
          <tip>L2Tower username</tip>
        </arg>
        <arg name="message" type="string">
          <tip>message text</tip>
        </arg>
        <arg name="connectionId" type="uint">
          <tip>client connection id</tip>
        </arg>
      </event>
      <event name="OnL2TChatPersonalMsg">
        <tip>Event called when personal chat message has been received from L2Tower Community Server</tip>
        <help>Event called when personal chat message has been received from L2Tower Community Server</help>
        <sample>function OnL2TChatPersonalMsg(user, message, connectionId)
	ShowToClient("Plugin", "OnL2TChatPersonalMsg called");
end</sample>
        <arg name="username" type="string">
          <tip>L2Tower username</tip>
        </arg>
        <arg name="message" type="string">
          <tip>message text</tip>
        </arg>
        <arg name="connectionId" type="uint">
          <tip>client connection id</tip>
        </arg>
      </event>
      <event name="OnL2TChatHiddenMsg">
        <tip>Event called when hidden personal chat message has been received from L2Tower Community Server</tip>
        <help>Event called when hidden personal chat message has been received from L2Tower Community Server</help>
        <sample>function OnL2TChatHiddenMsg(user, message, connectionId)
	ShowToClient("Plugin", "OnL2TChatHiddenMsg called");
end</sample>
        <arg name="username" type="string">
          <tip>L2Tower username</tip>
        </arg>
        <arg name="message" type="string">
          <tip>message text</tip>
        </arg>
        <arg name="connectionId" type="uint">
          <tip>client connection id</tip>
        </arg>
      </event>
      <event name="OnFishingHPRegen">
        <tip>Event called when L2 receives OnFishingHPRegen packet</tip>
        <help>Event called when L2 receives OnFishingHPRegen packet</help>
        <sample>function OnFishingHPRegen(param1, param2)
	ShowToClient("Plugin", "OnFishingHPRegen called");
end</sample>
        <arg name="param1" type="int">
          <tip>tells you with skill you should use</tip>
        </arg>
        <arg name="param2" type="int">
          <tip>whan == 1 then param1 should be inverted</tip>
        </arg>
      </event>
      <event name="OnFishingStart">
        <tip>Event called when L2 receives OnFishingStart packet</tip>
        <help>Event called when L2 receives OnFishingStart packet</help>
        <sample>function OnFishingStart()
	ShowToClient("Plugin", "OnFishingStart called");
end</sample>
      </event>
      <event name="OnFishingEnd">
        <tip>Event called when L2 receives OnFishingEnd packet</tip>
        <help>Event called when L2 receives OnFishingEnd packet</help>
        <sample>function OnFishingEnd(success)
	ShowToClient("Plugin", "OnFishingEnd called");
end</sample>
        <arg name="success" type="int">
          <tip>== 1 when you catch a fish</tip>
        </arg>
      </event>
      <event name="OnFishingCombatStart">
        <tip>Event called when L2 receives OnFishingCombatStart packet</tip>
        <help>Event called when L2 receives OnFishingCombatStart packet</help>
        <sample>function OnFishingCombatStart(time, fishHP)
	ShowToClient("Plugin", "OnFishingCombatStart called");
end</sample>
        <arg name="time" type="int">
          <tip>time to end of fishing</tip>
        </arg>
        <arg name="fishHP" type="int">
          <tip>fish hp</tip>
        </arg>
      </event>
    </class>
    <class name="THtmlAction">
      <tip>Class allows to create html action.</tip>
      <help>Class allows to create html action.</help>
      <method name="AddParam">
        <tip>Method adds param to action</tip>
        <help>Method adds param to action</help>
        <return type="THtmlAction">
          <tip>this object</tip>
          <help>this object</help>
        </return>
        <arg name="param" type="int">
          <tip>int param</tip>
        </arg>
      </method>
      <method name="AddParam">
        <tip>Method adds param to action</tip>
        <help>Method adds param to action</help>
        <return type="THtmlAction">
          <tip>this object</tip>
          <help>this object</help>
        </return>
        <arg name="param" type="string">
          <tip>string param</tip>
        </arg>
        <arg name="var" type="boolean">
          <tip>true if its var, false if const</tip>
        </arg>
      </method>
      <method name="AddParam">
        <tip>Method adds param to action</tip>
        <help>Method adds param to action</help>
        <return type="THtmlAction">
          <tip>this object</tip>
          <help>this object</help>
        </return>
        <arg name="param" type="string">
          <tip>string param</tip>
        </arg>
      </method>
      <method name="SetParam">
        <tip>Method sets int param in action</tip>
        <help>Method sets int param in action</help>
        <return type="THtmlAction">
          <tip>this object</tip>
          <help>this object</help>
        </return>
        <arg name="index" type="int">
          <tip>index of param</tip>
        </arg>
        <arg name="param" type="string">
          <tip>string param</tip>
        </arg>
      </method>
      <method name="SetParam">
        <tip>Method sets int param in action</tip>
        <help>Method sets int param in action</help>
        <return type="THtmlAction">
          <tip>this object</tip>
          <help>this object</help>
        </return>
        <arg name="index" type="int">
          <tip>index of param</tip>
        </arg>
        <arg name="param" type="int">
          <tip>int param</tip>
        </arg>
      </method>
      <method name="GetAction">
        <tip>Returns full action string</tip>
        <help>Returns full action string</help>
        <return type="string">
          <tip>Action string</tip>
          <help>Action string</help>
        </return>
      </method>
      <constructor>
        <tip>Constructor that creates action</tip>
        <help>Constructor that creates action</help>
        <arg name="command" type="string">
          <tip>command string</tip>
        </arg>
      </constructor>
    </class>
    <class name="THtmlGenerator">
      <tip>Class used to generate html pages.</tip>
      <help>Class used to generate html pages.</help>
      <method name="GetString">
        <tip>Method returns html of page</tip>
        <help>Method returns html of page</help>
        <return type="string">
          <tip>Html string</tip>
          <help>Html string</help>
        </return>
      </method>
      <method name="AddButton">
        <tip>Method adds button to page end</tip>
        <help>Method adds button to page end</help>
        <arg name="action" type="THtmlAction">
          <tip>Action to be called when button clicked</tip>
        </arg>
        <arg name="style" type="THtmlButtonStyle">
          <tip>Button style</tip>
        </arg>
        <arg name="title" type="string">
          <tip>button title</tip>
        </arg>
        <arg name="pressed" type="boolean">
          <tip>Is pressed button style ?</tip>
        </arg>
        <arg name="caption" type="string">
          <tip>button caption</tip>
        </arg>
        <arg name="img" type="string">
          <tip>button background</tip>
        </arg>
        <arg name="width" type="int">
          <tip>button width</tip>
        </arg>
        <arg name="height" type="int">
          <tip>button height</tip>
        </arg>
      </method>
      <method name="AddButton">
        <tip>Method adds button to page end</tip>
        <help>Method adds button to page end</help>
        <arg name="action" type="THtmlAction">
          <tip>Action to be called when button clicked</tip>
        </arg>
        <arg name="style" type="THtmlButtonStyle">
          <tip>Button style</tip>
        </arg>
        <arg name="title" type="int">
          <tip>button title as int</tip>
        </arg>
        <arg name="pressed" type="boolean">
          <tip>Is pressed button style ?</tip>
        </arg>
        <arg name="caption" type="string">
          <tip>button caption</tip>
        </arg>
        <arg name="img" type="string">
          <tip>button background</tip>
        </arg>
        <arg name="width" type="int">
          <tip>button width</tip>
        </arg>
        <arg name="height" type="int">
          <tip>button height</tip>
        </arg>
      </method>
      <method name="AddLink">
        <tip>Method adds link to page end</tip>
        <help>Method adds link to page end</help>
        <arg name="action" type="THtmlAction">
          <tip>Action to be called when button clicked</tip>
        </arg>
        <arg name="text" type="string">
          <tip>link text</tip>
        </arg>
        <arg name="msg" type="string">
          <tip>link msg</tip>
        </arg>
      </method>
      <method name="AddLink">
        <tip>Method adds link to page end</tip>
        <help>Method adds link to page end</help>
        <arg name="action" type="THtmlAction">
          <tip>Action to be called when button clicked</tip>
        </arg>
        <arg name="text" type="string">
          <tip>link text</tip>
        </arg>
        <arg name="msg" type="string">
          <tip>link msg</tip>
        </arg>
      </method>
      <method name="AddEdit">
        <tip>Method adds edit to page end</tip>
        <help>Method adds edit to page end</help>
        <arg name="name" type="string">
          <tip>edit name</tip>
        </arg>
        <arg name="isNumber" type="boolean">
          <tip>true if edit is for numbers</tip>
        </arg>
        <arg name="width" type="int">
          <tip>button width</tip>
        </arg>
        <arg name="height" type="int">
          <tip>button height</tip>
        </arg>
      </method>
      <method name="AddComboBox">
        <tip>Method adds combobox to page end</tip>
        <help>Method adds combobox to page end</help>
        <arg name="name" type="string">
          <tip>combobox name</tip>
        </arg>
        <arg name="data" type="StringVector">
          <tip>combobox elements</tip>
        </arg>
        <arg name="value" type="string">
          <tip>selected value</tip>
        </arg>
        <arg name="width" type="int">
          <tip>button width</tip>
        </arg>
        <arg name="height" type="int">
          <tip>button height</tip>
        </arg>
      </method>
      <method name="AddMultiEdit">
        <tip>Method adds multiedit to page end</tip>
        <help>Method adds multiedit to page end</help>
        <arg name="name" type="string">
          <tip>multiedit name</tip>
        </arg>
        <arg name="width" type="int">
          <tip>button width</tip>
        </arg>
        <arg name="height" type="int">
          <tip>button height</tip>
        </arg>
      </method>
      <method name="AddImage">
        <tip>Method adds image to page end</tip>
        <help>Method adds image to page end</help>
        <arg name="name" type="string">
          <tip>image name</tip>
        </arg>
        <arg name="width" type="int">
          <tip>button width</tip>
        </arg>
        <arg name="height" type="int">
          <tip>button height</tip>
        </arg>
      </method>
      <method name="AddHtml">
        <tip>Method adds html to page end</tip>
        <help>Method adds html to page end</help>
        <arg name="html" type="string">
          <tip>html code</tip>
        </arg>
      </method>
      <method name="Table_Start">
        <tip>Starts a table</tip>
        <help>Starts a table</help>
        <arg name="autoCell" type="boolean">
          <tip>true if cells have to be added in automatic way</tip>
        </arg>
        <arg name="rowBreak" type="boolean">
          <tip>true if there have be a break between rows</tip>
        </arg>
        <arg name="width" type="int">
          <tip>table width</tip>
        </arg>
      </method>
      <method name="Table_SetupPageSpliter">
        <tip>Sets a autosplit table into separated pages</tip>
        <help>Sets a autosplit table into separated pages</help>
        <arg name="action" type="THtmlAction">
          <tip>action to be called to show ne page</tip>
        </arg>
        <arg name="actionParamIndex" type="int">
          <tip>index of page index in action</tip>
        </arg>
        <arg name="page" type="int">
          <tip>active page</tip>
        </arg>
        <arg name="count" type="int">
          <tip>count of rows peer page</tip>
        </arg>
        <arg name="emptyRowHeight" type="int">
          <tip>height of empty row</tip>
        </arg>
        <arg name="emptyRow" type="boolean">
          <tip>should empty row be shown</tip>
        </arg>
        <arg name="allwaysIncludeArrows" type="boolean">
          <tip>should page change arrows be always shown</tip>
        </arg>
      </method>
      <method name="Table_End">
        <tip>Ends table</tip>
        <help>Ends table</help>
      </method>
      <method name="Table_EndCell">
        <tip>Ends cell and starts new one if needed</tip>
        <help>Ends cell and starts new one if needed</help>
      </method>
      <method name="Table_EndRow">
        <tip>Ends row, puts empty cells if needed</tip>
        <help>Ends row, puts empty cells if needed</help>
      </method>
      <method name="Table_AddColumn">
        <tip>Adds new column</tip>
        <help>Adds new column</help>
        <arg name="width" type="int">
          <tip>column width</tip>
        </arg>
      </method>
      <method name="Table_AddColumns">
        <tip>Adds new columns, width of them will be calculated</tip>
        <help>Adds new columns, width of them will be calculated</help>
        <arg name="count" type="int">
          <tip>count of columns to add</tip>
        </arg>
      </method>
      <method name="AddLine">
        <tip>Adds line</tip>
        <help>Adds line</help>
        <arg name="isUp" type="boolean">
          <tip>is up or down line</tip>
        </arg>
      </method>
      <method name="AddNewLine">
        <tip>Adds new line to page.</tip>
        <help>Adds new line to page.</help>
      </method>
      <method name="AddEmpty">
        <tip>Adds empty string to page, can be used for automatic adding cells</tip>
        <help>Adds empty string to page, can be used for automatic adding cells</help>
      </method>
      <constructor>
        <tip>Constructor with parameters</tip>
        <help>Constructor with parameters</help>
        <arg name="title" type="string">
          <tip>Page title</tip>
        </arg>
        <arg name="noPrefix" type="boolean">
          <tip />
        </arg>
      </constructor>
      <constructor>
        <tip>Constructor with parameters with noPrefix set to false</tip>
        <help>Constructor with parameters with noPrefix set to false</help>
        <arg name="title" type="string">
          <tip>Page title</tip>
        </arg>
      </constructor>
    </class>
    <class name="CommandParam" creatable="false">
      <tip>Command param class</tip>
      <help>Command param class</help>
      <method name="GetParams">
        <tip>Mergest next X params and returns them as one.</tip>
        <help>Mergest next X params and returns them as one.</help>
        <return type="string">
          <tip>command line</tip>
          <help>command line</help>
        </return>
        <arg name="count" type="int">
          <tip>count of params to merge</tip>
        </arg>
      </method>
      <method name="GetInt">
        <tip>Returns command param as int</tip>
        <help>Returns command param as int</help>
        <return type="int">
          <tip>command param as int</tip>
          <help>command param as int</help>
        </return>
      </method>
      <method name="GetFloat">
        <tip>Returns command param as float</tip>
        <help>Returns command param as float</help>
        <return type="float">
          <tip>command param as float</tip>
          <help>command param as float</help>
        </return>
      </method>
      <method name="GetStr">
        <tip>Returns command param as string</tip>
        <help>Returns command param as string</help>
        <return type="string">
          <tip>command param as string</tip>
          <help>command param as string</help>
        </return>
        <arg name="trim" type="boolean">
          <tip>true if string should be trim from spaces</tip>
        </arg>
      </method>
    </class>
    <class name="CommandParams" creatable="false">
      <tip>Class contains list of all available command parameters</tip>
      <help>Class contains list of all available command parameters</help>
      <method name="GetCount">
        <tip>Method returns count of all command params</tip>
        <help>Method returns count of all command params</help>
        <return type="int">
          <tip>count of all command params</tip>
          <help>count of all command params</help>
        </return>
      </method>
      <method name="GetParam">
        <tip>Method returns command param on specyfic index</tip>
        <help>Method returns command param on specyfic index</help>
        <return type="CommandParam">
          <tip>command param on specyfic index</tip>
          <help>command param on specyfic index</help>
        </return>
        <arg name="index" type="int">
          <tip>index of param</tip>
        </arg>
      </method>
    </class>
    <class name="ItemDataList" creatable="false">
      <tip>Items spawned/droped on ground list</tip>
      <help>Items spawned/droped on ground list</help>
      <method name="GetCount">
        <tip>Method returns count of items on ground</tip>
        <help>Method returns count of items on ground</help>
        <return type="int">
          <tip>Count of items on ground</tip>
          <help>Count of items on ground</help>
        </return>
      </method>
      <method name="GetQuantitySum">
        <tip>Method returns sum of items of specyfic item type</tip>
        <help>Method returns sum of items of specyfic item type</help>
        <return type="int">
          <tip>Sum items count</tip>
          <help>Sum items count</help>
        </return>
        <arg name="displayId" type="int">
          <tip>Item displayId</tip>
        </arg>
      </method>
      <method name="GetByIdx">
        <tip>Method returns item by index</tip>
        <help>Method returns item by index</help>
        <return type="ItemData">
          <tip>Item</tip>
          <help>Item</help>
        </return>
        <arg name="index" type="int">
          <tip>Item index</tip>
        </arg>
      </method>
      <method name="GetByNameId">
        <tip>Method returns item by displayId</tip>
        <help>Method returns item by displayId</help>
        <return type="ItemData">
          <tip>Item</tip>
          <help>Item</help>
        </return>
        <arg name="displayId" type="int">
          <tip>Item displayId</tip>
        </arg>
      </method>
    </class>
    <function name="GetInventory">
      <tip>Method returns user inventory snapshot</tip>
      <help>Method returns user inventory snapshot</help>
      <return type="ItemList">
        <tip>user inventory object</tip>
        <help>user inventory object</help>
      </return>
    </function>
    <function name="GetPetInventory">
      <tip>Method returns pet inventory snapshot</tip>
      <help>Method returns pet inventory snapshot</help>
      <return type="ItemList">
        <tip>pet inventory object</tip>
        <help>pet inventory object</help>
      </return>
    </function>
    <function name="GetPrivateWarehouse">
      <tip>Method returns user warehouse snapshot</tip>
      <help>Method returns user warehouse snapshot</help>
      <return type="ItemList">
        <tip>user warehouse object</tip>
        <help>user warehouse object</help>
      </return>
    </function>
    <function name="GetClanWarehouse">
      <tip>Method returns clan warehouse snapshot</tip>
      <help>Method returns clan warehouse snapshot</help>
      <return type="ItemList">
        <tip>clan warehouse object</tip>
        <help>clan warehouse object</help>
      </return>
    </function>
    <function name="GetCastleWarehouse">
      <tip>Method returns castle warehouse snapshot</tip>
      <help>Method returns castle warehouse snapshot</help>
      <return type="ItemList">
        <tip>castle warehouse object</tip>
        <help>castle warehouse object</help>
      </return>
    </function>
    <function name="GetEtcWarehouse">
      <tip>Method returns etc warehouse snapshot</tip>
      <help>Method returns etc warehouse snapshot</help>
      <return type="ItemList">
        <tip>etc warehouse object</tip>
        <help>etc warehouse object</help>
      </return>
    </function>
    <function name="GetSkills">
      <tip>Method returns user skill list snapshot</tip>
      <help>Method returns user skill list snapshot</help>
      <return type="SkillList">
        <tip>user skill list snapshot</tip>
        <help>user skill list snapshot</help>
      </return>
    </function>
    <function name="GetPlayerList">
      <tip>Method returns player list</tip>
      <help>Method returns player list</help>
      <return type="UserList">
        <tip>player list object</tip>
        <help>player list object</help>
      </return>
    </function>
    <function name="GetNpcList">
      <tip>Method returns npc list</tip>
      <help>Method returns npc list</help>
      <return type="UserList">
        <tip>npc list object</tip>
        <help>npc list object</help>
      </return>
    </function>
    <function name="GetPetList">
      <tip>Method returns pet list</tip>
      <help>Method returns pet list</help>
      <return type="UserList">
        <tip>pet list object</tip>
        <help>pet list object</help>
      </return>
    </function>
    <function name="GetPartyList">
      <tip>Method returns party list</tip>
      <help>Method returns party list</help>
      <return type="UserList">
        <tip>party list object</tip>
        <help>party list object</help>
      </return>
    </function>
    <function name="GetMonsterList">
      <tip>Method returns monsters list</tip>
      <help>Method returns monsters list</help>
      <return type="UserList">
        <tip>monsters list object</tip>
        <help>monsters list object</help>
      </return>
    </function>
    <function name="GetMe">
      <tip>Method returns myself object</tip>
      <help>Method returns myself object</help>
      <return type="User">
        <tip>myself object</tip>
        <help>myself object</help>
      </return>
    </function>
    <function name="GetPet">
      <tip>Method returns our pet object</tip>
      <help>Method returns our pet object</help>
      <return type="User">
        <tip>our pet object</tip>
        <help>our pet object</help>
      </return>
    </function>
    <function name="GetTarget">
      <tip>Method returns our target object</tip>
      <help>Method returns our target object</help>
      <return type="User">
        <tip>our target object</tip>
        <help>our target object</help>
      </return>
    </function>
    <function name="GetPartyMaster">
      <tip>Method returns our party master object</tip>
      <help>Method returns our party master object</help>
      <return type="User">
        <tip>our party master object</tip>
        <help>our party master object</help>
      </return>
    </function>
    <function name="GetUserById">
      <tip>Method finds user by objectId</tip>
      <help>Method finds user by objectId</help>
      <return type="User">
        <tip>found user or nil if not found</tip>
        <help>found user or nil if not found</help>
      </return>
      <arg name="objectId" type="int">
        <tip>user objectId</tip>
      </arg>
    </function>
    <function name="GetUserByName">
      <tip>Method finds user by name</tip>
      <help>Method finds user by name</help>
      <return type="User">
        <tip>first found user or nil if not found</tip>
        <help>first found user or nil if not found</help>
      </return>
      <arg name="name" type="string">
        <tip>user name</tip>
      </arg>
    </function>
    <function name="GetZoneType">
      <tip>Method returns actual zone type</tip>
      <help>Method returns actual zone type</help>
      <return type="L2ZoneType">
        <tip>actual zone type</tip>
        <help>actual zone type</help>
      </return>
    </function>
    <function name="GetManorManager">
      <tip>Method returns manor manager</tip>
      <help>Method returns manor manager</help>
      <return type="Manor">
        <tip>manor manager object</tip>
        <help>manor manager object</help>
      </return>
    </function>
    <function name="GetEnchantManager">
      <tip>Method returns enchant manager</tip>
      <help>Method returns enchant manager</help>
      <return type="Enchant">
        <tip>enchant manager object</tip>
        <help>enchant manager object</help>
      </return>
    </function>
    <function name="GetAugmentManager">
      <tip>Method returns augument manager</tip>
      <help>Method returns augument manager</help>
      <return type="Augment">
        <tip>augument manager object</tip>
        <help>augument manager object</help>
      </return>
    </function>
    <function name="GetItemManager">
      <tip>Method returns item manager</tip>
      <help>Method returns item manager</help>
      <return type="ItemDataList">
        <tip>item manager object</tip>
        <help>item manager object</help>
      </return>
    </function>
    <function name="GetDialogHtml">
      <tip>Method returns last dialog html</tip>
      <help>Method returns last dialog html</help>
      <return type="string">
        <tip>last dialog html</tip>
        <help>last dialog html</help>
      </return>
    </function>
    <function name="Command">
      <tip>Runs a command or sends message on chat, use like normal game chat</tip>
      <help>Runs a command or sends message on chat, use like normal game chat</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
      <arg name="command" type="string">
        <tip>command or message</tip>
      </arg>
    </function>
    <function name="SendPM">
      <tip>Sends personal message</tip>
      <help>Sends personal message</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
      <arg name="target" type="string">
        <tip>target name</tip>
      </arg>
      <arg name="message" type="string">
        <tip>message to send</tip>
      </arg>
    </function>
    <function name="MoveToNoWait">
      <tip>Request move to some location</tip>
      <help>Request move to some location</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
      <arg name="location" type="FVector">
        <tip>location to move</tip>
      </arg>
    </function>
    <function name="MoveToNoWait">
      <tip>Request move to some location</tip>
      <help>Request move to some location</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
      <arg name="X" type="float">
        <tip>X location to move</tip>
      </arg>
      <arg name="Y" type="float">
        <tip>Y location to move</tip>
      </arg>
      <arg name="Z" type="float">
        <tip>Z location to move</tip>
      </arg>
    </function>
    <function name="MoveToNoWaitF">
      <tip>Request move to some location</tip>
      <help>Request move to some location</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
      <arg name="X" type="int">
        <tip>X location to move</tip>
      </arg>
      <arg name="Y" type="int">
        <tip>Y location to move</tip>
      </arg>
      <arg name="Z" type="int">
        <tip>Z location to move</tip>
      </arg>
    </function>
    <function name="Action">
      <tip>Runs a game action</tip>
      <help>Runs a game action</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
      <arg name="action" type="int">
        <tip>Action to run</tip>
      </arg>
      <arg name="useShift" type="boolean">
        <tip>shift key will be down</tip>
      </arg>
      <arg name="useCtrl" type="boolean">
        <tip>crtl key will be down</tip>
      </arg>
    </function>
    <function name="Attack">
      <tip>Attacks target</tip>
      <help>Attacks target</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
      <arg name="objectId" type="int">
        <tip>target objectId</tip>
      </arg>
      <arg name="useShift" type="boolean">
        <tip>shift key will be down</tip>
      </arg>
    </function>
    <function name="CancelTarget">
      <tip>Cancels active target</tip>
      <help>Cancels active target</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
      <arg name="breakActiveAction" type="boolean">
        <tip>if true also cancels active action</tip>
      </arg>
    </function>
    <function name="QuestReply">
      <tip>Sends a quest reply</tip>
      <help>Sends a quest reply</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
      <arg name="reply" type="string">
        <tip>command to be send as quest reply</tip>
      </arg>
    </function>
    <function name="LinkReply">
      <tip>Sends a link reply</tip>
      <help>Sends a link reply</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
      <arg name="reply" type="string">
        <tip>command to be send as link reply</tip>
      </arg>
    </function>
    <function name="ActivateSoulShot">
      <tip>Enable or disable autoshot use</tip>
      <help>Enable or disable autoshot use</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
      <arg name="itemId" type="int">
        <tip>shots itemId</tip>
      </arg>
      <arg name="enable" type="boolean">
        <tip>True if enable, False in disable</tip>
      </arg>
    </function>
    <function name="LogOut">
      <tip>Logout character</tip>
      <help>Logout character</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
    </function>
    <function name="GetItemFromPet">
      <tip>Moves item from pet to player</tip>
      <help>Moves item from pet to player</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
      <arg name="itemObjectId" type="int">
        <tip>objectId of item to move</tip>
      </arg>
      <arg name="count" type="int">
        <tip>count of items to move</tip>
      </arg>
    </function>
    <function name="GiveItemToPet">
      <tip>Moves item from player to pet</tip>
      <help>Moves item from player to pet</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
      <arg name="itemObjectId" type="int">
        <tip>objectId of item to move</tip>
      </arg>
      <arg name="count" type="int">
        <tip>count of items to move</tip>
      </arg>
    </function>
    <function name="UseItem">
      <tip>Uses a item</tip>
      <help>Uses a item</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
      <arg name="displayId" type="int">
        <tip>displayId of item to use</tip>
      </arg>
      <arg name="itemObjectId" type="int">
        <tip>objectId of item to use</tip>
      </arg>
    </function>
    <function name="UseItem">
      <tip>Uses a item</tip>
      <help>Uses a item</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
      <arg name="displayId" type="int">
        <tip>displayId of item to use</tip>
      </arg>
    </function>
    <function name="UsePetItem">
      <tip>Uses a item by pet</tip>
      <help>Uses a item by pet</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
      <arg name="displayId" type="int">
        <tip>displayId of item to use</tip>
      </arg>
      <arg name="itemObjectId" type="int">
        <tip>objectId of item to use</tip>
      </arg>
    </function>
    <function name="UsePetItem">
      <tip>Uses a item by pet</tip>
      <help>Uses a item by pet</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
      <arg name="displayId" type="int">
        <tip>displayId of item to use</tip>
      </arg>
    </function>
    <function name="UseSkillRaw">
      <tip>Uses a skill</tip>
      <help>Uses a skill</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
      <arg name="skillId" type="int">
        <tip>skillId to use</tip>
      </arg>
      <arg name="useCtrl" type="boolean">
        <tip>ctrl key down</tip>
      </arg>
      <arg name="useShift" type="boolean">
        <tip>shift key down</tip>
      </arg>
    </function>
    <function name="UseSkillRawGround">
      <tip>Uses a ground skill</tip>
      <help>Uses a ground skill</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
      <arg name="location" type="FVector">
        <tip>location where to use</tip>
      </arg>
      <arg name="skillId" type="int">
        <tip>skillId to use</tip>
      </arg>
      <arg name="useCtrl" type="boolean">
        <tip>ctrl key down</tip>
      </arg>
      <arg name="useShift" type="boolean">
        <tip>shift key down</tip>
      </arg>
    </function>
    <function name="Pickup">
      <tip>Pickup item</tip>
      <help>Pickup item</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
      <arg name="objectId" type="int">
        <tip>objectId of item to pickup</tip>
      </arg>
    </function>
    <function name="PetPickup">
      <tip>Pickup item by pet</tip>
      <help>Pickup item by pet</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
      <arg name="objectId" type="int">
        <tip>objectId of item to pickup</tip>
      </arg>
    </function>
    <function name="UseItemRaw">
      <tip>Uses a item</tip>
      <help>Uses a item</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
      <arg name="itemObjectId" type="int">
        <tip>objectId of item to use</tip>
      </arg>
    </function>
    <function name="UsePetItemRaw">
      <tip>Uses a item by pet</tip>
      <help>Uses a item by pet</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
      <arg name="itemObjectId" type="int">
        <tip>objectId of item to use</tip>
      </arg>
    </function>
    <function name="KickPartyMember">
      <tip>Kick player from party</tip>
      <help>Kick player from party</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
      <arg name="name" type="string">
        <tip>player name</tip>
      </arg>
    </function>
    <function name="ChangePartyLeader">
      <tip>Change party leader to new one</tip>
      <help>Change party leader to new one</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
      <arg name="name" type="string">
        <tip>player name</tip>
      </arg>
    </function>
    <function name="LeaveParty">
      <tip>Leaves a party</tip>
      <help>Leaves a party</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
    </function>
    <function name="RequestRestartPoint">
      <tip>Request go to resurect place</tip>
      <help>Request go to resurect place</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
      <arg name="place" type="L2TConfig.EResurrectPlace">
        <tip>resurect place</tip>
      </arg>
    </function>
    <function name="AcceptPartyInvite">
      <tip>Accepts or not party invite</tip>
      <help>Accepts or not party invite</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
      <arg name="accept" type="boolean">
        <tip>True for accept, false for not</tip>
      </arg>
    </function>
    <function name="ConfirmDlg">
      <tip>Request confirm dialog (trade)</tip>
      <help>Request confirm dialog (trade)</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
      <arg name="answer" type="boolean">
        <tip>true or false</tip>
      </arg>
      <arg name="requestorObjectId" type="int">
        <tip>who sends request</tip>
      </arg>
      <arg name="messageId" type="int">
        <tip>system message id of request</tip>
      </arg>
    </function>
    <function name="InviteToParty">
      <tip>Invite player to party</tip>
      <help>Invite player to party</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
      <arg name="name" type="string">
        <tip>player name</tip>
      </arg>
      <arg name="partyType" type="L2TConfig.EPartyType">
        <tip>type of party</tip>
      </arg>
    </function>
    <function name="TargetRaw">
      <tip>Sends request to target something</tip>
      <help>Sends request to target something</help>
      <arg name="objecId" type="int">
        <tip>objecId of future target</tip>
      </arg>
    </function>
    <function name="TalkRaw">
      <tip>Talk to target, command using same packet as pickup and old target</tip>
      <help>Talk to target, command using same packet as pickup and old target</help>
      <return type="boolean">
        <tip>true on success, false on fail</tip>
        <help>true on success, false on fail</help>
      </return>
      <arg name="objectId" type="int">
        <tip>target objectId</tip>
      </arg>
    </function>
    <function name="ClearTarget">
      <tip>Clears last target targeted by scripts</tip>
      <help>Clears last target targeted by scripts</help>
    </function>
    <function name="ClearTargets">
      <tip>Clears all saved targets</tip>
      <help>Clears all saved targets</help>
    </function>
    <function name="ShowToClient">
      <tip>Shows message on client chat</tip>
      <help>Shows message on client chat</help>
      <return type="boolean">
        <tip>true on success</tip>
        <help>true on success</help>
      </return>
      <arg name="from" type="string">
        <tip>From name</tip>
      </arg>
      <arg name="message" type="string">
        <tip>message to show</tip>
      </arg>
      <arg name="type" type="L2ChatType">
        <tip>message type</tip>
      </arg>
    </function>
    <function name="ShowToClient">
      <tip>Shows pm message on client chat</tip>
      <help>Shows pm message on client chat</help>
      <return type="boolean">
        <tip>true on success</tip>
        <help>true on success</help>
      </return>
      <arg name="from" type="string">
        <tip>From name</tip>
      </arg>
      <arg name="message" type="string">
        <tip>message to show</tip>
      </arg>
    </function>
    <function name="ShowHtml">
      <tip>Shows html dialog</tip>
      <help>Shows html dialog</help>
      <return type="boolean">
        <tip>true on success</tip>
        <help>true on success</help>
      </return>
      <arg name="html" type="string">
        <tip>html code</tip>
      </arg>
    </function>
    <function name="PlaySound">
      <tip>Plays a .wav file</tip>
      <help>Plays a .wav file</help>
      <return type="boolean">
        <tip>true on success</tip>
        <help>true on success</help>
      </return>
      <arg name="file" type="string">
        <tip>filename to play</tip>
      </arg>
    </function>
    <function name="ShowTrace">
      <tip>Shows a quest arrow to specyfic point</tip>
      <help>Shows a quest arrow to specyfic point</help>
      <return type="boolean">
        <tip>true on success</tip>
        <help>true on success</help>
      </return>
      <arg name="point" type="FVector">
        <tip>location to be pointed by arrow</tip>
      </arg>
    </function>
    <function name="ProcessCommand">
      <tip>Runs a internal L2Tower command. You don't have to use here chars like _.</tip>
      <help>Runs a internal L2Tower command. You don't have to use here chars like _.</help>
      <return type="boolean">
        <tip>true on success</tip>
        <help>true on success</help>
      </return>
      <arg name="command" type="string">
        <tip>command to run</tip>
      </arg>
    </function>
    <function name="TargetMe">
      <tip>Method targets me</tip>
      <help>Method targets me</help>
      <return type="boolean">
        <tip>True on success</tip>
        <help>True on success</help>
      </return>
    </function>
    <function name="TargetPet">
      <tip>Method targets our pet</tip>
      <help>Method targets our pet</help>
      <return type="boolean">
        <tip>True on success</tip>
        <help>True on success</help>
      </return>
    </function>
    <function name="Target">
      <tip>Method targets user by objectId</tip>
      <help>Method targets user by objectId</help>
      <return type="boolean">
        <tip>True on success</tip>
        <help>True on success</help>
      </return>
      <arg name="objectId" type="int">
        <tip>user objectId to be targeted</tip>
      </arg>
    </function>
    <function name="Target">
      <tip>Method targets user by object</tip>
      <help>Method targets user by object</help>
      <return type="boolean">
        <tip>True on success</tip>
        <help>True on success</help>
      </return>
      <arg name="object" type="User">
        <tip>user object to be targeted</tip>
      </arg>
    </function>
    <function name="Target">
      <tip>Method targets user by name</tip>
      <help>Method targets user by name</help>
      <return type="boolean">
        <tip>True on success</tip>
        <help>True on success</help>
      </return>
      <arg name="name" type="string">
        <tip>user name to be targeted</tip>
      </arg>
    </function>
    <function name="TargetNpc">
      <tip>Method targets user npc by name or id</tip>
      <help>Method targets user npc by name or id</help>
      <return type="boolean">
        <tip>True on success</tip>
        <help>True on success</help>
      </return>
      <arg name="name" type="string">
        <tip>user name to be targeted</tip>
      </arg>
      <arg name="displayId" type="int">
        <tip>user displayId to be targeted</tip>
      </arg>
    </function>
    <function name="MoveTo">
      <tip>Methods moves character to specyfic location</tip>
      <help>Methods moves character to specyfic location</help>
      <return type="boolean">
        <tip>True on success, False on timeout</tip>
        <help>True on success, False on timeout</help>
      </return>
      <arg name="location" type="FVector">
        <tip>Location that have to be achieved</tip>
      </arg>
      <arg name="distance" type="int">
        <tip>Maximum distance from location</tip>
      </arg>
    </function>
    <function name="MoveTo">
      <tip>Methods moves character to specyfic location</tip>
      <help>Methods moves character to specyfic location</help>
      <return type="boolean">
        <tip>True on success, False on timeout</tip>
        <help>True on success, False on timeout</help>
      </return>
      <arg name="X" type="int">
        <tip>X location</tip>
      </arg>
      <arg name="Y" type="int">
        <tip>Y location</tip>
      </arg>
      <arg name="Z" type="int">
        <tip>Z location</tip>
      </arg>
      <arg name="distance" type="int">
        <tip>Maximum distance from location</tip>
      </arg>
    </function>
    <function name="MoveToF">
      <tip>Methods moves character to specyfic location</tip>
      <help>Methods moves character to specyfic location</help>
      <return type="boolean">
        <tip>True on success, False on timeout</tip>
        <help>True on success, False on timeout</help>
      </return>
      <arg name="X" type="float">
        <tip>X location</tip>
      </arg>
      <arg name="Y" type="float">
        <tip>Y location</tip>
      </arg>
      <arg name="Z" type="float">
        <tip>Z location</tip>
      </arg>
      <arg name="distance" type="int">
        <tip>Maximum distance from location</tip>
      </arg>
    </function>
    <function name="UseSkill">
      <tip>Uses a skill and waits for finish</tip>
      <help>Uses a skill and waits for finish</help>
      <return type="boolean">
        <tip>True on success, False on timeout</tip>
        <help>True on success, False on timeout</help>
      </return>
      <arg name="skillId" type="int">
        <tip>Skill ID</tip>
      </arg>
      <arg name="useShift" type="boolean">
        <tip>true if shift key have to be down</tip>
      </arg>
      <arg name="useCtrl" type="boolean">
        <tip>true if ctrl key have to be down</tip>
      </arg>
    </function>
    <function name="UseSkill">
      <tip>Uses a skill and waits for finish</tip>
      <help>Uses a skill and waits for finish</help>
      <return type="boolean">
        <tip>True on success, False on timeout</tip>
        <help>True on success, False on timeout</help>
      </return>
      <arg name="skillId" type="int">
        <tip>Skill ID</tip>
      </arg>
    </function>
    <function name="Talk">
      <tip>Talks with NPC</tip>
      <help>Talks with NPC</help>
      <return type="boolean">
        <tip>True on success, False on timeout</tip>
        <help>True on success, False on timeout</help>
      </return>
    </function>
    <function name="Click">
      <tip>Clicks a dialog link</tip>
      <help>Clicks a dialog link</help>
      <return type="boolean">
        <tip>True on success, False on timeout</tip>
        <help>True on success, False on timeout</help>
      </return>
      <arg name="linkUrl" type="string">
        <tip>url of link to click</tip>
      </arg>
      <arg name="linkTitle" type="string">
        <tip>title of link to click</tip>
      </arg>
    </function>
    <function name="ClickAndWait">
      <tip>Clicks a dialog link and waits for new window</tip>
      <help>Clicks a dialog link and waits for new window</help>
      <return type="boolean">
        <tip>True on success, False on timeout</tip>
        <help>True on success, False on timeout</help>
      </return>
      <arg name="linkUrl" type="string">
        <tip>url of link to click</tip>
      </arg>
      <arg name="linkTitle" type="string">
        <tip>title of link to click</tip>
      </arg>
    </function>
    <function name="ClickLinkAndWait">
      <tip>Clicks a dialog link and waits for new window</tip>
      <help>Clicks a dialog link and waits for new window</help>
      <return type="boolean">
        <tip>True on success, False on timeout</tip>
        <help>True on success, False on timeout</help>
      </return>
      <arg name="linkUrl" type="string">
        <tip>url of link to click</tip>
      </arg>
    </function>
    <function name="ClickLink">
      <tip>Clicks a dialog link</tip>
      <help>Clicks a dialog link</help>
      <return type="boolean">
        <tip>True on success, False on timeout</tip>
        <help>True on success, False on timeout</help>
      </return>
      <arg name="linkUrl" type="string">
        <tip>url of link to click</tip>
      </arg>
    </function>
    <function name="ClickText">
      <tip>Clicks a dialog link</tip>
      <help>Clicks a dialog link</help>
      <return type="boolean">
        <tip>True on success, False on timeout</tip>
        <help>True on success, False on timeout</help>
      </return>
      <arg name="linkTitle" type="string">
        <tip>title of link to click</tip>
      </arg>
    </function>
    <function name="WaitForTeleport">
      <tip>Waits till character teleports</tip>
      <help>Waits till character teleports</help>
      <return type="boolean">
        <tip>True on success, False on timeout</tip>
        <help>True on success, False on timeout</help>
      </return>
    </function>
    <function name="WaitForNewDialog">
      <tip>Waits till new dialogs shows up</tip>
      <help>Waits till new dialogs shows up</help>
      <return type="boolean">
        <tip>True on success, False on timeout</tip>
        <help>True on success, False on timeout</help>
      </return>
    </function>
    <function name="Sleep">
      <tip>Sleeps for specyfic count of ms</tip>
      <help>Sleeps for specyfic count of ms</help>
      <arg name="arg1" type="uint">
        <tip />
      </arg>
    </function>
    <function name="L2Race2String">
      <tip>Convert race to string</tip>
      <help>Convert race to string</help>
      <return type="string">
        <tip>race as string</tip>
        <help>race as string</help>
      </return>
      <arg name="race" type="L2Race">
        <tip>L2Race</tip>
      </arg>
    </function>
    <function name="L2Class2String">
      <tip>Convert class to string</tip>
      <help>Convert class to string</help>
      <return type="string">
        <tip>class as string</tip>
        <help>class as string</help>
      </return>
      <arg name="class" type="L2Class">
        <tip>L2Class</tip>
      </arg>
    </function>
    <function name="GetDistanceFloat">
      <tip>Calculate distance between 2 points</tip>
      <help>Calculate distance between 2 points</help>
      <return type="float">
        <tip>distance</tip>
        <help>distance</help>
      </return>
      <arg name="X1" type="float">
        <tip>X1 point</tip>
      </arg>
      <arg name="Y1" type="float">
        <tip>Y1 point</tip>
      </arg>
      <arg name="Z1" type="float">
        <tip>Z1 point</tip>
      </arg>
      <arg name="X2" type="float">
        <tip>X2 point</tip>
      </arg>
      <arg name="Y2" type="float">
        <tip>Y2 point</tip>
      </arg>
      <arg name="Z2" type="float">
        <tip>Z2 point</tip>
      </arg>
    </function>
    <function name="GetDistanceInt">
      <tip>Calculate distance between 2 points</tip>
      <help>Calculate distance between 2 points</help>
      <return type="int">
        <tip>distance</tip>
        <help>distance</help>
      </return>
      <arg name="X1" type="int">
        <tip>X1 point</tip>
      </arg>
      <arg name="Y1" type="int">
        <tip>Y1 point</tip>
      </arg>
      <arg name="Z1" type="int">
        <tip>Z1 point</tip>
      </arg>
      <arg name="X2" type="int">
        <tip>X2 point</tip>
      </arg>
      <arg name="Y2" type="int">
        <tip>Y2 point</tip>
      </arg>
      <arg name="Z2" type="int">
        <tip>Z2 point</tip>
      </arg>
    </function>
    <function name="GetDistanceVector">
      <tip>Calculate distance between 2 points</tip>
      <help>Calculate distance between 2 points</help>
      <return type="float">
        <tip>distance</tip>
        <help>distance</help>
      </return>
      <arg name="location1" type="FVector">
        <tip>location 1</tip>
      </arg>
      <arg name="location2" type="FVector">
        <tip>location 2</tip>
      </arg>
    </function>
    <function name="GetTime">
      <tip>Method returns time used by L2Tower in ms</tip>
      <help>Method returns time used by L2Tower in ms</help>
      <return type="uint64">
        <tip>time used by L2Tower in ms</tip>
        <help>time used by L2Tower in ms</help>
      </return>
    </function>
    <function name="GetIGTime">
      <tip>Method returns game time encoded as float</tip>
      <help>Method returns game time encoded as float</help>
      <return type="float">
        <tip>game time encoded as float</tip>
        <help>game time encoded as float</help>
      </return>
    </function>
    <function name="GetDir">
      <tip>Method returns L2tower directory path</tip>
      <help>Method returns L2tower directory path</help>
      <return type="string">
        <tip>directory path</tip>
        <help>directory path</help>
      </return>
    </function>
    <function name="GetItemIcon">
      <tip>Returns item icon by item displayid</tip>
      <help>Returns item icon by item displayid</help>
      <return type="string">
        <tip>item icon</tip>
        <help>item icon</help>
      </return>
      <arg name="displayId" type="int">
        <tip>item displayId</tip>
      </arg>
    </function>
    <function name="GetAccountName">
      <tip>Method returns lineage 2 account name</tip>
      <help>Method returns lineage 2 account name</help>
      <return type="string">
        <tip>lineage 2 account name</tip>
        <help>lineage 2 account name</help>
      </return>
    </function>
    <function name="GetItemName">
      <tip>Returns item name by item displayid</tip>
      <help>Returns item name by item displayid</help>
      <return type="string">
        <tip>item name</tip>
        <help>item name</help>
      </return>
      <arg name="displayId" type="int">
        <tip>item displayId</tip>
      </arg>
    </function>
    <function name="IsLogedIn">
      <tip>Checks if user is loged-in</tip>
      <help>Checks if user is loged-in</help>
      <return type="boolean">
        <tip>True if loged-in</tip>
        <help>True if loged-in</help>
      </return>
    </function>
    <function name="IsPaused">
      <tip>Checks if bot is paused</tip>
      <help>Checks if bot is paused</help>
      <return type="boolean">
        <tip>True if bot is paused</tip>
        <help>True if bot is paused</help>
      </return>
    </function>
    <function name="SetDefaultTimeout">
      <tip>Sets default timeout for half of script functions.</tip>
      <help>Sets default timeout for half of script functions.</help>
      <arg name="timeout" type="int">
        <tip>timeout in ms</tip>
      </arg>
    </function>
    <function name="GetL2TowerVersion">
      <tip>Method returns L2Tower version</tip>
      <help>Method returns L2Tower version</help>
      <return type="string">
        <tip>L2Tower version</tip>
        <help>L2Tower version</help>
      </return>
    </function>
    <function name="GetGameProtocolVersion">
      <tip>Returns Lineage 2 game protocol</tip>
      <help>Returns Lineage 2 game protocol</help>
      <return type="int">
        <tip>Lineage 2 game protocol</tip>
        <help>Lineage 2 game protocol</help>
      </return>
    </function>
    <function name="GetCurrentZoneID">
      <tip>Returns zone id</tip>
      <help>Returns zone id</help>
      <return type="int">
        <tip>zone id</tip>
        <help>zone id</help>
      </return>
    </function>
    <function name="GetCurrentZoneName">
      <tip>Returns zone zone</tip>
      <help>Returns zone zone</help>
      <return type="string">
        <tip>zone name</tip>
        <help>zone name</help>
      </return>
    </function>
    <function name="GetZoneID">
      <tip>Returns zone id by location</tip>
      <help>Returns zone id by location</help>
      <return type="int">
        <tip>zone id</tip>
        <help>zone id</help>
      </return>
      <arg name="location" type="FVector">
        <tip>location</tip>
      </arg>
    </function>
    <function name="GetZoneName">
      <tip>Returns zone name by location</tip>
      <help>Returns zone name by location</help>
      <return type="string">
        <tip>zone name</tip>
        <help>zone name</help>
      </return>
      <arg name="location" type="FVector">
        <tip>location</tip>
      </arg>
    </function>
    <function name="SetPause">
      <tip>Sets L2Tower global pause to true or false</tip>
      <help>Sets L2Tower global pause to true or false</help>
      <arg name="value" type="boolean">
        <tip>true for turn on pause, false for off</tip>
      </arg>
    </function>
    <function name="GetCurrentProcessId">
      <tip>Returns current process id</tip>
      <help>Returns current process id</help>
      <return type="int">
        <tip>current process id</tip>
        <help>current process id</help>
      </return>
    </function>
    <function name="SetTargetManagerState">
      <tip>Allows to enable or disable internal L2Tower targeting manager</tip>
      <help>Allows to enable or disable internal L2Tower targeting manager</help>
      <arg name="enabled" type="boolean">
        <tip>True for enable (default), false for disable</tip>
      </arg>
    </function>
    <function name="GetHardwareKey">
      <tip>Returns L2Tower Hardware Id</tip>
      <help>Returns L2Tower Hardware Id</help>
      <return type="string">
        <tip>L2Tower Hardware Id</tip>
        <help>L2Tower Hardware Id</help>
      </return>
    </function>
    <function name="KillMe">
      <tip>Kills L2</tip>
      <help>Kills L2</help>
    </function>
    <function name="IsPremium">
      <tip>Checks if using premium license</tip>
      <help>Checks if using premium license</help>
      <return type="boolean">
        <tip>True if using premium license</tip>
        <help>True if using premium license</help>
      </return>
    </function>
    <function name="MessageBox">
      <tip>Shows message in window, useful for debuging plugins</tip>
      <help>Shows message in window, useful for debuging plugins</help>
      <arg name="message" type="string">
        <tip>Message to show</tip>
      </arg>
    </function>
    <module name="L2TConfig">
      <tip>Module with all serializable configuration</tip>
      <help>Module with all serializable configuration</help>
      <enum name="EPartyType">
        <tip>Party type enum</tip>
        <help>Party type enum</help>
        <item name="PARTY_TYPE_BY_TURN" value="3">
          <tip>PARTY_TYPE_BY_TURN party type enum, id: 3</tip>
          <help>PARTY_TYPE_BY_TURN party type enum, id: 3</help>
        </item>
        <item name="PARTY_TYPE_BY_TURN_INC_SPOIL" value="4">
          <tip>PARTY_TYPE_BY_TURN_INC_SPOIL party type enum, id: 4</tip>
          <help>PARTY_TYPE_BY_TURN_INC_SPOIL party type enum, id: 4</help>
        </item>
        <item name="PARTY_TYPE_FINDER_KEEPERS" value="0">
          <tip>PARTY_TYPE_FINDER_KEEPERS party type enum, id: 0</tip>
          <help>PARTY_TYPE_FINDER_KEEPERS party type enum, id: 0</help>
        </item>
        <item name="PARTY_TYPE_RANDOM" value="1">
          <tip>PARTY_TYPE_RANDOM party type enum, id: 1</tip>
          <help>PARTY_TYPE_RANDOM party type enum, id: 1</help>
        </item>
        <item name="PARTY_TYPE_RANDOM_INC_SPOIL" value="2">
          <tip>PARTY_TYPE_RANDOM_INC_SPOIL party type enum, id: 2</tip>
          <help>PARTY_TYPE_RANDOM_INC_SPOIL party type enum, id: 2</help>
        </item>
      </enum>
      <enum name="EResurrectPlace">
        <tip>Resurrect place enum</tip>
        <help>Resurrect place enum</help>
        <item name="eNone" value="0">
          <tip>eNone resurrect place enum, id: 0</tip>
          <help>eNone resurrect place enum, id: 0</help>
        </item>
        <item name="eToBattleCamp" value="64">
          <tip>eToBattleCamp resurrect place enum, id: 64</tip>
          <help>eToBattleCamp resurrect place enum, id: 64</help>
        </item>
        <item name="eToCastle" value="16">
          <tip>eToCastle resurrect place enum, id: 16</tip>
          <help>eToCastle resurrect place enum, id: 16</help>
        </item>
        <item name="eToClanHall" value="4">
          <tip>eToClanHall resurrect place enum, id: 4</tip>
          <help>eToClanHall resurrect place enum, id: 4</help>
        </item>
        <item name="eToFortress" value="8">
          <tip>eToFortress resurrect place enum, id: 8</tip>
          <help>eToFortress resurrect place enum, id: 8</help>
        </item>
        <item name="eToVillage" value="2">
          <tip>eToVillage resurrect place enum, id: 2</tip>
          <help>eToVillage resurrect place enum, id: 2</help>
        </item>
        <item name="eUseFeather" value="32">
          <tip>eUseFeather resurrect place enum, id: 32</tip>
          <help>eUseFeather resurrect place enum, id: 32</help>
        </item>
      </enum>
    </module>
  </package>
  <package name="L2Tower Premium API">
    <tip>Set of L2Tower functions and classes available only for premium users.</tip>
    <help>Set of L2Tower functions and classes available only for premium users.</help>
    <enum name="EShopType">
      <tip>Shop type enum</tip>
      <help>Shop type enum</help>
      <item name="SHOP_BUY" value="2">
        <tip>SHOP_BUY shop type enum, id: 2</tip>
        <help>SHOP_BUY shop type enum, id: 2</help>
      </item>
      <item name="SHOP_MANUFACTURE" value="3">
        <tip>SHOP_MANUFACTURE shop type enum, id: 3</tip>
        <help>SHOP_MANUFACTURE shop type enum, id: 3</help>
      </item>
      <item name="SHOP_SELL" value="1">
        <tip>SHOP_SELL shop type enum, id: 1</tip>
        <help>SHOP_SELL shop type enum, id: 1</help>
      </item>
      <item name="SHOP_SELL_PACKAGE" value="4">
        <tip>SHOP_SELL_PACKAGE shop type enum, id: 4</tip>
        <help>SHOP_SELL_PACKAGE shop type enum, id: 4</help>
      </item>
    </enum>
    <class name="MobKillCountData" creatable="false">
      <tip>Stores data on quest-related monster kills</tip>
      <help>Stores data on quest-related monster kills</help>
      <property type="int" name="NPC_ID" readonly="true">
        <tip>Npc Id</tip>
        <help>Npc Id</help>
      </property>
      <property type="int" name="KilledMonstersCount" readonly="true">
        <tip>Number of monsters killed</tip>
        <help>Number of monsters killed</help>
      </property>
      <property type="int" name="QuestID" readonly="true">
        <tip>Quest Id</tip>
        <help>Quest Id</help>
      </property>
      <property type="int" name="Type" readonly="true">
        <tip>Type</tip>
        <help>Type</help>
      </property>
    </class>
    <class name="QuestStatus" creatable="false">
      <tip>Collection of methods to manage and get the status of your active quests.</tip>
      <help>Collection of methods to manage and get the status of your active quests.</help>
      <method name="GotThisQuest">
        <tip>Returns true if the user currently has the quest.</tip>
        <help>Returns true if the user currently has the quest.</help>
        <return type="boolean">
          <tip>True/False</tip>
          <help>True/False</help>
        </return>
        <arg name="id" type="int">
          <tip>Quest Id</tip>
        </arg>
      </method>
      <method name="ShowQuestList">
        <tip>Displays a list of active quests.</tip>
        <help>Displays a list of active quests.</help>
      </method>
      <method name="GetQuestItemCount">
        <tip>Returns the quantity of quest items</tip>
        <help>Returns the quantity of quest items</help>
        <return type="int64">
          <tip>Integer, Number of quest items</tip>
          <help>Integer, Number of quest items</help>
        </return>
        <arg name="nameId" type="int">
          <tip>Quest Item Display Id</tip>
        </arg>
      </method>
      <method name="GetQuestProgress">
        <tip>Returns the state of the specified quest</tip>
        <help>Returns the state of the specified quest</help>
        <return type="int">
          <tip>Integer, Current state of the quest</tip>
          <help>Integer, Current state of the quest</help>
        </return>
        <arg name="ID" type="int">
          <tip>Quest Id</tip>
        </arg>
      </method>
      <method name="DeleteQuest">
        <tip>Aborts the specified quest. Returns true on success.</tip>
        <help>Aborts the specified quest. Returns true on success.</help>
        <return type="boolean">
          <tip>True/False</tip>
          <help>True/False</help>
        </return>
        <arg name="ID" type="int">
          <tip>Quest Id</tip>
        </arg>
      </method>
      <method name="RefreshQuestData">
        <tip>Returns true if packet was sent. Use only for GetKillMonsterData.</tip>
        <help>Returns true if packet was sent. Use only for GetKillMonsterData.</help>
        <return type="boolean">
          <tip>True/False</tip>
          <help>True/False</help>
        </return>
        <arg name="id" type="int">
          <tip>Quest Id</tip>
        </arg>
      </method>
      <method name="GetKillMonsterDataSize">
        <tip>Returns the number of objects in the list.</tip>
        <help>Returns the number of objects in the list.</help>
        <return type="int">
          <tip>Integer, Number of objects in the list.</tip>
          <help>Integer, Number of objects in the list.</help>
        </return>
      </method>
      <method name="GetKillMonsterDataByIndex">
        <tip>Gets the MobKillCount object from the list.</tip>
        <help>Gets the MobKillCount object from the list.</help>
        <return type="MobKillCountData">
          <tip>MobKillCount</tip>
          <help>MobKillCount</help>
        </return>
        <arg name="index" type="int">
          <tip>Index/Key of MobKillCount object in the data list.</tip>
        </arg>
      </method>
    </class>
    <class name="Warehouse" creatable="false">
      <tip>Collection of methods for making deposits and withdrawls from the warehouse.</tip>
      <help>Collection of methods for making deposits and withdrawls from the warehouse.</help>
      <method name="AddItem">
        <tip>Add an item to be withdrawn from or deposited into the warehouse.</tip>
        <help>Add an item to be withdrawn from or deposited into the warehouse.</help>
        <arg name="ObjectID" type="int">
          <tip>Integer, Object Id of item to be deposited or withdrawn</tip>
        </arg>
        <arg name="Count" type="int">
          <tip>Integer, Number of the specified object to deposit or withdraw</tip>
        </arg>
      </method>
      <method name="Clear">
        <tip>Clear to list of items to be deposited or withdrawn</tip>
        <help>Clear to list of items to be deposited or withdrawn</help>
      </method>
      <method name="GetStatus">
        <tip>Returns true when the warehouse window is open.</tip>
        <help>Returns true when the warehouse window is open.</help>
        <return type="boolean">
          <tip>True/False, True when the warehouse window is open</tip>
          <help>True/False, True when the warehouse window is open</help>
        </return>
      </method>
      <method name="WithdrawItems">
        <tip>Withdraw the listed items from the warehouse.</tip>
        <help>Withdraw the listed items from the warehouse.</help>
      </method>
      <method name="DepositItems">
        <tip>Deposit the listed items into the warehouse.</tip>
        <help>Deposit the listed items into the warehouse.</help>
      </method>
    </class>
    <class name="NPCExchange" creatable="false">
      <tip>Collection of methods for purchasing from a two-column "Multi-Sell" store.</tip>
      <help>Collection of methods for purchasing from a two-column "Multi-Sell" store.</help>
      <method name="GetStatus">
        <tip>Returns true when the Multi-Sell window is open.</tip>
        <help>Returns true when the Multi-Sell window is open.</help>
        <return type="boolean">
          <tip>True/False, Returns true when the Multi-Sell window is open</tip>
          <help>True/False, Returns true when the Multi-Sell window is open</help>
        </return>
      </method>
      <method name="RequestMultiSell">
        <tip>Purchases x number of items specified by the displayId.</tip>
        <help>Purchases x number of items specified by the displayId.</help>
        <return type="boolean">
          <tip>True/False, Returns true on success</tip>
          <help>True/False, Returns true on success</help>
        </return>
        <arg name="displayId" type="int">
          <tip>Integer, Display Id of the item to purchase</tip>
        </arg>
        <arg name="count" type="int">
          <tip>Integer, Specifies the number of items to purchase</tip>
        </arg>
      </method>
      <method name="RequestMultiSellByIndex">
        <tip>Purchases x number of items specified by the index.</tip>
        <help>Purchases x number of items specified by the index.</help>
        <return type="boolean">
          <tip>True/False, Returns true on success</tip>
          <help>True/False, Returns true on success</help>
        </return>
        <arg name="index" type="int">
          <tip>Integer, Identifies which item to purchase
NOTE: The index starts at 0, not 1.</tip>
        </arg>
        <arg name="count" type="int">
          <tip>Integer, Specifies the number of items to purchase</tip>
        </arg>
      </method>
      <method name="Clear">
        <tip>Clears the NPCExchangeManager's status</tip>
        <help>Clears the NPCExchangeManager's status</help>
      </method>
    </class>
    <class name="NormalNPCExchange" creatable="false">
      <tip>Class for manage a normal shop window</tip>
      <help>Class for manage a normal shop window</help>
      <method name="GetStatus">
        <tip>Returns true when the stores window is open.</tip>
        <help>Returns true when the stores window is open.</help>
        <return type="boolean">
          <tip>True/False, Returns true when the stores window is open</tip>
          <help>True/False, Returns true when the stores window is open</help>
        </return>
      </method>
      <method name="RequestSellItems">
        <tip>Attempts to sell the item(s) listed.</tip>
        <help>Attempts to sell the item(s) listed.</help>
        <return type="boolean">
          <tip>True/False, Returns true on success</tip>
          <help>True/False, Returns true on success</help>
        </return>
      </method>
      <method name="RequestBuyItems">
        <tip>Attempts to buy the item listed.</tip>
        <help>Attempts to buy the item listed.</help>
        <return type="boolean">
          <tip>True/False, Returns true on success</tip>
          <help>True/False, Returns true on success</help>
        </return>
      </method>
      <method name="AddSellItemByDisID">
        <tip>Add items to the list of items to be sold by their display id</tip>
        <help>Add items to the list of items to be sold by their display id</help>
        <return type="boolean">
          <tip>True/False, Returns true on success</tip>
          <help>True/False, Returns true on success</help>
        </return>
        <arg name="displayId" type="int">
          <tip>Display Id of item to sell</tip>
        </arg>
        <arg name="count" type="int">
          <tip>Number of items to sell</tip>
        </arg>
      </method>
      <method name="AddSellItemByObjID">
        <tip>Add items to the list of items to be sold by their object id</tip>
        <help>Add items to the list of items to be sold by their object id</help>
        <return type="boolean">
          <tip>True/False, Returns true on success</tip>
          <help>True/False, Returns true on success</help>
        </return>
        <arg name="objectId" type="int">
          <tip>Object Id of item to sell</tip>
        </arg>
        <arg name="count" type="int">
          <tip>Number of items to sell</tip>
        </arg>
      </method>
      <method name="AddBuyByID">
        <tip>Add items to the list of items to be bought by their display id</tip>
        <help>Add items to the list of items to be bought by their display id</help>
        <return type="boolean">
          <tip>True/False, Returns true on success</tip>
          <help>True/False, Returns true on success</help>
        </return>
        <arg name="displayId" type="int">
          <tip>Display Id of item to buy</tip>
        </arg>
        <arg name="count" type="int">
          <tip>Number of items to buy</tip>
        </arg>
      </method>
      <method name="RequestShopUIClose">
        <tip>Closes the store's window</tip>
        <help>Closes the store's window</help>
      </method>
      <method name="Clear">
        <tip>Clears the NormalNPCExchangeManager's status</tip>
        <help>Clears the NormalNPCExchangeManager's status</help>
      </method>
    </class>
    <class name="Shop" creatable="false">
      <tip>Collection of methods for setting up a private store.</tip>
      <help>Collection of methods for setting up a private store.</help>
      <method name="AddItem">
        <tip>Add an item to the private store.</tip>
        <help>Add an item to the private store.</help>
        <arg name="objectId" type="int">
          <tip>Object Id of the item to add</tip>
        </arg>
        <arg name="count" type="int">
          <tip>Number of items to add</tip>
        </arg>
        <arg name="price" type="int">
          <tip>Cost per item</tip>
        </arg>
      </method>
      <method name="MakeShop">
        <tip>Create the private store.</tip>
        <help>Create the private store.</help>
      </method>
      <method name="SetShopType">
        <tip>Set the type of private store.</tip>
        <help>Set the type of private store.</help>
        <arg name="storeType" type="EShopType">
          <tip>Set the type of private store.
NOTE: See (enum) L2ShopType</tip>
        </arg>
      </method>
      <method name="AddRecipe">
        <tip>Add a recipe to the private craft shop.</tip>
        <help>Add a recipe to the private craft shop.</help>
        <arg name="recipeId" type="int">
          <tip>Recipe Id of the recipe to add
NOTE: The recipe id is different from the object and display id.</tip>
        </arg>
        <arg name="price" type="int">
          <tip>Price to charge for the crafting attempt</tip>
        </arg>
      </method>
      <method name="SetTitle">
        <tip>Set the private store's title.</tip>
        <help>Set the private store's title.</help>
        <arg name="title" type="string">
          <tip>Title of the private store</tip>
        </arg>
      </method>
      <method name="Clear">
        <tip>Clear/Reset the private store's settings.</tip>
        <help>Clear/Reset the private store's settings.</help>
      </method>
      <method name="StandIfHaveShop">
        <tip>Closes an existing private store, if one exists.</tip>
        <help>Closes an existing private store, if one exists.</help>
      </method>
      <method name="AddItemByID">
        <tip>Add an item to the private store.</tip>
        <help>Add an item to the private store.</help>
        <arg name="displayId" type="int">
          <tip>Display Id of the item to add</tip>
        </arg>
        <arg name="count" type="int">
          <tip>Number of items to add</tip>
        </arg>
        <arg name="price" type="int">
          <tip>Cost per item</tip>
        </arg>
      </method>
    </class>
    <class name="PacketBuilder">
      <tip>PacketBuilder class</tip>
      <help>PacketBuilder class</help>
      <method name="Size">
        <tip>Method returns size of packet</tip>
        <help>Method returns size of packet</help>
        <return type="int">
          <tip>size of packet</tip>
          <help>size of packet</help>
        </return>
      </method>
      <method name="Clear">
        <tip>Method clears packet</tip>
        <help>Method clears packet</help>
      </method>
      <method name="AppendInt">
        <tip>Method append unsigned int to packet</tip>
        <help>Method append unsigned int to packet</help>
        <return type="boolean">
          <tip>success</tip>
          <help>success</help>
        </return>
        <arg name="value" type="uint64">
          <tip>int value</tip>
        </arg>
        <arg name="size" type="int">
          <tip>int size</tip>
        </arg>
      </method>
      <method name="AppendSignedInt">
        <tip>Method append int to packet</tip>
        <help>Method append int to packet</help>
        <return type="boolean">
          <tip>success</tip>
          <help>success</help>
        </return>
        <arg name="value" type="int64">
          <tip>int value</tip>
        </arg>
        <arg name="size" type="int">
          <tip>int size</tip>
        </arg>
      </method>
      <method name="AppendString">
        <tip>Method append string to packet</tip>
        <help>Method append string to packet</help>
        <arg name="value" type="string">
          <tip>string value</tip>
        </arg>
      </method>
      <method name="AppendDouble">
        <tip>Method append double to packet</tip>
        <help>Method append double to packet</help>
        <arg name="value" type="float">
          <tip>double value</tip>
        </arg>
      </method>
      <method name="AppendFloat">
        <tip>Method append float to packet</tip>
        <help>Method append float to packet</help>
        <arg name="value" type="float">
          <tip>float value</tip>
        </arg>
      </method>
      <method name="AppendDataFromHexString">
        <tip>Method append hex string to packet</tip>
        <help>Method append hex string to packet</help>
        <return type="boolean">
          <tip />
        </return>
        <arg name="value" type="string">
          <tip>hex string value</tip>
        </arg>
      </method>
      <constructor>
        <tip>Default class constructor</tip>
        <help>Default class constructor</help>
      </constructor>
    </class>
    <function name="SetLineageWindowText">
      <tip>Sets current lineage 2 window caption</tip>
      <help>Sets current lineage 2 window caption</help>
      <arg name="Text" type="string">
        <tip>Text</tip>
      </arg>
    </function>
    <function name="GetShopManager">
      <tip>Method return shop manager instance</tip>
      <help>Method return shop manager instance</help>
      <return type="Shop">
        <tip>ShopManager instance</tip>
        <help>ShopManager instance</help>
      </return>
    </function>
    <function name="GetQuestManager">
      <tip>Method return quest manager instance</tip>
      <help>Method return quest manager instance</help>
      <return type="QuestStatus">
        <tip>QuestManager instance</tip>
        <help>QuestManager instance</help>
      </return>
    </function>
    <function name="GetNPCExchangeManager">
      <tip>Method return npc exchange manager instance</tip>
      <help>Method return npc exchange manager instance</help>
      <return type="NPCExchange">
        <tip>NPCExchangeManager instance</tip>
        <help>NPCExchangeManager instance</help>
      </return>
    </function>
    <function name="GetNormalNPCExchangeManager">
      <tip>Method return normal npc exchange manager instance</tip>
      <help>Method return normal npc exchange manager instance</help>
      <return type="NormalNPCExchange">
        <tip>NormalNPCExchangeManager instance</tip>
        <help>NormalNPCExchangeManager instance</help>
      </return>
    </function>
    <function name="GetWarehouseManager">
      <tip>Method return warehouse manager instance</tip>
      <help>Method return warehouse manager instance</help>
      <return type="Warehouse">
        <tip>WarehouseManager instance</tip>
        <help>WarehouseManager instance</help>
      </return>
    </function>
    <function name="CrystallizeItem">
      <tip>Method request a item crystalization</tip>
      <help>Method request a item crystalization</help>
      <return type="boolean">
        <tip>True on success, False on fail</tip>
        <help>True on success, False on fail</help>
      </return>
      <arg name="objectId" type="int">
        <tip>item object id</tip>
      </arg>
    </function>
    <function name="EstimateCrystallizeItem">
      <tip>Method request a item estimate before crystalization</tip>
      <help>Method request a item estimate before crystalization</help>
      <return type="boolean">
        <tip>True on success, False on fail</tip>
        <help>True on success, False on fail</help>
      </return>
      <arg name="objectId" type="int">
        <tip>item object id</tip>
      </arg>
    </function>
    <function name="Say2">
      <tip>Low level access to Say2 packet</tip>
      <help>Low level access to Say2 packet</help>
      <return type="boolean">
        <tip>True on success, False on fail</tip>
        <help>True on success, False on fail</help>
      </return>
      <arg name="chatType" type="L2ChatType">
        <tip>chat type what have to be used</tip>
      </arg>
      <arg name="message" type="string">
        <tip>message to send</tip>
      </arg>
      <arg name="nick" type="string">
        <tip />
      </arg>
    </function>
    <function name="DeleteMyBuff">
      <tip>Method request a my buff removal</tip>
      <help>Method request a my buff removal</help>
      <return type="boolean">
        <tip>True on success, False on fail</tip>
        <help>True on success, False on fail</help>
      </return>
      <arg name="skillId" type="int">
        <tip>skill id of buff</tip>
      </arg>
    </function>
    <function name="DeleteItem">
      <tip>Method request a item removal</tip>
      <help>Method request a item removal</help>
      <return type="boolean">
        <tip>True on success, False on fail</tip>
        <help>True on success, False on fail</help>
      </return>
      <arg name="itemObjectId" type="int">
        <tip>object id of item</tip>
      </arg>
      <arg name="count" type="int">
        <tip>item count</tip>
      </arg>
    </function>
    <function name="CraftItem">
      <tip>Method request item craft</tip>
      <help>Method request item craft</help>
      <return type="boolean">
        <tip>True on success, False on fail</tip>
        <help>True on success, False on fail</help>
      </return>
      <arg name="recipleId" type="int">
        <tip>id of reciple</tip>
      </arg>
    </function>
    <function name="ShowArrow">
      <tip>Method request show a quest arrow</tip>
      <help>Method request show a quest arrow</help>
      <return type="boolean">
        <tip>True on success, False on fail</tip>
        <help>True on success, False on fail</help>
      </return>
      <arg name="location" type="FVector">
        <tip>location to be pointed by arrow</tip>
      </arg>
    </function>
    <function name="ShowOnScreen">
      <tip>Method shows on screen message</tip>
      <help>Method shows on screen message</help>
      <sample>ShowOnScreen(3,4000,1,"Hello from script");</sample>
      <return type="boolean">
        <tip>True on success, False on fail</tip>
        <help>True on success, False on fail</help>
      </return>
      <arg name="position" type="int">
        <tip>position on screen</tip>
      </arg>
      <arg name="time" type="int">
        <tip>time in ms</tip>
      </arg>
      <arg name="fontSize" type="int">
        <tip>font size: 0-small, 1-big</tip>
      </arg>
      <arg name="arg4" type="string">
        <tip />
      </arg>
    </function>
    <function name="SetMyTitle">
      <tip>Function allow to set our title, but shoulnd be used if user can't change own title..
You will get some message in that case that you not allowed to do that, same as typing /nick title.</tip>
      <help>Function allow to set our title, but shoulnd be used if user can't change own title..
You will get some message in that case that you not allowed to do that, same as typing /nick title.</help>
      <return type="boolean">
        <tip>True on success, False on fail</tip>
        <help>True on success, False on fail</help>
      </return>
      <arg name="title" type="string">
        <tip>user title</tip>
      </arg>
    </function>
    <function name="LearnAllSkills">
      <tip>Function request learn all possible skills - only GOD.</tip>
      <help>Function request learn all possible skills - only GOD.</help>
    </function>
    <function name="ClientExec">
      <tip>Using this feature you can setup some things like zoom-patch, disable fog.</tip>
      <help>Using this feature you can setup some things like zoom-patch, disable fog.</help>
      <sample>ClientExec("set Engine.LineagePlayerController MaxZoomingDist 65535");</sample>
      <arg name="command" type="string">
        <tip>client command to be exec</tip>
      </arg>
    </function>
    <function name="BlockLearnSkill">
      <tip>Method block learning of one skill</tip>
      <help>Method block learning of one skill</help>
      <arg name="skillId" type="int">
        <tip>skill id to be blocked</tip>
      </arg>
    </function>
    <function name="LearnOneSkill">
      <tip>Method request learn one skill</tip>
      <help>Method request learn one skill</help>
      <arg name="skillId" type="int">
        <tip>skill id to be learned</tip>
      </arg>
    </function>
    <function name="PacketBlock">
      <tip>Blocks packets with specyfic id's</tip>
      <help> Blocks packets with specyfic id's
IDs:
DiePacket 00
RevivePacket 01
AttackOutofRangePacket 02
AttackinCoolTimePacket 03
AttackDeadTargetPacket 04
SpawnItemPacket 05
SellListPacket 06
BuyListPacket 07
DeleteObjectPacket 08
CharacterSelectionInfoPacket 09
LoginFailPacket 0a
CharacterSelectedPacket 0b
NpcInfoPacket 0c
NewCharacterSuccessPacket 0d
NewCharacterFailPacket 0e
CharacterCreateSuccessPacket 0f
CharacterCreateFailPacket 10
ItemListPacket 11
SunRisePacket 12
SunSetPacket 13
TradeStartPacket 14
TradeStartOkPacket 15
DropItemPacket 16
GetItemPacket 17
StatusUpdatePacket 18
NpcHtmlMessagePacket 19
TradeOwnAddPacket 1a
TradeOtherAddPacket 1b
TradeDonePacket 1c
CharacterDeleteSuccessPacket 1d
CharacterDeleteFailPacket 1e
ActionFailPacket 1f
SeverClosePacket 20
InventoryUpdatePacket 21
TeleportToLocationPacket 22
TargetSelectedPacket 23
TargetUnselectedPacket 24
AutoAttackStartPacket 25
AutoAttackStopPacket 26
SocialActionPacket 27
ChangeMoveTypePacket 28
ChangeWaitTypePacket 29
ManagePledgePowerPacket 2a
CreatePledgePacket 2b
AskJoinPledgePacket 2c
JoinPledgePacket 2d
VersionCheckPacket 2e
MTLPacket 2f
NSPacket 30
CIPacket 31
UIPacket 32
AttackPacket 33
WithdrawalPledgePacket 34
OustPledgeMemberPacket 35
SetOustPledgeMemberPacket 36
DismissPledgePacket 37
SetDismissPledgePacket 38
AskJoinPartyPacket 39
JoinPartyPacket 3a
WithdrawalPartyPacket 3b
OustPartyMemberPacket 3c
SetOustPartyMemberPacket 3d
DismissPartyPacket 3e
SetDismissPartyPacket 3f
MagicAndSkillList 40
WareHouseDepositListPacket 41
WareHouseWithdrawListPacket 42
WareHouseDonePacket 43
ShortCutRegisterPacket 44
ShortCutInitPacket 45
ShortCutDeletePacket 46
StopMovePacket 47
MagicSkillUse 48
MagicSkillCanceled 49
SayPacket2 4a
EquipUpdatePacket 4b
DoorInfoPacket 4c
DoorStatusUpdatePacket 4d
PartySmallWindowAllPacket 4e
PartySmallWindowAddPacket 4f
PartySmallWindowDeleteAllPacket 50
PartySmallWindowDeletePacket 51
PartySmallWindowUpdatePacket 52
TradePressOwnOkPacket 53
MagicSkillLaunchedPacket 54
FriendAddRequestResult 55
FriendAdd 56
FriendRemove 57
FriendList 58
FriendStatus 59
PledgeShowMemberListAllPacket 5a
PledgeShowMemberListUpdatePacket 5b
PledgeShowMemberListAddPacket 5c
PledgeShowMemberListDeletePacket 5d
MagicListPacket 5e
SkillListPacket 5f
VehicleInfoPacket 60
FinishRotatingPacket 61
SystemMessagePacket 62
StartPledgeWarPacket 63
ReplyStartPledgeWarPacket 64
StopPledgeWarPacket 65
ReplyStopPledgeWarPacket 66
SurrenderPledgeWarPacket 67
ReplySurrenderPledgeWarPacket 68
SetPledgeCrestPacket 69
PledgeCrestPacket 6a
SetupGaugePacket 6b
VehicleDeparturePacket 6c
VehicleCheckLocationPacket 6d
GetOnVehiclePacket 6e
GetOffVehiclePacket 6f
TradeRequestPacket 70
RestartResponsePacket 71
MoveToPawnPacket 72
SSQInfoPacket 73
GameGuardQueryPacket 74
L2FriendListPacket 75
L2FriendPacket 76
L2FriendStatusPacket 77
L2FriendSayPacket 78
ValidateLocationPacket 79
StartRotatingPacket 7a
ShowBoardPacket 7b
ChooseInventoryItemPacket 7c
DummyPacket 7d
MoveToLocationInVehiclePacket 7e
StopMoveInVehiclePacket 7f
ValidateLocationInVehiclePacket 80
TradeUpdatePacket 81
TradePressOtherOkPacket 82
FriendAddRequest 83
LogOutOkPacket 84
AbnormalStatusUpdatePacket 85
QuestListPacket 86
EnchantResultPacket 87
PledgeShowMemberListDeleteAllPacket 88
PledgeInfoPacket 89
PledgeExtendedInfoPacket 8a
SurrenderPersonallyPacket 8b
RidePacket 8c
DummyPacket 8d
PledgeShowInfoUpdatePacket 8e
ClientActionPacket 8f
AcquireSkillListPacket 90
AcquireSkillInfoPacket 91
ServerObjectInfoPacket 92
GMHidePacket 93
AcquireSkillDonePacket 94
GMViewCharacterInfoPacket 95
GMViewPledgeInfoPacket 96
GMViewSkillInfoPacket 97
GMViewMagicInfoPacket 98
GMViewQuestInfoPacket 99
GMViewItemListPacket 9a
GMViewWarehouseWithdrawListPacket 9b
ListPartyWatingPacket 9c
PartyRoomInfoPacket 9d
PlaySoundPacket 9e
StaticObjectPacket 9f
PrivateStoreManageList a0
PrivateStoreList a1
PrivateStoreMsg a2
ShowMinimapPacket a3
ReviveRequestPacket a4
AbnormalVisualEffectPacket a5
TutorialShowHtmlPacket a6
TutorialShowQuestionMarkPacket a7
TutorialEnableClientEventPacket a8
TutorialCloseHtmlPacket a9
ShowRadarPacket aa
WithdrawAlliancePacket ab
OustAllianceMemberPledgePacket ac
DismissAlliancePacket ad
SetAllianceCrestPacket ae
AllianceCrestPacket af
ServerCloseSocketPacket b0
PetStatusShowPacket b1
PetInfoPacket b2
PetItemListPacket b3
PetInventoryUpdatePacket b4
AllianceInfoPacket b5
PetStatusUpdatePacket b6
PetDeletePacket b7
DeleteRadarPacket b8
MyTargetSelectedPacket b9
PartyMemberPositionPacket ba
AskJoinAlliancePacket bb
JoinAlliancePacket bc
PrivateStoreBuyManageList bd
PrivateStoreBuyList be
PrivateStoreBuyMsg bf
VehicleStartPacket c0
RequestTimeCheckPacket c1
StartAllianceWarPacket c2
ReplyStartAllianceWarPacket c3
StopAllianceWarPacket c4
ReplyStopAllianceWarPacket c5
SurrenderAllianceWarPacket c6
SkillCoolTimePacket c7
PackageToListPacket c8
CastleSiegeInfoPacket c9
CastleSiegeAttackerListPacket ca
CastleSiegeDefenderListPacket cb
NickNameChangedPacket cc
PledgeStatusChangedPacket cd
RelationChangedPacket ce
EventTriggerPacket cf
MultiSellListPacket d0
SetSummonRemainTimePacket d1
PackageSendableListPacket d2
EarthQuakePacket d3
FlyToLocationPacket d4
BlockListPacket d5
SpecialCameraPacket d6
NormalCameraPacket d7
SkillRemainSecPacket d8
NetPingPacket d9
DicePacket da
SnoopPacket db
RecipeBookItemListPacket dc
RecipeItemMakeInfoPacket dd
RecipeShopManageListPacket de
RecipeShopSellListPacket df
RecipeShopItemInfoPacket e0
RecipeShopMsgPacket e1
ShowCalcPacket e2
MonRaceInfoPacket e3
HennaItemInfoPacket e4
HennaInfoPacket e5
HennaUnequipListPacket e6
HennaUnequipInfoPacket e7
MacroListPacket e8
BuyListSeedPacket e9
ShowTownMapPacket ea
ObserverStartPacket eb
ObserverEndPacket ec
ChairSitPacket ed
HennaEquipListPacket ee
SellListProcurePacket ef
GMHennaInfoPacket f0
RadarControlPacket f1
ClientSetTimePacket f2
ConfirmDlgPacket f3
PartySpelledPacket f4
ShopPreviewListPacket f5
ShopPreviewInfoPacket f6
CameraModePacket f7
ShowXMasSealPacket f8
EtcStatusUpdatePacket f9
ShortBuffStatusUpdatePacket fa
SSQStatusPacket fb
PetitionVotePacket fc
AgitDecoInfoPacket fd
DummyPacket fe
ExDummyPacket fe:00
ExRegenMaxPacket fe:01
ExEventMatchUserInfoPacket fe:02
ExColosseumFenceInfoPacket fe:03
ExEventMatchSpelledInfoPacket fe:04
ExEventMatchFirecrackerPacket fe:05
ExEventMatchTeamUnlockedPacket fe:06
ExEventMatchGMTestPacket fe:07
ExPartyRoomMemberPacket fe:08
ExClosePartyRoomPacket fe:09
ExManagePartyRoomMemberPacket fe:0a
ExEventMatchLockResult fe:0b
ExAutoSoulShot fe:0c
ExEventMatchListPacket fe:0d
ExEventMatchObserverPacket fe:0e
ExEventMatchMessagePacket fe:0f
ExEventMatchScorePacket fe:10
ExServerPrimitivePacket fe:11
ExOpenMPCCPacket fe:12
ExCloseMPCCPacket fe:13
ExShowCastleInfo fe:14
ExShowFortressInfo fe:15
ExShowAgitInfo fe:16
ExShowFortressSiegeInfo fe:17
ExPartyPetWindowAdd fe:18
ExPartyPetWindowUpdate fe:19
ExAskJoinMPCCPacket fe:1a
ExPledgeEmblem fe:1b
ExEventMatchTeamInfoPacket fe:1c
ExEventMatchCreatePacket fe:1d
ExFishingStartPacket fe:1e
ExFishingEndPacket fe:1f
ExShowQuestInfoPacket fe:20
ExShowQuestMarkPacket fe:21
ExSendManorListPacket fe:22
ExShowSeedInfoPacket fe:23
ExShowCropInfoPacket fe:24
ExShowManorDefaultInfoPacket fe:25
ExShowSeedSettingPacket fe:26
ExFishingStartCombatPacket fe:27
ExFishingHpRegenPacket fe:28
ExEnchantSkillListPacket fe:29
ExEnchantSkillInfoPacket fe:2a
ExShowCropSettingPacket fe:2b
ExShowSellCropListPacket fe:2c
ExOlympiadMatchEndPacket fe:2d
ExMailArrivedPacket fe:2e
ExStorageMaxCountPacket fe:2f
ExEventMatchManagePacket fe:30
ExMultiPartyCommandChannelInfoPacket fe:31
ExPCCafePointInfoPacket fe:32
ExSetCompassZoneCode fe:33
ExGetBossRecord fe:34
ExAskJoinPartyRoom fe:35
ExListPartyMatchingWaitingRoom fe:36
ExSetMpccRouting fe:37
ExShowAdventurerGuideBook fe:38
ExShowScreenMessage fe:39
PledgeSkillListPacket fe:3a
PledgeSkillListAddPacket fe:3b
PledgePowerGradeList fe:3c
PledgeReceivePowerInfo fe:3d
PledgeReceiveMemberInfo fe:3e
PledgeReceiveWarList fe:3f
PledgeReceiveSubPledgeCreated fe:40
ExRedSkyPacket fe:41
PledgeReceiveUpdatePower fe:42
FlySelfDestinationPacket fe:43
ShowPCCafeCouponShowUI fe:44
ExSearchOrc fe:45
ExCursedWeaponList fe:46
ExCursedWeaponLocation fe:47
ExRestartClient fe:48
ExRequestHackShield fe:49
ExUseSharedGroupItem fe:4a
ExMPCCShowPartyMemberInfo fe:4b
ExDuelAskStart fe:4c
ExDuelReady fe:4d
ExDuelStart fe:4e
ExDuelEnd fe:4f
ExDuelUpdateUserInfo fe:50
ExShowVariationMakeWindow fe:51
ExShowVariationCancelWindow fe:52
ExPutItemResultForVariationMake fe:53
ExPutIntensiveResultForVariationMake fe:54
ExPutCommissionResultForVariationMake fe:55
ExVariationResult fe:56
ExPutItemResultForVariationCancel fe:57
ExVariationCancelResult fe:58
ExDuelEnemyRelation fe:59
ExPlayAnimation fe:5a
ExMPCCPartyInfoUpdate fe:5b
ExPlayScene fe:5c
ExSpawnEmitterPacket fe:5d
ExEnchantSkillInfoDetailPacket fe:5e
ExBasicActionList fe:5f
ExAirShipInfo fe:60
ExAttributeEnchantResultPacket fe:61
ExChooseInventoryAttributeItemPacket fe:62
ExGetOnAirShipPacket fe:63
ExGetOffAirShipPacket fe:64
ExMoveToLocationAirShipPacket fe:65
ExStopMoveAirShipPacket fe:66
ExShowTracePacket fe:67
ExItemAuctionInfoPacket fe:68
ExNeedToChangeName fe:69
ExPartyPetWindowDelete fe:6a
ExTutorialList fe:6b
ExRpItemLink fe:6c
ExMoveToLocationInAirShipPacket fe:6d
ExStopMoveInAirShipPacket fe:6e
ExValidateLocationInAirShipPacket fe:6f
ExUISettingPacket fe:70
ExMoveToTargetInAirShipPacket fe:71
ExAttackInAirShipPacket fe:72
ExMagicSkillUseInAirShipPacket fe:73
ExShowBaseAttributeCancelWindow fe:74
ExBaseAttributeCancelResult fe:75
ExSubPledgetSkillAdd fe:76
ExResponseFreeServer fe:77
ExShowProcureCropDetailPacket fe:78
ExHeroListPacket fe:79
ExOlympiadUserInfoPacket fe:7a
ExOlympiadSpelledInfoPacket fe:7b
ExOlympiadModePacket fe:7c
ExShowFortressMapInfo fe:7d
ExPVPMatchRecord fe:7e
ExPVPMatchUserDie fe:7f
ExPrivateStoreWholeMsg fe:80
ExPutEnchantTargetItemResult fe:81
ExPutEnchantSupportItemResult fe:82
ExChangeNicknameNColor fe:83
ExGetBookMarkInfoPacket fe:84
ExNotifyPremiumItem fe:85
ExGetPremiumItemListPacket fe:86
ExPeriodicItemList fe:87
ExJumpToLocation fe:88
ExPVPMatchCCRecord fe:89
ExPVPMatchCCMyRecord fe:8a
ExPVPMatchCCRetire fe:8b
ExShowTerritory fe:8c
ExNpcQuestHtmlMessage fe:8d
ExSendUIEventPacket fe:8e
ExNotifyBirthDay fe:8f
ExShowDominionRegistry fe:90
ExReplyRegisterDominion fe:91
ExReplyDominionInfo fe:92
ExShowOwnthingPos fe:93
ExCleftList fe:94
ExCleftState fe:95
ExDominionChannelSet fe:96
ExBlockUpSetList fe:97
ExBlockUpSetState fe:98
ExStartScenePlayer fe:99
ExAirShipTeleportList fe:9a
ExMpccRoomInfo fe:9b
ExListMpccWaiting fe:9c
ExDissmissMpccRoom fe:9d
ExManageMpccRoomMember fe:9e
ExMpccRoomMember fe:9f
ExVitalityPointInfo fe:a0
ExShowSeedMapInfo   fe:a1
ExMpccPartymasterList fe:a2
ExDominionWarStart fe:a3
ExDominionWarEnd fe:a4
ExShowLines fe:a5
ExPartyMemberRenamed fe:a6
ExEnchantSkillResult fe:a7
ExRefundList fe:a8
ExNoticePostArrived fe:a9
ExShowReceivedPostList fe:aa
ExReplyReceivedPost fe:ab
ExShowSentPostList fe:ac
ExReplySentPost fe:ad
ExResponseShowStepOne fe:ae
ExResponseShowStepTwo fe:af
ExResponseShowContents fe:b0
ExShowPetitionHtml fe:b1
ExReplyPostItemList fe:b2
ExChangePostState fe:b3
ExReplyWritePost fe:b4
ExInitializeSeed fe:b5
ExRaidReserveResult fe:b6
ExBuySellListPacket fe:b7
ExCloseRaidSocket fe:b8
ExPrivateMarketListPacket fe:b9
ExRaidCharacterSelected fe:ba
ExAskCoupleAction fe:bb
ExBrBroadcastEventState fe:bc
ExBR_LoadEventTopRankersPacket fe:bd
ExChangeNPCState fe:be
ExAskModifyPartyLooting fe:bf
ExSetPartyLooting fe:c0
ExRotation fe:c1
ExChangeClientEffectInfo fe:c2
ExMembershipInfo fe:c3
ExReplyHandOverPartyMaster fe:c4
ExQuestNpcLogList fe:c5
ExQuestItemListPacket fe:c6
ExGMViewQuestItemListPacket fe:c7
ExResartResponse fe:c8
ExVoteSystemInfoPacket fe:c9
ExShuttuleInfoPacket fe:ca
ExSuttleGetOnPacket fe:cb
ExSuttleGetOffPacket fe:cc
ExSuttleMovePacket fe:cd
ExMTLInSuttlePacket fe:ce
ExStopMoveInShuttlePacket fe:cf
ExValidateLocationInShuttlePacket fe:d0
ExAgitAuctionCmdPacket fe:d1
ExConfirmAddingPostFriend fe:d2
ExReceiveShowPostFriend fe:d3
ExReceiveOlympiadPacket fe:d4
ExBR_GamePointPacket fe:d5
ExBR_ProductListPacket fe:d6
ExBR_ProductInfoPacket fe:d7
ExBR_BuyProductPacket fe:d8
ExBR_PremiumStatePacket fe:d9
ExBrExtraUserInfo fe:da
ExBrBuffEventState fe:db
ExBR_RecentProductListPacket fe:dc
ExBR_MinigameLoadScoresPacket fe:dd
ExBR_AgathionEnergyInfoPacket fe:de
ExShowChannelingEffectPacket fe:df
ExShowChannelingEffectPacket fe:e0
ExGetCrystalizingFail fe:e1
ExNavitAdventPointInfoPacket fe:e2
ExNavitAdventEffectPacket fe:e3
ExNavitAdventTimeChangePacket fe:e4
ExAbnormalStatusUpdateFromTargetPacket fe:e5
ExStopScenePlayerPacket fe:e6
ExFlyMove fe:e7
ExDynamicQuestPacket fe:e8
ExSubjobInfo fe:e9
ExChangeMPCost fe:ea
ExFriendDetailInfo fe:eb
ExBlockAddResult fe:ec
ExBlockRemoveResult fe:ed
ExBlockDefailInfo fe:ee
ExLoadInzonePartyHistory fe:ef
ExFriendNotifyNameChange fe:f0
ExShowCommission fe:f1
ExResponseCommissionItemList fe:f2
ExResponseCommissionInfo fe:f3
ExResponseCommissionRegister fe:f4
ExResponseCommissionDelete fe:f5
ExResponseCommissionList fe:f6
ExResponseCommissionBuyInfo fe:f7
ExResponseCommissionBuyItem fe:f8
ExAcquirableSkillListByClass fe:f9
ExMagicAttackInfo fe:fa
ExAcquireSkillInfo fe:fb
ExNewSkillToLearnByLevelUp fe:fc
ExCallToChangeClass fe:fd
ExChangeToAwakenedClass fe:fe
ExTacticalSign fe:ff
ExLoadStatWorldRank fe:100
ExLoadStatUser  fe:101
ExLoadStatHotLink fe:102
ExWaitWaitingSubStituteInfo fe:103
ExRegistWaitingSubstituteOk fe:104
ExRegistPartySubstitute fe:105
ExDeletePartySubstitute fe:106
ExTimeOverPartySubstitute fe:107
ExGet24HzSessionID fe:108
Ex2NDPasswordCheckPacket fe:109
Ex2NDPasswordVerifyPacket fe:10a
Ex2NDPasswordAckPacket fe:10b
ExFlyMoveBroadcast fe:10c
ExShowUsmPacket fe:10d
ExShowStatPage fe:10e
ExIsCharNameCreatable fe:10f
ExGoodsInventoryChangedNotiPacket fe:110
ExGoodsInventoryInfoPacket fe:111
ExGoodsInventoryResultPacket fe:112
ExAlterSkillRequest fe:113
ExNotifyFlyMoveStart fe:114
ExDummyPacket   fe:115
ExCloseCommission   fe:116
ExChangeAttributeItemList   fe:117
ExChangeAttributeInfo   fe:118
ExChangeAttributeOk fe:119
ExChangeAttributeFail   fe:11a
ExExchangeSubstitute    fe:11b
ExLightingCandleEvent   fe:11c
ExVitalityEffectInfo    fe:11d
ExLoginVitalityEffectInfo   fe:11e
ExBR_PresentBuyProductPacket    fe:11f
ExMentorList    fe:120
ExMentorAdd fe:121
ExChoose_Shape_Shifting_Item    fe:122
ExPut_Shape_Shifting_Target_Item_Result fe:123
ExPut_Shape_Shifting_Extraction_Item_Result fe:124
ExShape_Shifting_Result fe:125
ExCheck_SpeedHack   fe:126</help>
      <arg name="id" type="ubyte">
        <tip>packet id</tip>
      </arg>
      <arg name="exId" type="ushort">
        <tip>packet exid</tip>
      </arg>
      <arg name="flag" type="ubyte">
        <tip>care about: 0x1 - ID, 0x2 - exId, 0x3 - both</tip>
      </arg>
    </function>
    <function name="PacketUnBlock">
      <tip>Unblocks packets with specyfic id's</tip>
      <help>Unblocks packets with specyfic id's</help>
      <arg name="id" type="ubyte">
        <tip>packet id as signed char</tip>
      </arg>
      <arg name="exId" type="ushort">
        <tip>packet exId as signed short</tip>
      </arg>
      <arg name="flag" type="ubyte">
        <tip>care about: 0x1 - ID, 0x2 - exId, 0x3 - both</tip>
      </arg>
    </function>
    <function name="Event_PacketBlock">
      <tip>Blocks events for packets with specyfic id's</tip>
      <help>Blocks events for packets with specyfic id's</help>
      <arg name="id" type="ubyte">
        <tip>packet id as signed char</tip>
      </arg>
      <arg name="exId" type="ushort">
        <tip>packet exId as signed short</tip>
      </arg>
      <arg name="flag" type="ubyte">
        <tip>care about: 0x1 - ID, 0x2 - exId, 0x3 - both</tip>
      </arg>
    </function>
    <function name="Event_PacketUnBlock">
      <tip>Unblocks events for packets with specyfic id's</tip>
      <help>Unblocks events for packets with specyfic id's</help>
      <arg name="id" type="ubyte">
        <tip>packet id as signed char</tip>
      </arg>
      <arg name="exId" type="ushort">
        <tip>packet exId as signed short</tip>
      </arg>
      <arg name="flag" type="ubyte">
        <tip>care about: 0x1 - ID, 0x2 - exId, 0x3 - both</tip>
      </arg>
    </function>
    <function name="SendPacket">
      <tip>Sends a specyfic client-&gt;server packet</tip>
      <help>Sends a specyfic client-&gt;server packet</help>
      <arg name="packet" type="PacketBuilder">
        <tip>packet data</tip>
      </arg>
    </function>
    <function name="SendPacketToGame">
      <tip>Sends a specyfic server-&gt;client packet</tip>
      <help>Sends a specyfic server-&gt;client packet</help>
      <arg name="ID" type="ubyte">
        <tip>packet ID</tip>
      </arg>
      <arg name="ID2" type="ushort">
        <tip>packet ID2</tip>
      </arg>
      <arg name="packet" type="PacketBuilder">
        <tip>packet data</tip>
      </arg>
    </function>
    <function name="UnblockOutgoingPacket">
      <tip>Allows to use OnOutgoingPacket event in plugins</tip>
      <help>Allows to use OnOutgoingPacket event in plugins</help>
      <arg name="PacketID" type="ubyte">
        <tip>unsigned char</tip>
      </arg>
    </function>
    <namespace name="chat">
      <tip>Namespace with L2Tower Community Server api functions</tip>
      <help>Namespace with L2Tower Community Server api functions</help>
      <function name="isConnected">
        <tip>Method retuns true if you are connected to L2Tower community server</tip>
        <help>Method retuns true if you are connected to L2Tower community server</help>
        <return type="boolean">
          <tip>true if you are connected to L2Tower community server, false if not</tip>
          <help>true if you are connected to L2Tower community server, false if not</help>
        </return>
      </function>
      <function name="sendGlobalMsg">
        <tip>Sends a global message</tip>
        <help>Sends a global message</help>
        <return type="boolean">
          <tip>true on success, false on fail</tip>
          <help>true on success, false on fail</help>
        </return>
        <arg name="message" type="string">
          <tip>message to send</tip>
        </arg>
      </function>
      <function name="sendServerMsg">
        <tip>Sends a server message</tip>
        <help>Sends a server message</help>
        <return type="boolean">
          <tip>true on success, false on fail</tip>
          <help>true on success, false on fail</help>
        </return>
        <arg name="message" type="string">
          <tip>message to send</tip>
        </arg>
      </function>
      <function name="sendPersonalMsg">
        <tip>Sends a personal message</tip>
        <help>Sends a personal message</help>
        <return type="boolean">
          <tip>true on success, false on fail</tip>
          <help>true on success, false on fail</help>
        </return>
        <arg name="user" type="string">
          <tip>user who have to receive message</tip>
        </arg>
        <arg name="message" type="string">
          <tip>message to send</tip>
        </arg>
      </function>
      <function name="sendPersonalMsg">
        <tip>Sends a personal message</tip>
        <help>Sends a personal message</help>
        <return type="boolean">
          <tip>true on success, false on fail</tip>
          <help>true on success, false on fail</help>
        </return>
        <arg name="user" type="string">
          <tip>user who have to receive message</tip>
        </arg>
        <arg name="connectionId" type="uint">
          <tip>user conenction id</tip>
        </arg>
        <arg name="message" type="string">
          <tip>message to send</tip>
        </arg>
      </function>
      <function name="sendHiddenMsg">
        <tip>Sends a hidden personal message</tip>
        <help>Sends a hidden personal message</help>
        <return type="boolean">
          <tip>true on success, false on fail</tip>
          <help>true on success, false on fail</help>
        </return>
        <arg name="user" type="string">
          <tip>user who have to receive message</tip>
        </arg>
        <arg name="message" type="string">
          <tip>message to send</tip>
        </arg>
      </function>
      <function name="sendHiddenMsg">
        <tip>Sends a hidden personal message</tip>
        <help>Sends a hidden personal message</help>
        <return type="boolean">
          <tip>true on success, false on fail</tip>
          <help>true on success, false on fail</help>
        </return>
        <arg name="user" type="string">
          <tip>user who have to receive message</tip>
        </arg>
        <arg name="connectionId" type="uint">
          <tip>user conenction id</tip>
        </arg>
        <arg name="message" type="string">
          <tip>message to send</tip>
        </arg>
      </function>
    </namespace>
    <module name="L2TConfig">
      <tip>Module with all serializable configuration</tip>
      <help>Module with all serializable configuration</help>
      <enum name="EPriority">
        <tip>Priority enum</tip>
        <help>Priority enum</help>
        <item name="HIGH" value="40">
          <tip>HIGH priority enum, id: 40</tip>
          <help>HIGH priority enum, id: 40</help>
        </item>
        <item name="HIGHEST" value="50">
          <tip>HIGHEST priority enum, id: 50</tip>
          <help>HIGHEST priority enum, id: 50</help>
        </item>
        <item name="LOW" value="20">
          <tip>LOW priority enum, id: 20</tip>
          <help>LOW priority enum, id: 20</help>
        </item>
        <item name="LOWEST" value="10">
          <tip>LOWEST priority enum, id: 10</tip>
          <help>LOWEST priority enum, id: 10</help>
        </item>
        <item name="NORMAL" value="30">
          <tip>NORMAL priority enum, id: 30</tip>
          <help>NORMAL priority enum, id: 30</help>
        </item>
      </enum>
      <enum name="EAssistType">
        <tip>Assist state enum</tip>
        <help>Assist state enum</help>
        <item name="AT_BY_ORDER_TILL_DEATH" value="1">
          <tip>AT_BY_ORDER_TILL_DEATH assist type enum, id: 1</tip>
          <help>AT_BY_ORDER_TILL_DEATH assist type enum, id: 1</help>
        </item>
        <item name="AT_BY_ORDER_TILL_FOUND" value="2">
          <tip>AT_BY_ORDER_TILL_FOUND assist type enum, id: 2</tip>
          <help>AT_BY_ORDER_TILL_FOUND assist type enum, id: 2</help>
        </item>
        <item name="AT_NEAREST_TARGET" value="3">
          <tip>AT_NEAREST_TARGET assist type enum, id: 3</tip>
          <help>AT_NEAREST_TARGET assist type enum, id: 3</help>
        </item>
        <item name="AT_OFF" value="0">
          <tip>AT_OFF assist type enum, id: 0</tip>
          <help>AT_OFF assist type enum, id: 0</help>
        </item>
      </enum>
      <enum name="EFollowMode">
        <tip>Follow mode enum</tip>
        <help>Follow mode enum</help>
        <item name="FOLLOW_OFF" value="0">
          <tip>FOLLOW_OFF follow mode enum, id: 0</tip>
          <help>FOLLOW_OFF follow mode enum, id: 0</help>
        </item>
        <item name="FOLLOW_TO_THEY" value="2">
          <tip>FOLLOW_TO_THEY follow mode enum, id: 2</tip>
          <help>FOLLOW_TO_THEY follow mode enum, id: 2</help>
        </item>
        <item name="FOLLOW_WHEN_THEY_MOVE" value="1">
          <tip>FOLLOW_WHEN_THEY_MOVE follow mode enum, id: 1</tip>
          <help>FOLLOW_WHEN_THEY_MOVE follow mode enum, id: 1</help>
        </item>
      </enum>
      <enum name="FollowOrder">
        <tip>Follow order enum</tip>
        <help>Follow order enum</help>
        <item name="FOLLOW_ORDER_FIRST" value="0">
          <tip>FOLLOW_ORDER_FIRST follow order enum, id: 0</tip>
          <help>FOLLOW_ORDER_FIRST follow order enum, id: 0</help>
        </item>
        <item name="FOLLOW_ORDER_NEAREST" value="1">
          <tip>FOLLOW_ORDER_NEAREST follow order enum, id: 1</tip>
          <help>FOLLOW_ORDER_NEAREST follow order enum, id: 1</help>
        </item>
      </enum>
      <enum name="ENukeCondition">
        <tip>Nuke condition enum</tip>
        <help>Nuke condition enum</help>
        <item name="NC_ABOVE" value="1">
          <tip>NC_ABOVE nuke condition enum, id: 1</tip>
          <help>NC_ABOVE nuke condition enum, id: 1</help>
        </item>
        <item name="NC_ALWAYS" value="0">
          <tip>NC_ALWAYS nuke condition enum, id: 0</tip>
          <help>NC_ALWAYS nuke condition enum, id: 0</help>
        </item>
        <item name="NC_BELOW" value="2">
          <tip>NC_BELOW nuke condition enum, id: 2</tip>
          <help>NC_BELOW nuke condition enum, id: 2</help>
        </item>
        <item name="NC_DEATH" value="3">
          <tip>NC_DEATH nuke condition enum, id: 3</tip>
          <help>NC_DEATH nuke condition enum, id: 3</help>
        </item>
        <item name="NC_UNKNOWN" value="4">
          <tip>NC_UNKNOWN nuke condition enum, id: 4</tip>
          <help>NC_UNKNOWN nuke condition enum, id: 4</help>
        </item>
      </enum>
      <enum name="PveMonsterType">
        <tip>Pve monster type enum</tip>
        <help>Pve monster type enum</help>
        <item name="MONSTER_MISC" value="2">
          <tip>MONSTER_MISC pve monster type enum, id: 2</tip>
          <help>MONSTER_MISC pve monster type enum, id: 2</help>
        </item>
        <item name="MONSTER_MOB" value="1">
          <tip>MONSTER_MOB pve monster type enum, id: 1</tip>
          <help>MONSTER_MOB pve monster type enum, id: 1</help>
        </item>
        <item name="MONSTER_NPC" value="0">
          <tip>MONSTER_NPC pve monster type enum, id: 0</tip>
          <help>MONSTER_NPC pve monster type enum, id: 0</help>
        </item>
      </enum>
      <enum name="EPickupDropFilters">
        <tip>Pickup drop filters enum</tip>
        <help>Pickup drop filters enum</help>
        <item name="FILTER_GROUP_DROP" value="7168">
          <tip>FILTER_GROUP_DROP pickup drop filter enum, id: 7168</tip>
          <help>FILTER_GROUP_DROP pickup drop filter enum, id: 7168</help>
        </item>
        <item name="FILTER_GROUP_HIT" value="9184">
          <tip>FILTER_GROUP_HIT pickup drop filter enum, id: 9184</tip>
          <help>FILTER_GROUP_HIT pickup drop filter enum, id: 9184</help>
        </item>
        <item name="FILTER_GROUP_TARGET" value="31">
          <tip>FILTER_GROUP_TARGET pickup drop filter enum, id: 31</tip>
          <help>FILTER_GROUP_TARGET pickup drop filter enum, id: 31</help>
        </item>
        <item name="PICKUP_DROP_FROM_MONSTER" value="1024">
          <tip>PICKUP_DROP_FROM_MONSTER pickup drop filter enum, id: 1024</tip>
          <help>PICKUP_DROP_FROM_MONSTER pickup drop filter enum, id: 1024</help>
        </item>
        <item name="PICKUP_DROP_FROM_ORPHANT" value="4096">
          <tip>PICKUP_DROP_FROM_ORPHANT pickup drop filter enum, id: 4096</tip>
          <help>PICKUP_DROP_FROM_ORPHANT pickup drop filter enum, id: 4096</help>
        </item>
        <item name="PICKUP_DROP_FROM_PLAYER" value="2048">
          <tip>PICKUP_DROP_FROM_PLAYER pickup drop filter enum, id: 2048</tip>
          <help>PICKUP_DROP_FROM_PLAYER pickup drop filter enum, id: 2048</help>
        </item>
        <item name="PICKUP_HIT_MOB_CLAN" value="128">
          <tip>PICKUP_HIT_MOB_CLAN pickup drop filter enum, id: 128</tip>
          <help>PICKUP_HIT_MOB_CLAN pickup drop filter enum, id: 128</help>
        </item>
        <item name="PICKUP_HIT_MOB_FRIEND" value="256">
          <tip>PICKUP_HIT_MOB_FRIEND pickup drop filter enum, id: 256</tip>
          <help>PICKUP_HIT_MOB_FRIEND pickup drop filter enum, id: 256</help>
        </item>
        <item name="PICKUP_HIT_MOB_ME" value="32">
          <tip>PICKUP_HIT_MOB_ME pickup drop filter enum, id: 32</tip>
          <help>PICKUP_HIT_MOB_ME pickup drop filter enum, id: 32</help>
        </item>
        <item name="PICKUP_HIT_MOB_OTHER" value="512">
          <tip>PICKUP_HIT_MOB_OTHER pickup drop filter enum, id: 512</tip>
          <help>PICKUP_HIT_MOB_OTHER pickup drop filter enum, id: 512</help>
        </item>
        <item name="PICKUP_HIT_MOB_PARTY" value="64">
          <tip>PICKUP_HIT_MOB_PARTY pickup drop filter enum, id: 64</tip>
          <help>PICKUP_HIT_MOB_PARTY pickup drop filter enum, id: 64</help>
        </item>
        <item name="PICKUP_HIT_MOB_PET" value="8192">
          <tip>PICKUP_HIT_MOB_PET pickup drop filter enum, id: 8192</tip>
          <help>PICKUP_HIT_MOB_PET pickup drop filter enum, id: 8192</help>
        </item>
        <item name="PICKUP_TARGET_MOB_CLAN" value="4">
          <tip>PICKUP_TARGET_MOB_CLAN pickup drop filter enum, id: 4</tip>
          <help>PICKUP_TARGET_MOB_CLAN pickup drop filter enum, id: 4</help>
        </item>
        <item name="PICKUP_TARGET_MOB_FRIEND" value="8">
          <tip>PICKUP_TARGET_MOB_FRIEND pickup drop filter enum, id: 8</tip>
          <help>PICKUP_TARGET_MOB_FRIEND pickup drop filter enum, id: 8</help>
        </item>
        <item name="PICKUP_TARGET_MOB_ME" value="1">
          <tip>PICKUP_TARGET_MOB_ME pickup drop filter enum, id: 1</tip>
          <help>PICKUP_TARGET_MOB_ME pickup drop filter enum, id: 1</help>
        </item>
        <item name="PICKUP_TARGET_MOB_OTHER" value="16">
          <tip>PICKUP_TARGET_MOB_OTHER pickup drop filter enum, id: 16</tip>
          <help>PICKUP_TARGET_MOB_OTHER pickup drop filter enum, id: 16</help>
        </item>
        <item name="PICKUP_TARGET_MOB_PARTY" value="2">
          <tip>PICKUP_TARGET_MOB_PARTY pickup drop filter enum, id: 2</tip>
          <help>PICKUP_TARGET_MOB_PARTY pickup drop filter enum, id: 2</help>
        </item>
      </enum>
      <enum name="EPickupMode">
        <tip>Pickup mode enum</tip>
        <help>Pickup mode enum</help>
        <item name="PICKUP_AFTER" value="2">
          <tip>PICKUP_AFTER pickup mode enum, id: 2</tip>
          <help>PICKUP_AFTER pickup mode enum, id: 2</help>
        </item>
        <item name="PICKUP_BEFORE" value="1">
          <tip>PICKUP_BEFORE pickup mode enum, id: 1</tip>
          <help>PICKUP_BEFORE pickup mode enum, id: 1</help>
        </item>
        <item name="PICKUP_OFFLINE" value="0">
          <tip>PICKUP_OFFLINE pickup mode enum, id: 0</tip>
          <help>PICKUP_OFFLINE pickup mode enum, id: 0</help>
        </item>
      </enum>
      <enum name="ETargetingType">
        <tip>Targeting type enum</tip>
        <help>Targeting type enum</help>
        <item name="TT_INSIDE_POLYGON" value="3">
          <tip>TT_INSIDE_POLYGON targeting type  enum, id: 3</tip>
          <help>TT_INSIDE_POLYGON targeting type  enum, id: 3</help>
        </item>
        <item name="TT_OFF" value="0">
          <tip>TT_OFF targeting type  enum, id: 0</tip>
          <help>TT_OFF targeting type  enum, id: 0</help>
        </item>
        <item name="TT_PATH_POINT" value="4">
          <tip>TT_PATH_POINT targeting type  enum, id: 4</tip>
          <help>TT_PATH_POINT targeting type  enum, id: 4</help>
        </item>
        <item name="TT_RANGE_FROM_CHAR" value="1">
          <tip>TT_RANGE_FROM_CHAR targeting type  enum, id: 1</tip>
          <help>TT_RANGE_FROM_CHAR targeting type  enum, id: 1</help>
        </item>
        <item name="TT_RANGE_FROM_POINT" value="2">
          <tip>TT_RANGE_FROM_POINT targeting type  enum, id: 2</tip>
          <help>TT_RANGE_FROM_POINT targeting type  enum, id: 2</help>
        </item>
      </enum>
      <enum name="ETargetingRangeType">
        <tip>Targeting range type enum</tip>
        <help>Targeting range type enum</help>
        <item name="TRT_CIRCLE" value="0">
          <tip>TRT_CIRCLE targeting range type enum, id: 0</tip>
          <help>TRT_CIRCLE targeting range type enum, id: 0</help>
        </item>
        <item name="TRT_SQUERE" value="1">
          <tip>TRT_SQUERE targeting range type enum, id: 1</tip>
          <help>TRT_SQUERE targeting range type enum, id: 1</help>
        </item>
      </enum>
      <enum name="EPartyTypeToAccept">
        <tip>Party type to accept enum</tip>
        <help>Party type to accept enum</help>
        <item name="PARTY_ACCEPT_TYPE_ALL" value="7">
          <tip>PARTY_ACCEPT_TYPE_ALL party type to accept enum, id: 7</tip>
          <help>PARTY_ACCEPT_TYPE_ALL party type to accept enum, id: 7</help>
        </item>
        <item name="PARTY_ACCEPT_TYPE_BY_TURN" value="8">
          <tip>PARTY_ACCEPT_TYPE_BY_TURN party type to accept enum, id: 8</tip>
          <help>PARTY_ACCEPT_TYPE_BY_TURN party type to accept enum, id: 8</help>
        </item>
        <item name="PARTY_ACCEPT_TYPE_BY_TURN_INC_SPOIL" value="16">
          <tip>PARTY_ACCEPT_TYPE_BY_TURN_INC_SPOIL party type to accept enum, id: 16</tip>
          <help>PARTY_ACCEPT_TYPE_BY_TURN_INC_SPOIL party type to accept enum, id: 16</help>
        </item>
        <item name="PARTY_ACCEPT_TYPE_FINDER_KEEPERS" value="1">
          <tip>PARTY_ACCEPT_TYPE_FINDER_KEEPERS party type to accept enum, id: 1</tip>
          <help>PARTY_ACCEPT_TYPE_FINDER_KEEPERS party type to accept enum, id: 1</help>
        </item>
        <item name="PARTY_ACCEPT_TYPE_RANDOM" value="2">
          <tip>PARTY_ACCEPT_TYPE_RANDOM party type to accept enum, id: 2</tip>
          <help>PARTY_ACCEPT_TYPE_RANDOM party type to accept enum, id: 2</help>
        </item>
        <item name="PARTY_ACCEPT_TYPE_RANDOM_INC_SPOIL" value="4">
          <tip>PARTY_ACCEPT_TYPE_RANDOM_INC_SPOIL party type to accept enum, id: 4</tip>
          <help>PARTY_ACCEPT_TYPE_RANDOM_INC_SPOIL party type to accept enum, id: 4</help>
        </item>
      </enum>
      <enum name="EAcceptResurrect">
        <tip>Accept resurrect type enum</tip>
        <help>Accept resurrect type enum</help>
        <item name="eAcceptAll" value="63">
          <tip>eAcceptAll accept resurrect type enum, id: 63</tip>
          <help>eAcceptAll accept resurrect type enum, id: 63</help>
        </item>
        <item name="eAcceptAlliance" value="8">
          <tip>eAcceptAlliance accept resurrect type enum, id: 8</tip>
          <help>eAcceptAlliance accept resurrect type enum, id: 8</help>
        </item>
        <item name="eAcceptClan" value="4">
          <tip>eAcceptClan accept resurrect type enum, id: 4</tip>
          <help>eAcceptClan accept resurrect type enum, id: 4</help>
        </item>
        <item name="eAcceptDefault" value="31">
          <tip>eAcceptDefault accept resurrect type enum, id: 31</tip>
          <help>eAcceptDefault accept resurrect type enum, id: 31</help>
        </item>
        <item name="eAcceptFriend" value="2">
          <tip>eAcceptFriend accept resurrect type enum, id: 2</tip>
          <help>eAcceptFriend accept resurrect type enum, id: 2</help>
        </item>
        <item name="eAcceptOther" value="32">
          <tip>eAcceptOther accept resurrect type enum, id: 32</tip>
          <help>eAcceptOther accept resurrect type enum, id: 32</help>
        </item>
        <item name="eAcceptParty" value="1">
          <tip>eAcceptParty accept resurrect type enum, id: 1</tip>
          <help>eAcceptParty accept resurrect type enum, id: 1</help>
        </item>
        <item name="eAcceptSelfRes" value="16">
          <tip>eAcceptSelfRes accept resurrect type enum, id: 16</tip>
          <help>eAcceptSelfRes accept resurrect type enum, id: 16</help>
        </item>
      </enum>
      <enum name="EDelayResurrect">
        <tip>Resurrect delay enum</tip>
        <help>Resurrect delay enum</help>
        <item name="eDelayNone" value="0">
          <tip>eDelayNone resurrect delay enum, id: 0</tip>
          <help>eDelayNone resurrect delay enum, id: 0</help>
        </item>
        <item name="eOnMonsterTarget" value="2">
          <tip>eOnMonsterTarget resurrect delay enum, id: 2</tip>
          <help>eOnMonsterTarget resurrect delay enum, id: 2</help>
        </item>
        <item name="eOnPartyDead" value="4">
          <tip>eOnPartyDead resurrect delay enum, id: 4</tip>
          <help>eOnPartyDead resurrect delay enum, id: 4</help>
        </item>
        <item name="eOnPlayerTarget" value="1">
          <tip>eOnPlayerTarget resurrect delay enum, id: 1</tip>
          <help>eOnPlayerTarget resurrect delay enum, id: 1</help>
        </item>
      </enum>
      <class name="L2Point">
        <tip>Alternative class for FVector</tip>
        <help>Alternative class for FVector</help>
        <property type="int" name="Y">
          <tip>Y location property</tip>
          <help>Y location property</help>
        </property>
        <property type="int" name="Z">
          <tip>Z location property</tip>
          <help>Z location property</help>
        </property>
        <property type="int" name="X">
          <tip>X location property</tip>
          <help>X location property</help>
        </property>
        <method name="IsNonZero">
          <tip>Checks if location is non zero</tip>
          <help>Checks if location is non zero</help>
          <return type="boolean">
            <tip>true if X!=0 and Y!=0 and Z!=0</tip>
            <help>true if X!=0 and Y!=0 and Z!=0</help>
          </return>
        </method>
        <constructor>
          <tip>Default constructor for L2Point class</tip>
          <help>Default constructor for L2Point class</help>
        </constructor>
      </class>
      <class name="BuffsSetting">
        <tip>Class contains information about buff setting (Sellf and Pet).</tip>
        <help>Class contains information about buff setting (Sellf and Pet).</help>
        <property type="boolean" name="enabled">
          <tip>enabled - state of buff</tip>
          <help>enabled - state of buff</help>
        </property>
        <property type="int" name="skillId">
          <tip>Skill ID of buff</tip>
          <help>Skill ID of buff</help>
        </property>
        <property type="int" name="useEvery">
          <tip>Every what time use buff in miliseconds. 0 - autodetect.</tip>
          <help>Every what time use buff in miliseconds. 0 - autodetect.</help>
        </property>
        <property type="int" name="priority">
          <tip>Buff priority</tip>
          <help>Buff priority</help>
        </property>
        <property type="boolean" name="requireTarget">
          <tip>Is skill usage require valid target or not</tip>
          <help>Is skill usage require valid target or not</help>
        </property>
        <property type="uint64" name="lastUse" readonly="true">
          <tip>Last use of this buff</tip>
          <help>Last use of this buff</help>
        </property>
        <method name="setCondition">
          <tip>Sets new condition, condition is not validated, if you set it wrong, butf wont be used.</tip>
          <help>Sets new condition, condition is not validated, if you set it wrong, butf wont be used.</help>
          <arg name="condition" type="string">
            <tip />
          </arg>
        </method>
        <method name="getCondition">
          <tip>Return active condition</tip>
          <help>Return active condition</help>
          <return type="string">
            <tip>condition</tip>
            <help>condition</help>
          </return>
        </method>
        <method name="reset">
          <tip>Sets lastUse to 0 to reset buff.</tip>
          <help>Sets lastUse to 0 to reset buff.</help>
        </method>
        <constructor>
          <tip>Default non-parameter constructor.</tip>
          <help> Default non-parameter constructor. See class tip.</help>
        </constructor>
      </class>
      <class name="SharedVector&lt;T&gt;" creatable="false">
        <tip>Value container</tip>
        <help>Value container</help>
        <method name="Count">
          <tip>Gets numer of elements on vector</tip>
          <help>Gets numer of elements on vector</help>
          <return type="uint">
            <tip>Numer of elements on vector</tip>
            <help>Numer of elements on vector</help>
          </return>
        </method>
        <method name="IsEmpty">
          <tip>Checks if vector is empty</tip>
          <help>Checks if vector is empty</help>
          <return type="boolean">
            <tip>True/False</tip>
            <help>True/False</help>
          </return>
        </method>
        <method name="Size">
          <tip>Gets maxiumum capactiy of vector</tip>
          <help>Gets maxiumum capactiy of vector</help>
          <return type="uint">
            <tip>Maxiumum capactiy of vector</tip>
            <help>Maxiumum capactiy of vector</help>
          </return>
        </method>
        <method name="Add">
          <tip>Adds new element to vector</tip>
          <help>Adds new element to vector</help>
          <return type="boolean">
            <tip>True/False</tip>
            <help>True/False</help>
          </return>
          <arg name="item" type="T">
            <tip>Item to add</tip>
          </arg>
        </method>
        <method name="Get">
          <tip>Finds element by index</tip>
          <help>Finds element by index</help>
          <return type="L2TConfig.BuffsSetting">
            <tip>Element</tip>
            <help>Element</help>
          </return>
          <arg name="index" type="uint">
            <tip>Index</tip>
          </arg>
        </method>
        <method name="Update">
          <tip>Replace element on vector</tip>
          <help>Replace element on vector</help>
          <return type="boolean">
            <tip>True/False</tip>
            <help>True/False</help>
          </return>
          <arg name="item" type="T">
            <tip>Item</tip>
          </arg>
          <arg name="index" type="uint">
            <tip>Index of element</tip>
          </arg>
        </method>
        <method name="Erase">
          <tip>Remove element from vector</tip>
          <help>Remove element from vector</help>
          <return type="boolean">
            <tip>True if success</tip>
            <help>True if success</help>
          </return>
          <arg name="index" type="uint">
            <tip>Index of element</tip>
          </arg>
        </method>
        <method name="Clear">
          <tip>Remove all elements from vector</tip>
          <help>Remove all elements from vector</help>
        </method>
        <method name="MoveUp">
          <tip>Move element up</tip>
          <help>Move element up</help>
          <return type="boolean">
            <tip>True if success</tip>
            <help>True if success</help>
          </return>
          <arg name="index" type="uint">
            <tip>Index of element</tip>
          </arg>
        </method>
        <method name="MoveDown">
          <tip>Move element down</tip>
          <help>Move element down</help>
          <return type="boolean">
            <tip>True if success</tip>
            <help>True if success</help>
          </return>
          <arg name="index" type="uint">
            <tip>Index of element</tip>
          </arg>
        </method>
      </class>
      <class name="BuffsSettings" creatable="false">
        <tip>Class contains information about buffs setting (Sellf and Pet).</tip>
        <help>Class contains information about buffs setting (Sellf and Pet).</help>
        <property type="boolean" name="enabled">
          <tip>Global switch for enable automatic buffs</tip>
          <help>Global switch for enable automatic buffs</help>
        </property>
        <property type="int" name="range">
          <tip>Maximum range to characters</tip>
          <help>Maximum range to characters</help>
        </property>
        <property type="L2TConfig.SharedVector&lt;L2TConfig.BuffsSetting&gt;" name="buffs">
          <tip>List of buffs</tip>
          <help>List of buffs</help>
        </property>
      </class>
      <class name="DanceSongsSetting">
        <tip>Settings for one Dance/Song</tip>
        <help>Settings for one Dance/Song</help>
        <property type="int" name="skillId">
          <tip>SkillId of configured Dance/Song</tip>
          <help>SkillId of configured Dance/Song</help>
        </property>
        <constructor>
          <tip>Default non-parameter constructor.</tip>
          <help> Default non-parameter constructor. See class tip.</help>
        </constructor>
      </class>
      <class name="DanceSongsSettings" creatable="false">
        <tip>Settings for all Dance/Song</tip>
        <help>Settings for all Dance/Song</help>
        <property type="boolean" name="enabled">
          <tip>Global switch for songs/dances.</tip>
          <help>Global switch for songs/dances.</help>
        </property>
        <property type="int" name="maxDelayEvery">
          <tip>Max delay in miliseconds bettwen songs/dances use</tip>
          <help>Max delay in miliseconds bettwen songs/dances use</help>
        </property>
        <property type="int" name="maxDelayAfter">
          <tip>Max delay in miliseconds after songs/dances use</tip>
          <help>Max delay in miliseconds after songs/dances use</help>
        </property>
        <property type="int" name="minDelayEvery">
          <tip>Max delay in miliseconds bettwen songs/dances use</tip>
          <help>Max delay in miliseconds bettwen songs/dances use</help>
        </property>
        <property type="int" name="minDelayAfter">
          <tip>Max delay in miliseconds after songs/dances use</tip>
          <help>Max delay in miliseconds after songs/dances use</help>
        </property>
        <property type="L2TConfig.SharedVector&lt;L2TConfig.DanceSongsSetting&gt;" name="buffs">
          <tip>List of all configured songs/dances</tip>
          <help>List of all configured songs/dances</help>
        </property>
      </class>
      <class name="AssistSetting">
        <tip>Class for every assist configuration item</tip>
        <help>Class for every assist configuration item</help>
        <property type="int" name="objectId" readonly="true">
          <tip>Character objectId</tip>
          <help>Character objectId</help>
        </property>
        <method name="SetName">
          <tip>Sets character name</tip>
          <help>Sets character name</help>
          <arg name="name" type="string">
            <tip>Character name</tip>
          </arg>
        </method>
        <method name="GetName">
          <tip>Gets character name</tip>
          <help>Gets character name</help>
          <return type="string">
            <tip>Character name</tip>
            <help>Character name</help>
          </return>
        </method>
        <constructor>
          <tip>Construct AssistSetting object type</tip>
          <help>Construct AssistSetting object type</help>
        </constructor>
      </class>
      <class name="AssistSettings" creatable="false">
        <tip>Configuration for all assist items</tip>
        <help>Configuration for all assist items</help>
        <property type="L2TConfig.EAssistType" name="option">
          <tip>Assist state</tip>
          <help>Assist state</help>
        </property>
        <property type="int" name="range">
          <tip>Maximum range of assist</tip>
          <help>Maximum range of assist</help>
        </property>
        <property type="L2TConfig.SharedVector&lt;L2TConfig.AssistSetting&gt;" name="players">
          <tip>List of players to assist</tip>
          <help>List of players to assist</help>
        </property>
      </class>
      <class name="AugmentData" creatable="false">
        <tip>Settings for agument item</tip>
        <help>Settings for agument item</help>
        <property type="int" name="id" readonly="true">
          <tip>Agument ID</tip>
          <help>Agument ID</help>
        </property>
        <property type="boolean" name="Keep">
          <tip>Information if keep this agument or not</tip>
          <help>Information if keep this agument or not</help>
        </property>
      </class>
      <class name="AugmentCollection" creatable="false">
        <tip>List of all aguments</tip>
        <help>List of all aguments</help>
        <method name="GetCount">
          <tip>Method return maximum Id of agument.</tip>
          <help>Method return maximum Id of agument.</help>
          <return type="int">
            <tip>Maximum ID</tip>
            <help>Maximum ID</help>
          </return>
        </method>
        <method name="GetItem">
          <tip>Method return agument configuration</tip>
          <help>Method return agument configuration</help>
          <return type="L2TConfig.AugmentData">
            <tip>Agument Item</tip>
            <help>Agument Item</help>
          </return>
          <arg name="id" type="int">
            <tip>Agument Id</tip>
          </arg>
        </method>
      </class>
      <class name="FollowPlayer">
        <tip>FollowPlayer item setting</tip>
        <help>FollowPlayer item setting</help>
        <property type="uint" name="objectId" readonly="true">
          <tip>ObjectId of character</tip>
          <help>ObjectId of character</help>
        </property>
        <method name="SetName">
          <tip>Sets character name</tip>
          <help>Sets character name</help>
          <arg name="name" type="string">
            <tip>Character name</tip>
          </arg>
        </method>
        <method name="GetName">
          <tip>Gets character name</tip>
          <help>Gets character name</help>
          <return type="string">
            <tip>Character name</tip>
            <help>Character name</help>
          </return>
        </method>
        <constructor>
          <tip>Constructs FollowPlayer object</tip>
          <help>Constructs FollowPlayer object</help>
        </constructor>
      </class>
      <class name="FollowSettings" creatable="false">
        <tip>Follow settings</tip>
        <help>Follow settings</help>
        <property type="L2TConfig.EFollowMode" name="followMode">
          <tip>Follow mode</tip>
          <help>Follow mode</help>
        </property>
        <property type="L2TConfig.FollowOrder" name="followOrder">
          <tip>Follow order</tip>
          <help>Follow order</help>
        </property>
        <property type="L2TConfig.SharedVector&lt;L2TConfig.FollowPlayer&gt;" name="players">
          <tip>Players list</tip>
          <help>Players list</help>
        </property>
        <property type="int" name="followRangeMin">
          <tip>Follow minimum range</tip>
          <help>Follow minimum range</help>
        </property>
        <property type="int" name="followRangeMax">
          <tip>Follow maximum range</tip>
          <help>Follow maximum range</help>
        </property>
      </class>
      <class name="GlobalSettings" creatable="false">
        <tip>Global config settings</tip>
        <help>Global config settings</help>
        <property type="boolean" name="pvpTarget">
          <tip>Is PVP targeting enabled ?</tip>
          <help>Is PVP targeting enabled ?</help>
        </property>
        <property type="boolean" name="shiftTargeting">
          <tip>Use shift when targeting</tip>
          <help>Use shift when targeting</help>
        </property>
        <property type="boolean" name="titleChange">
          <tip>Change title of users to show they targets</tip>
          <help>Change title of users to show they targets</help>
        </property>
        <property type="boolean" name="disableMovies">
          <tip>Disable game movies</tip>
          <help>Disable game movies</help>
        </property>
        <property type="boolean" name="fastTeleport">
          <tip>Enable fast teleport</tip>
          <help>Enable fast teleport</help>
        </property>
        <property type="boolean" name="titleTargetChange">
          <tip>Alow target title change</tip>
          <help>Alow target title change</help>
        </property>
      </class>
      <class name="ConfigItemDetailData" creatable="false">
        <tip>Item detail data</tip>
        <help>Item detail data</help>
        <property type="boolean" name="Pickup">
          <tip>Should item be pickup</tip>
          <help>Should item be pickup</help>
        </property>
        <property type="boolean" name="DeleteItem">
          <tip>Should item be deleted</tip>
          <help>Should item be deleted</help>
        </property>
        <property type="boolean" name="DeleteItemIfOverweight">
          <tip>Should item be deleted when character is overweight</tip>
          <help>Should item be deleted when character is overweight</help>
        </property>
        <property type="int64" name="MaxCount">
          <tip>Maximum allowed count of items when removing</tip>
          <help>Maximum allowed count of items when removing</help>
        </property>
      </class>
      <class name="ConfigItemData" creatable="false">
        <tip>Item data</tip>
        <help>Item data</help>
        <property type="int" name="TypeId" readonly="true">
          <tip>Item ID</tip>
          <help>Item ID</help>
        </property>
        <property type="L2TConfig.EPriority" name="Priority">
          <tip>Item pickup priority</tip>
          <help>Item pickup priority</help>
        </property>
        <property type="L2TConfig.ConfigItemDetailData" name="Me">
          <tip>Item pickup settings when pickuped by ME</tip>
          <help>Item pickup settings when pickuped by ME</help>
        </property>
        <property type="L2TConfig.ConfigItemDetailData" name="Pet">
          <tip>Item pickup settings when pickuped by PET</tip>
          <help>Item pickup settings when pickuped by PET</help>
        </property>
      </class>
      <class name="ConfigItemCollection" creatable="false">
        <tip>Item settings</tip>
        <help>Item settings</help>
        <method name="GetCount">
          <tip>Returns maximum count of items (max item id)</tip>
          <help>Returns maximum count of items (max item id)</help>
          <return type="int">
            <tip>Max Item ID</tip>
            <help>Max Item ID</help>
          </return>
        </method>
        <method name="GetItem">
          <tip>Returns item settings</tip>
          <help>Returns item settings</help>
          <return type="L2TConfig.ConfigItemData">
            <tip>Item</tip>
            <help>Item</help>
          </return>
          <arg name="id" type="int">
            <tip>Item index/Id</tip>
          </arg>
        </method>
      </class>
      <class name="NukeSetting">
        <tip>Nuke setting</tip>
        <help>Nuke setting</help>
        <property type="int" name="skillId">
          <tip>Skill Id</tip>
          <help>Skill Id</help>
        </property>
        <property type="int" name="useEvery">
          <tip>Use every some time, time in seconds</tip>
          <help>Use every some time, time in seconds</help>
        </property>
        <property type="boolean" name="useRepeat">
          <tip>Use more than once on one target</tip>
          <help>Use more than once on one target</help>
        </property>
        <property type="int" name="targetCount">
          <tip>Minimum monsters in targetRange to use this nuke, for AOE</tip>
          <help>Minimum monsters in targetRange to use this nuke, for AOE</help>
        </property>
        <property type="int" name="targetRange">
          <tip>Maximum range for skill usage</tip>
          <help>Maximum range for skill usage</help>
        </property>
        <property type="boolean" name="requireTarget">
          <tip>This skill require valid target</tip>
          <help>This skill require valid target</help>
        </property>
        <property type="L2TConfig.ENukeCondition" name="targetHpCondition">
          <tip>HP condition for target</tip>
          <help>HP condition for target</help>
        </property>
        <property type="int" name="targetHpValue">
          <tip>HP condition value for target</tip>
          <help>HP condition value for target</help>
        </property>
        <property type="L2TConfig.ENukeCondition" name="meHpCondition">
          <tip>HP condition for ME</tip>
          <help>HP condition for ME</help>
        </property>
        <property type="int" name="meHpValue">
          <tip>HP value for condition</tip>
          <help>HP value for condition</help>
        </property>
        <property type="L2TConfig.ENukeCondition" name="meMpCondition">
          <tip>MP condition for ME</tip>
          <help>MP condition for ME</help>
        </property>
        <property type="int" name="meMpValue">
          <tip>MP value for condition</tip>
          <help>MP value for condition</help>
        </property>
        <property type="uint64" name="lastUseTime">
          <tip>last use time in ms since computer start</tip>
          <help>last use time in ms since computer start</help>
        </property>
        <property type="int" name="lastUseTargetId">
          <tip>last use target id</tip>
          <help>last use target id</help>
        </property>
        <constructor>
          <tip>Nuke setting default constructor</tip>
          <help>Nuke setting default constructor</help>
        </constructor>
      </class>
      <class name="NukeSettings" creatable="false">
        <tip>Nuke Settings</tip>
        <help>Nuke Settings</help>
        <property type="boolean" name="enabled">
          <tip>Global switch for auto nuke</tip>
          <help>Global switch for auto nuke</help>
        </property>
        <property type="L2TConfig.SharedVector&lt;L2TConfig.NukeSetting&gt;" name="skills">
          <tip>List of nuke skills</tip>
          <help>List of nuke skills</help>
        </property>
      </class>
      <class name="PotionSetting" creatable="false">
        <tip>Potion setting</tip>
        <help>Potion setting</help>
        <property type="int" name="ItemId">
          <tip>Potion Item ID</tip>
          <help>Potion Item ID</help>
        </property>
        <property type="int" name="SkillId">
          <tip>Skill ID associated with item, its used soemtimes for detecting reuse, or checking if user already using such potions.</tip>
          <help>Skill ID associated with item, its used soemtimes for detecting reuse, or checking if user already using such potions.</help>
        </property>
        <property type="int" name="CooldownTime">
          <tip>CooldownTime in ms</tip>
          <help>CooldownTime in ms</help>
        </property>
        <property type="int" name="Damage">
          <tip>If player got 2300/5000 HP then Damage is equal to 2700.
This is a minimum damage required to use this potion, you can put here 0.</tip>
          <help>If player got 2300/5000 HP then Damage is equal to 2700.
This is a minimum damage required to use this potion, you can put here 0.</help>
        </property>
        <property type="int" name="DamagePercent">
          <tip>Same as "Damage" but in %</tip>
          <help>Same as "Damage" but in %</help>
        </property>
        <property type="int" name="LevelMin">
          <tip>Minimum level from what item can be used.</tip>
          <help>Minimum level from what item can be used.</help>
        </property>
        <property type="int" name="LevelMax">
          <tip>Maximum level till what item can be used.</tip>
          <help>Maximum level till what item can be used.</help>
        </property>
      </class>
      <class name="PotionGroupHP" creatable="false">
        <tip>Potion group for HP potions</tip>
        <help>Potion group for HP potions</help>
        <property type="boolean" name="enabled">
          <tip>Global switch for auto HP potions</tip>
          <help>Global switch for auto HP potions</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="QuickHealingPotion">
          <tip>QuickHealingPotion potion configuration</tip>
          <help>QuickHealingPotion potion configuration</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="TemporaryHealingPotion">
          <tip>TemporaryHealingPotion potion configuration</tip>
          <help>TemporaryHealingPotion potion configuration</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="BattleTournamentQuickHealingPotion">
          <tip>BattleTournamentQuickHealingPotion potion configuration</tip>
          <help>BattleTournamentQuickHealingPotion potion configuration</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="PowerfulHealingPotion">
          <tip>PowerfulHealingPotion potion configuration</tip>
          <help>PowerfulHealingPotion potion configuration</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="GreaterHealingPotion">
          <tip>GreaterHealingPotion potion configuration</tip>
          <help>GreaterHealingPotion potion configuration</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="HighestPowerHealingPotion">
          <tip>HighestPowerHealingPotion potion configuration</tip>
          <help>HighestPowerHealingPotion potion configuration</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="HealingPotion2">
          <tip>HealingPotion2 potion configuration</tip>
          <help>HealingPotion2 potion configuration</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="HealingPotion1">
          <tip>HealingPotion1 potion configuration</tip>
          <help>HealingPotion1 potion configuration</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="LesserHealingPotion">
          <tip>LesserHealingPotion potion configuration</tip>
          <help>LesserHealingPotion potion configuration</help>
        </property>
      </class>
      <class name="PotionGroupElixirHP" creatable="false">
        <tip />
        <property type="boolean" name="enabled">
          <tip>Global switch for auto use of HP elixirs</tip>
          <help>Global switch for auto use of HP elixirs</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="gradeNo">
          <tip>Configuration for gradeNo type elixirs.</tip>
          <help>Configuration for gradeNo type elixirs.</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="gradeD">
          <tip>Configuration for gradeD type elixirs.</tip>
          <help>Configuration for gradeD type elixirs.</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="gradeC">
          <tip>Configuration for gradeC type elixirs.</tip>
          <help>Configuration for gradeC type elixirs.</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="gradeB">
          <tip>Configuration for gradeB type elixirs.</tip>
          <help>Configuration for gradeB type elixirs.</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="gradeA">
          <tip>Configuration for gradeA type elixirs.</tip>
          <help>Configuration for gradeA type elixirs.</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="gradeS">
          <tip>Configuration for gradeS type elixirs.</tip>
          <help>Configuration for gradeS type elixirs.</help>
        </property>
      </class>
      <class name="PotionGroupMP" creatable="false">
        <tip />
        <property type="boolean" name="enabled">
          <tip>Global switch for auto use of MP potions</tip>
          <help>Global switch for auto use of MP potions</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="ManaPotion">
          <tip>ManaPotion potion configuration</tip>
          <help>ManaPotion potion configuration</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="ManaDrug">
          <tip>ManaDrug potion configuration</tip>
          <help>ManaDrug potion configuration</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="EnhancedManaPotion">
          <tip>EnhancedManaPotion potion configuration</tip>
          <help>EnhancedManaPotion potion configuration</help>
        </property>
      </class>
      <class name="PotionGroupElixirMP" creatable="false">
        <tip />
        <property type="boolean" name="enabled">
          <tip>Global switch for auto use of MP elixirs</tip>
          <help>Global switch for auto use of MP elixirs</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="gradeNo">
          <tip>Configuration for gradeNo type elixirs.</tip>
          <help>Configuration for gradeNo type elixirs.</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="gradeD">
          <tip>Configuration for gradeD type elixirs.</tip>
          <help>Configuration for gradeD type elixirs.</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="gradeC">
          <tip>Configuration for gradeC type elixirs.</tip>
          <help>Configuration for gradeC type elixirs.</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="gradeB">
          <tip>Configuration for gradeB type elixirs.</tip>
          <help>Configuration for gradeB type elixirs.</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="gradeA">
          <tip>Configuration for gradeA type elixirs.</tip>
          <help>Configuration for gradeA type elixirs.</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="gradeS">
          <tip>Configuration for gradeS type elixirs.</tip>
          <help>Configuration for gradeS type elixirs.</help>
        </property>
      </class>
      <class name="PotionGroupCP" creatable="false">
        <tip />
        <property type="boolean" name="enabled">
          <tip>Global switch for auto use of CP potions</tip>
          <help>Global switch for auto use of CP potions</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="CPPotion">
          <tip>CPPotion potion configuration</tip>
          <help>CPPotion potion configuration</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="GreaterCPPotion">
          <tip>GreaterCPPotion potion configuration</tip>
          <help>GreaterCPPotion potion configuration</help>
        </property>
      </class>
      <class name="PotionGroupElixirCP" creatable="false">
        <tip />
        <property type="boolean" name="enabled">
          <tip>Global switch for auto use of CP elixirs</tip>
          <help>Global switch for auto use of CP elixirs</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="gradeNo">
          <tip>Configuration for gradeNo type elixirs.</tip>
          <help>Configuration for gradeNo type elixirs.</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="gradeD">
          <tip>Configuration for gradeD type elixirs.</tip>
          <help>Configuration for gradeD type elixirs.</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="gradeC">
          <tip>Configuration for gradeC type elixirs.</tip>
          <help>Configuration for gradeC type elixirs.</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="gradeB">
          <tip>Configuration for gradeB type elixirs.</tip>
          <help>Configuration for gradeB type elixirs.</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="gradeA">
          <tip>Configuration for gradeA type elixirs.</tip>
          <help>Configuration for gradeA type elixirs.</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="gradeS">
          <tip>Configuration for gradeS type elixirs.</tip>
          <help>Configuration for gradeS type elixirs.</help>
        </property>
      </class>
      <class name="PotionGroupDeathPenalty" creatable="false">
        <tip>Death penalty configuration class</tip>
        <help>Death penalty configuration class</help>
        <property type="boolean" name="enabled">
          <tip>Global switch for death penalty scrolls usage.</tip>
          <help>Global switch for death penalty scrolls usage.</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="gradeNo">
          <tip>Configuration for gradeNo type penalty scrolls.</tip>
          <help>Configuration for gradeNo type penalty scrolls.</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="gradeD">
          <tip>Configuration for gradeD type penalty scrolls.</tip>
          <help>Configuration for gradeD type penalty scrolls.</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="gradeC">
          <tip>Configuration for gradeC type penalty scrolls.</tip>
          <help>Configuration for gradeC type penalty scrolls.</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="gradeB">
          <tip>Configuration for gradeB type penalty scrolls.</tip>
          <help>Configuration for gradeB type penalty scrolls.</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="gradeA">
          <tip>Configuration for gradeA type penalty scrolls.</tip>
          <help>Configuration for gradeA type penalty scrolls.</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="gradeS">
          <tip>Configuration for gradeS type penalty scrolls.</tip>
          <help>Configuration for gradeS type penalty scrolls.</help>
        </property>
      </class>
      <class name="PotionGroupBattleElixirHP" creatable="false">
        <tip>Battle HP elixirs configuration</tip>
        <help>Battle HP elixirs configuration</help>
        <property type="boolean" name="enabled">
          <tip>Global switch for Battle HP elixirs usage</tip>
          <help>Global switch for Battle HP elixirs usage</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="elixir">
          <tip>Elixir configuration</tip>
          <help>Elixir configuration</help>
        </property>
      </class>
      <class name="PotionGroupBattleElixirMP" creatable="false">
        <tip>Battle MP elixirs configuration</tip>
        <help>Battle MP elixirs configuration</help>
        <property type="boolean" name="enabled">
          <tip>Global switch for Battle MP elixirs usage</tip>
          <help>Global switch for Battle MP elixirs usage</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="elixir">
          <tip>Elixir configuration</tip>
          <help>Elixir configuration</help>
        </property>
      </class>
      <class name="PotionGroupBattleElixirCP" creatable="false">
        <tip>Battle CP elixirs configuration</tip>
        <help>Battle CP elixirs configuration</help>
        <property type="boolean" name="enabled">
          <tip>Global switch for Battle CP elixirs usage</tip>
          <help>Global switch for Battle CP elixirs usage</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="elixir">
          <tip>Elixir configuration</tip>
          <help>Elixir configuration</help>
        </property>
      </class>
      <class name="PotionKamaelSouls" creatable="false">
        <tip>Kamael Souls configuration class</tip>
        <help>Kamael Souls configuration class</help>
        <property type="boolean" name="useSoulsEnabled">
          <tip>Configuration for useSoulsEnabled potions settings group</tip>
          <help>Configuration for useSoulsEnabled potions settings group</help>
        </property>
        <property type="boolean" name="fillSoulsEnabled">
          <tip>Configuration for fillSoulsEnabled potions settings group</tip>
          <help>Configuration for fillSoulsEnabled potions settings group</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="emptyBottle">
          <tip>Configuration for emptyBottle potions settings group</tip>
          <help>Configuration for emptyBottle potions settings group</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="Bottle5Souls">
          <tip>Configuration for Bottle5Souls potions settings group</tip>
          <help>Configuration for Bottle5Souls potions settings group</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="Bottle5SoulsCombat">
          <tip>Configuration for Bottle5SoulsCombat potions settings group</tip>
          <help>Configuration for Bottle5SoulsCombat potions settings group</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="Bottle10Souls">
          <tip>Configuration for Bottle10Souls potions settings group</tip>
          <help>Configuration for Bottle10Souls potions settings group</help>
        </property>
      </class>
      <class name="PotionGroupPetHP" creatable="false">
        <tip>HP potion usage by Pet configuration class</tip>
        <help>HP potion usage by Pet configuration class</help>
        <property type="boolean" name="enabled">
          <tip>Global switch for HP Pet potions usage</tip>
          <help>Global switch for HP Pet potions usage</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="PowerfulHealingPotion">
          <tip>Configuration for PowerfulHealingPotion potion usage</tip>
          <help>Configuration for PowerfulHealingPotion potion usage</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="GreaterHealingPotion">
          <tip>Configuration for GreaterHealingPotion potion usage</tip>
          <help>Configuration for GreaterHealingPotion potion usage</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="HighestPowerHealingPotion">
          <tip>Configuration for HighestPowerHealingPotion potion usage</tip>
          <help>Configuration for HighestPowerHealingPotion potion usage</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="HealingPotion2">
          <tip>Configuration for HealingPotion2 potion usage</tip>
          <help>Configuration for HealingPotion2 potion usage</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="HealingPotion1">
          <tip>Configuration for HealingPotion1 potion usage</tip>
          <help>Configuration for HealingPotion1 potion usage</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="LesserHealingPotion">
          <tip>Configuration for LesserHealingPotion potion usage</tip>
          <help>Configuration for LesserHealingPotion potion usage</help>
        </property>
      </class>
      <class name="PotionGroupPetMP" creatable="false">
        <tip>MP potion usage by Pet configuration class</tip>
        <help>MP potion usage by Pet configuration class</help>
        <property type="boolean" name="enabled">
          <tip>Global switch for MP Pet potions usage</tip>
          <help>Global switch for MP Pet potions usage</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="ManaPotion">
          <tip>Configuration for ManaPotion potion usage</tip>
          <help>Configuration for ManaPotion potion usage</help>
        </property>
        <property type="L2TConfig.PotionSetting" name="ManaDrug">
          <tip>Configuration for ManaDrug potion usage</tip>
          <help>Configuration for ManaDrug potion usage</help>
        </property>
      </class>
      <class name="PotionSettings" creatable="false">
        <tip>Main poitions configuration class</tip>
        <help>Main poitions configuration class</help>
        <property type="boolean" name="enabled">
          <tip>Global switch for all potions configuration</tip>
          <help>Global switch for all potions configuration</help>
        </property>
        <property type="L2TConfig.PotionGroupHP" name="HP">
          <tip>HP potion/item type configuration</tip>
          <help>HP potion/item type configuration</help>
        </property>
        <property type="L2TConfig.PotionGroupElixirHP" name="ElixirHP">
          <tip>ElixirHP potion/item type configuration</tip>
          <help>ElixirHP potion/item type configuration</help>
        </property>
        <property type="L2TConfig.PotionGroupMP" name="MP">
          <tip>MP potion/item type configuration</tip>
          <help>MP potion/item type configuration</help>
        </property>
        <property type="L2TConfig.PotionGroupElixirMP" name="ElixirMP">
          <tip>ElixirMP potion/item type configuration</tip>
          <help>ElixirMP potion/item type configuration</help>
        </property>
        <property type="L2TConfig.PotionGroupCP" name="CP">
          <tip>CP potion/item type configuration</tip>
          <help>CP potion/item type configuration</help>
        </property>
        <property type="L2TConfig.PotionGroupElixirCP" name="ElixirCP">
          <tip>ElixirCP potion/item type configuration</tip>
          <help>ElixirCP potion/item type configuration</help>
        </property>
        <property type="L2TConfig.PotionGroupDeathPenalty" name="DeathPenalty">
          <tip>DeathPenalty potion/item type configuration</tip>
          <help>DeathPenalty potion/item type configuration</help>
        </property>
        <property type="L2TConfig.PotionGroupBattleElixirHP" name="BattleHP">
          <tip>BattleHP potion/item type configuration</tip>
          <help>BattleHP potion/item type configuration</help>
        </property>
        <property type="L2TConfig.PotionGroupBattleElixirMP" name="BattleMP">
          <tip>BattleMP potion/item type configuration</tip>
          <help>BattleMP potion/item type configuration</help>
        </property>
        <property type="L2TConfig.PotionGroupBattleElixirCP" name="BattleCP">
          <tip>BattleCP potion/item type configuration</tip>
          <help>BattleCP potion/item type configuration</help>
        </property>
        <property type="L2TConfig.PotionGroupPetHP" name="PetHP">
          <tip>PetHP potion/item type configuration</tip>
          <help>PetHP potion/item type configuration</help>
        </property>
        <property type="L2TConfig.PotionGroupPetMP" name="PetMP">
          <tip>PetMP potion/item type configuration</tip>
          <help>PetMP potion/item type configuration</help>
        </property>
        <property type="L2TConfig.PotionKamaelSouls" name="Souls">
          <tip>Souls potion/item type configuration</tip>
          <help>Souls potion/item type configuration</help>
        </property>
      </class>
      <class name="PveMonsterData" creatable="false">
        <tip>PVE configuration for monster</tip>
        <help>PVE configuration for monster</help>
        <property type="int" name="TypeId" readonly="true">
          <tip>Monster NPC ID</tip>
          <help>Monster NPC ID</help>
        </property>
        <property type="L2TConfig.PveMonsterType" name="Type">
          <tip>Monster Type (NPC/Monster/...)</tip>
          <help>Monster Type (NPC/Monster/...)</help>
        </property>
        <property type="L2TConfig.EPriority" name="Priority">
          <tip>Monster attack priority</tip>
          <help>Monster attack priority</help>
        </property>
        <property type="boolean" name="Aggresive">
          <tip>Is monster agressive</tip>
          <help>Is monster agressive</help>
        </property>
        <property type="boolean" name="Spoilable">
          <tip>Is monster spoilable</tip>
          <help>Is monster spoilable</help>
        </property>
        <property type="boolean" name="Attackable">
          <tip>Is monster attackable</tip>
          <help>Is monster attackable</help>
        </property>
        <property type="boolean" name="PickupDrop">
          <tip>Is monster drops have to be pickup</tip>
          <help>Is monster drops have to be pickup</help>
        </property>
      </class>
      <class name="PveMonsterCollection" creatable="false">
        <tip>Object that contain configuration for monster targeting</tip>
        <help>Object that contain configuration for monster targeting</help>
        <method name="GetCount">
          <tip>Returns count of monsters (max npc id)</tip>
          <help>Returns count of monsters (max npc id)</help>
          <return type="int">
            <tip>count of monsters (max npc id)</tip>
            <help>count of monsters (max npc id)</help>
          </return>
        </method>
        <method name="SetAll">
          <tip>Sets all monsters as attackable or ot</tip>
          <help>Sets all monsters as attackable or ot</help>
          <arg name="attackable" type="boolean">
            <tip>Should all monsters be attacked by bot or not</tip>
          </arg>
        </method>
        <method name="GetMonster">
          <tip>Search and return monster</tip>
          <help>Search and return monster</help>
          <return type="L2TConfig.PveMonsterData">
            <tip>Monster object</tip>
            <help>Monster object</help>
          </return>
          <arg name="npcId" type="int">
            <tip>npcId of monster</tip>
          </arg>
        </method>
      </class>
      <class name="SleepSettings" creatable="false">
        <tip>Sleep settings configuration</tip>
        <help>Sleep settings configuration</help>
        <property type="boolean" name="enabled">
          <tip>Global switch for Sleep logic</tip>
          <help>Global switch for Sleep logic</help>
        </property>
        <property type="int" name="sitMP">
          <tip>sitMP configuration property</tip>
          <help>sitMP configuration property</help>
        </property>
        <property type="int" name="standMP">
          <tip>standMP configuration property</tip>
          <help>standMP configuration property</help>
        </property>
        <property type="int" name="sitHP">
          <tip>sitHP configuration property</tip>
          <help>sitHP configuration property</help>
        </property>
        <property type="int" name="standHP">
          <tip>standHP configuration property</tip>
          <help>standHP configuration property</help>
        </property>
        <property type="boolean" name="useRelax">
          <tip>useRelax configuration property</tip>
          <help>useRelax configuration property</help>
        </property>
        <property type="boolean" name="noActionSleep">
          <tip>noActionSleep configuration property</tip>
          <help>noActionSleep configuration property</help>
        </property>
        <property type="int" name="sleepPointX">
          <tip>sleepPointX configuration property</tip>
          <help>sleepPointX configuration property</help>
        </property>
        <property type="int" name="sleepPointY">
          <tip>sleepPointY configuration property</tip>
          <help>sleepPointY configuration property</help>
        </property>
        <property type="int" name="sleepPointZ">
          <tip>sleepPointZ configuration property</tip>
          <help>sleepPointZ configuration property</help>
        </property>
        <method name="SetFollowSleepNick">
          <tip>Sets new follow sleep nick</tip>
          <help>Sets new follow sleep nick</help>
          <arg name="nick" type="string">
            <tip>Character name</tip>
          </arg>
        </method>
        <method name="GetFollowSleepNick">
          <tip>Gets already set follow sleep nick</tip>
          <help>Gets already set follow sleep nick</help>
          <return type="string">
            <tip>Character name or empty string if not set</tip>
            <help>Character name or empty string if not set</help>
          </return>
        </method>
      </class>
      <class name="PickupSetting" creatable="false">
        <tip>Pickup setting configuration class</tip>
        <help>Pickup setting configuration class</help>
        <property type="L2TConfig.EPickupMode" name="mode">
          <tip>Pickup mode</tip>
          <help>Pickup mode</help>
        </property>
        <property type="int" name="pickupRange">
          <tip>Pickup range</tip>
          <help>Pickup range</help>
        </property>
      </class>
      <class name="PickupSettings" creatable="false">
        <tip>Pickup settings configuration class</tip>
        <help>Pickup settings configuration class</help>
        <property type="L2TConfig.PickupSetting" name="userPickup">
          <tip>userPickup configuration</tip>
          <help>userPickup configuration</help>
        </property>
        <property type="L2TConfig.PickupSetting" name="petPickup">
          <tip>petPickup configuration</tip>
          <help>petPickup configuration</help>
        </property>
        <property type="boolean" name="enabled">
          <tip>Global switch for pickup</tip>
          <help>Global switch for pickup</help>
        </property>
        <property type="L2TConfig.EPickupDropFilters" name="filters">
          <tip>Filters configuration for pickup, this is a bitset field</tip>
          <help>Filters configuration for pickup, this is a bitset field</help>
        </property>
        <property type="int" name="pickupTimeout">
          <tip>Pickup timeout in ms</tip>
          <help>Pickup timeout in ms</help>
        </property>
        <property type="int" name="pickupTimeoutReset">
          <tip>Pickup timeout reset in ms</tip>
          <help>Pickup timeout reset in ms</help>
        </property>
        <method name="SwapFilter">
          <tip>Swaps pickup filter</tip>
          <help>Swaps pickup filter</help>
          <arg name="filter" type="L2TConfig.EPickupDropFilters">
            <tip>Filter to swap.</tip>
          </arg>
        </method>
        <method name="IsFilter">
          <tip>Checks if filter is enabled</tip>
          <help>Checks if filter is enabled</help>
          <return type="boolean">
            <tip>True/False</tip>
            <help>True/False</help>
          </return>
          <arg name="filter" type="L2TConfig.EPickupDropFilters">
            <tip>Filter</tip>
          </arg>
        </method>
        <method name="CanPickup">
          <tip>Checks if filters are configured to pickup specyfic items type</tip>
          <help>Checks if filters are configured to pickup specyfic items type</help>
          <return type="boolean">
            <tip>True/False</tip>
            <help>True/False</help>
          </return>
          <arg name="filter" type="L2TConfig.EPickupDropFilters">
            <tip>Filter</tip>
          </arg>
        </method>
      </class>
      <class name="SpoilSettings" creatable="false">
        <tip>Spoil settings class</tip>
        <help>Spoil settings class</help>
        <property type="boolean" name="enabledSpoil">
          <tip>enabledSpoil - spoil property</tip>
          <help>enabledSpoil - spoil property</help>
        </property>
        <property type="boolean" name="enabledSweep">
          <tip>enabledSweep - spoil property</tip>
          <help>enabledSweep - spoil property</help>
        </property>
        <property type="int" name="sweepRange">
          <tip>sweepRange - spoil property</tip>
          <help>sweepRange - spoil property</help>
        </property>
        <property type="L2TConfig.SharedVector&lt;int&gt;" name="spoilSkills">
          <tip>spoilSkills - spoil property</tip>
          <help>spoilSkills - spoil property</help>
        </property>
      </class>
      <class name="ReconverySkillSetting">
        <tip>Reconvery skill setting</tip>
        <help>Reconvery skill setting</help>
        <property type="int" name="skillId">
          <tip>skillId reconvery skill property</tip>
          <help>skillId reconvery skill property</help>
        </property>
        <property type="int" name="useEvery">
          <tip>useEvery reconvery skill property</tip>
          <help>useEvery reconvery skill property</help>
        </property>
        <property type="int" name="skillValue">
          <tip>skillValue reconvery skill property</tip>
          <help>skillValue reconvery skill property</help>
        </property>
        <property type="int" name="minCount">
          <tip>minCount reconvery skill property</tip>
          <help>minCount reconvery skill property</help>
        </property>
        <property type="boolean" name="requireTarget">
          <tip>requireTarget reconvery skill property</tip>
          <help>requireTarget reconvery skill property</help>
        </property>
        <property type="boolean" name="useInCombat">
          <tip>useInCombat reconvery skill property</tip>
          <help>useInCombat reconvery skill property</help>
        </property>
        <property type="uint64" name="lastUseTime">
          <tip>lastUseTime reconvery skill property</tip>
          <help>lastUseTime reconvery skill property</help>
        </property>
        <constructor>
          <tip>Default constructor</tip>
          <help>Default constructor</help>
        </constructor>
      </class>
      <class name="ReconveryPlayerSetting">
        <tip>Reconvery player setting</tip>
        <help>Reconvery player setting</help>
        <property type="boolean" name="isPet">
          <tip>True if it's player pet</tip>
          <help>True if it's player pet</help>
        </property>
        <property type="int" name="skillValue">
          <tip>Skill usage value</tip>
          <help>Skill usage value</help>
        </property>
        <property type="int" name="objectId" readonly="true">
          <tip>Player/Pet/Summon objectId if set</tip>
          <help>Player/Pet/Summon objectId if set</help>
        </property>
        <property type="uint64" name="lastUse">
          <tip>Last use time in ms.</tip>
          <help>Last use time in ms.</help>
        </property>
        <method name="SetName">
          <tip>Sets new player name</tip>
          <help>Sets new player name</help>
          <arg name="name" type="string">
            <tip>Player name</tip>
          </arg>
        </method>
        <method name="GetName">
          <tip>Gets player name</tip>
          <help>Gets player name</help>
          <return type="string">
            <tip>Player name</tip>
            <help>Player name</help>
          </return>
        </method>
        <constructor>
          <tip>Constructs ReconveryPlayerSetting object</tip>
          <help>Constructs ReconveryPlayerSetting object</help>
        </constructor>
      </class>
      <class name="ReconverySettings" creatable="false">
        <tip>Global settings for reconvery</tip>
        <help>Global settings for reconvery</help>
        <property type="boolean" name="enabled">
          <tip>Reconvery global switch</tip>
          <help>Reconvery global switch</help>
        </property>
        <property type="int" name="range">
          <tip>Maximum range for usage</tip>
          <help>Maximum range for usage</help>
        </property>
        <property type="L2TConfig.SharedVector&lt;L2TConfig.ReconverySkillSetting&gt;" name="skills">
          <tip>skills configuration list</tip>
          <help>skills configuration list</help>
        </property>
        <property type="L2TConfig.SharedVector&lt;L2TConfig.ReconveryPlayerSetting&gt;" name="players">
          <tip>players configuration list</tip>
          <help>players configuration list</help>
        </property>
      </class>
      <class name="PvpClassData" creatable="false">
        <tip>Setting for PVP configuration</tip>
        <help>Setting for PVP configuration</help>
        <property type="L2Class" name="classId" readonly="true">
          <tip>classId property</tip>
          <help>classId property</help>
        </property>
        <property type="int" name="class_aggro">
          <tip>class_aggro property</tip>
          <help>class_aggro property</help>
        </property>
        <property type="int" name="range_modifier">
          <tip>range_modifier property</tip>
          <help>range_modifier property</help>
        </property>
        <property type="int" name="range_max_threat">
          <tip>range_max_threat property</tip>
          <help>range_max_threat property</help>
        </property>
        <property type="int" name="range_max">
          <tip>range_max property</tip>
          <help>range_max property</help>
        </property>
        <property type="int" name="target_my_party">
          <tip>target_my_party property</tip>
          <help>target_my_party property</help>
        </property>
        <property type="int" name="target_my_clan">
          <tip>target_my_clan property</tip>
          <help>target_my_clan property</help>
        </property>
      </class>
      <class name="PvpClassAggro" creatable="false">
        <tip>Pvp class agro configuration</tip>
        <help>Pvp class agro configuration</help>
        <property type="int" name="skip_dead">
          <tip>skip_dead property</tip>
          <help>skip_dead property</help>
        </property>
        <property type="int" name="flagged">
          <tip>flagged property</tip>
          <help>flagged property</help>
        </property>
        <property type="int" name="flagged_blink">
          <tip>flagged_blink property</tip>
          <help>flagged_blink property</help>
        </property>
        <property type="int" name="target_onautotarget">
          <tip>target_onautotarget property</tip>
          <help>target_onautotarget property</help>
        </property>
        <property type="int" name="target_onselftarget">
          <tip>target_onselftarget property</tip>
          <help>target_onselftarget property</help>
        </property>
        <method name="GetItem">
          <tip>Returns item by class Id</tip>
          <help>Returns item by class Id</help>
          <return type="L2TConfig.PvpClassData">
            <tip>PvpClassData</tip>
            <help>PvpClassData</help>
          </return>
          <arg name="ClassId" type="L2Class">
            <tip>Lineage 2 Class Id</tip>
          </arg>
        </method>
      </class>
      <class name="PartyBuffsSetting">
        <tip>Party setting</tip>
        <help>Party setting</help>
        <property type="boolean" name="isPet">
          <tip>isPet party buff property</tip>
          <help>isPet party buff property</help>
        </property>
        <property type="int" name="skillId">
          <tip>skillId party buff property</tip>
          <help>skillId party buff property</help>
        </property>
        <property type="int" name="useEvery">
          <tip>useEvery party buff property</tip>
          <help>useEvery party buff property</help>
        </property>
        <property type="int" name="range">
          <tip>range party buff property</tip>
          <help>range party buff property</help>
        </property>
        <property type="int" name="priority">
          <tip>priority party buff property</tip>
          <help>priority party buff property</help>
        </property>
        <property type="boolean" name="requireTarget">
          <tip>requireTarget party buff property</tip>
          <help>requireTarget party buff property</help>
        </property>
        <property type="int" name="objectId" readonly="true">
          <tip>objectId party buff property</tip>
          <help>objectId party buff property</help>
        </property>
        <property type="uint64" name="lastUse">
          <tip>lastUse party buff property</tip>
          <help>lastUse party buff property</help>
        </property>
        <method name="SetName">
          <tip>Sets character name</tip>
          <help>Sets character name</help>
          <arg name="name" type="string">
            <tip>Character name</tip>
          </arg>
        </method>
        <method name="GetName">
          <tip>Gets character name</tip>
          <help>Gets character name</help>
          <return type="string">
            <tip>Character name</tip>
            <help>Character name</help>
          </return>
        </method>
        <constructor>
          <tip>Default constructor</tip>
          <help>Default constructor</help>
        </constructor>
      </class>
      <class name="PartyBuffsSettings" creatable="false">
        <tip>Class with configuration for party buffs</tip>
        <help>Class with configuration for party buffs</help>
        <property type="boolean" name="enabled">
          <tip>enabled party buff property</tip>
          <help>enabled party buff property</help>
        </property>
        <property type="int" name="range">
          <tip>range party buff property</tip>
          <help>range party buff property</help>
        </property>
        <property type="L2TConfig.SharedVector&lt;L2TConfig.PartyBuffsSetting&gt;" name="buffs">
          <tip>buffs party buff property</tip>
          <help>buffs party buff property</help>
        </property>
      </class>
      <class name="L2PathPoint">
        <tip>PathPoint item class</tip>
        <help>PathPoint item class</help>
        <property type="int" name="X">
          <tip>X location property</tip>
          <help>X location property</help>
        </property>
        <property type="int" name="Y">
          <tip>Y location property</tip>
          <help>Y location property</help>
        </property>
        <property type="int" name="Z">
          <tip>Z location property</tip>
          <help>Z location property</help>
        </property>
        <property type="L2TConfig.ETargetingRangeType" name="type">
          <tip>Pathpoint type</tip>
          <help>Pathpoint type</help>
        </property>
        <property type="int" name="range">
          <tip>range location property</tip>
          <help>range location property</help>
        </property>
        <constructor>
          <tip>Default constructor</tip>
          <help>Default constructor</help>
        </constructor>
      </class>
      <class name="TargetingSettings" creatable="false">
        <tip>Targeting settings class</tip>
        <help>Targeting settings class</help>
        <property type="L2TConfig.ETargetingType" name="option">
          <tip>Targeting selected option</tip>
          <help>Targeting selected option</help>
        </property>
        <property type="L2TConfig.ETargetingRangeType" name="rangeType">
          <tip>Range type</tip>
          <help>Range type</help>
        </property>
        <property type="int" name="range">
          <tip>Range</tip>
          <help>Range</help>
        </property>
        <property type="int" name="z_range">
          <tip>Z-range</tip>
          <help>Z-range</help>
        </property>
        <property type="boolean" name="dontTargetSpoiled">
          <tip>Selected prevent double spoiling</tip>
          <help>Selected prevent double spoiling</help>
        </property>
        <property type="L2TConfig.L2Point" name="centerPoint">
          <tip>Center point for targeting</tip>
          <help>Center point for targeting</help>
        </property>
        <property type="boolean" name="closePathPoint">
          <tip>Enabled close path point, char will go from last path point to first</tip>
          <help>Enabled close path point, char will go from last path point to first</help>
        </property>
        <property type="boolean" name="noMonstersReturnToCenter">
          <tip>If no monster return to center point</tip>
          <help>If no monster return to center point</help>
        </property>
        <property type="L2TConfig.SharedVector&lt;L2TConfig.L2Point&gt;" name="polygonPoints">
          <tip>List of polygon points</tip>
          <help>List of polygon points</help>
        </property>
        <property type="L2TConfig.SharedVector&lt;L2TConfig.L2PathPoint&gt;" name="pathPoints">
          <tip>List of path points</tip>
          <help>List of path points</help>
        </property>
        <method name="SwapFilter">
          <tip>Swaps targeting filter.</tip>
          <help>Swaps targeting filter.</help>
          <arg name="filter" type="L2TConfig.EPickupDropFilters">
            <tip>Filter</tip>
          </arg>
        </method>
        <method name="IsFilter">
          <tip>Is filter enabled</tip>
          <help>Is filter enabled</help>
          <return type="boolean">
            <tip>Tru/False</tip>
            <help>Tru/False</help>
          </return>
          <arg name="filter" type="L2TConfig.EPickupDropFilters">
            <tip>Filter</tip>
          </arg>
        </method>
      </class>
      <class name="PartyPlayer">
        <tip>Party player configuration</tip>
        <help>Party player configuration</help>
        <property type="uint" name="objectId" readonly="true">
          <tip>Object Id of player set when player is near</tip>
          <help>Object Id of player set when player is near</help>
        </property>
        <method name="SetName">
          <tip>Sets player name</tip>
          <help>Sets player name</help>
          <arg name="name" type="string">
            <tip>Name</tip>
          </arg>
        </method>
        <method name="GetName">
          <tip>Gets player name</tip>
          <help>Gets player name</help>
          <return type="string">
            <tip>Name</tip>
            <help>Name</help>
          </return>
        </method>
        <constructor>
          <tip>Default constructor</tip>
          <help>Default constructor</help>
        </constructor>
      </class>
      <class name="PartySettings" creatable="false">
        <tip>Party configuration settings</tip>
        <help>Party configuration settings</help>
        <property type="boolean" name="enabledInvite">
          <tip>enabledInvite property</tip>
          <help>enabledInvite property</help>
        </property>
        <property type="L2TConfig.EPartyType" name="defaultPartyType">
          <tip>defaultPartyType property</tip>
          <help>defaultPartyType property</help>
        </property>
        <property type="int" name="autoInviteRange">
          <tip>autoInviteRange property</tip>
          <help>autoInviteRange property</help>
        </property>
        <property type="L2TConfig.SharedVector&lt;L2TConfig.PartyPlayer&gt;" name="autoInviteList">
          <tip>autoInviteList property</tip>
          <help>autoInviteList property</help>
        </property>
        <property type="boolean" name="enabledDismiss">
          <tip>enabledDismiss property</tip>
          <help>enabledDismiss property</help>
        </property>
        <property type="int" name="autoDismissRange">
          <tip>autoDismissRange property</tip>
          <help>autoDismissRange property</help>
        </property>
        <property type="L2TConfig.SharedVector&lt;L2TConfig.PartyPlayer&gt;" name="autoDismissList">
          <tip>autoDismissList property</tip>
          <help>autoDismissList property</help>
        </property>
        <property type="boolean" name="enabledAccept">
          <tip>enabledAccept property</tip>
          <help>enabledAccept property</help>
        </property>
        <property type="boolean" name="acceptFromClan">
          <tip>acceptFromClan property</tip>
          <help>acceptFromClan property</help>
        </property>
        <property type="boolean" name="acceptFromAlly">
          <tip>acceptFromAlly property</tip>
          <help>acceptFromAlly property</help>
        </property>
        <property type="int" name="autoAcceptRange">
          <tip>autoAcceptRange property</tip>
          <help>autoAcceptRange property</help>
        </property>
        <property type="L2TConfig.EPartyTypeToAccept" name="acceptType">
          <tip>acceptType property</tip>
          <help>acceptType property</help>
        </property>
        <property type="L2TConfig.SharedVector&lt;L2TConfig.PartyPlayer&gt;" name="autoAcceptList">
          <tip>autoAcceptList property</tip>
          <help>autoAcceptList property</help>
        </property>
        <property type="boolean" name="enabledChangeLeader">
          <tip>enabledChangeLeader property</tip>
          <help>enabledChangeLeader property</help>
        </property>
        <property type="L2TConfig.SharedVector&lt;L2TConfig.PartyPlayer&gt;" name="autoChangeLeaderList">
          <tip>autoChangeLeaderList property</tip>
          <help>autoChangeLeaderList property</help>
        </property>
        <property type="boolean" name="enableAutoBuffers">
          <tip>enableAutoBuffers property</tip>
          <help>enableAutoBuffers property</help>
        </property>
        <property type="int" name="autoBuffersRange">
          <tip>autoBuffersRange property</tip>
          <help>autoBuffersRange property</help>
        </property>
        <property type="L2TConfig.SharedVector&lt;L2TConfig.PartyPlayer&gt;" name="autoBuffersList">
          <tip>autoBuffersList property</tip>
          <help>autoBuffersList property</help>
        </property>
      </class>
      <class name="ResurrectSettings" creatable="false">
        <tip>Configuration class for resurrect settings</tip>
        <help>Configuration class for resurrect settings</help>
        <property type="boolean" name="enabled">
          <tip>Global switch for auto resurrect</tip>
          <help>Global switch for auto resurrect</help>
        </property>
        <property type="L2TConfig.EResurrectPlace" name="allowed_places">
          <tip>Set of allowed places where can resurrect</tip>
          <help>Set of allowed places where can resurrect</help>
        </property>
        <property type="boolean" name="autoRevive">
          <tip>autoRevive resurrect property</tip>
          <help>autoRevive resurrect property</help>
        </property>
        <property type="int" name="reviveDelay">
          <tip>reviveDelay resurrect property</tip>
          <help>reviveDelay resurrect property</help>
        </property>
        <property type="boolean" name="autoAccept">
          <tip>autoAccept resurrect property</tip>
          <help>autoAccept resurrect property</help>
        </property>
        <property type="L2TConfig.EDelayResurrect" name="DelayResurrectAccept">
          <tip>DelayResurrectAccept resurrect property</tip>
          <help>DelayResurrectAccept resurrect property</help>
        </property>
        <property type="L2TConfig.EAcceptResurrect" name="ResurrectAccept">
          <tip>ResurrectAccept resurrect property</tip>
          <help>ResurrectAccept resurrect property</help>
        </property>
        <method name="IsAllowed">
          <tip>Checks if place is allowed</tip>
          <help>Checks if place is allowed</help>
          <return type="boolean">
            <tip>True if allowed</tip>
            <help>True if allowed</help>
          </return>
          <arg name="place" type="L2TConfig.EResurrectPlace">
            <tip>ResurrectPlace to check</tip>
          </arg>
        </method>
        <method name="SwapAllowed">
          <tip>Swaps allowed place</tip>
          <help>Swaps allowed place</help>
          <arg name="place" type="L2TConfig.EResurrectPlace">
            <tip>ResurrectPlace to swap</tip>
          </arg>
        </method>
        <method name="IsDelayCondition">
          <tip>Checks if delay resurrect is allowed</tip>
          <help>Checks if delay resurrect is allowed</help>
          <return type="boolean">
            <tip>True if allowed</tip>
            <help>True if allowed</help>
          </return>
          <arg name="delay" type="L2TConfig.EDelayResurrect">
            <tip>DelayResurrect to check</tip>
          </arg>
        </method>
        <method name="SwapDelayCondition">
          <tip>Swaps delay condition</tip>
          <help>Swaps delay condition</help>
          <arg name="delay" type="L2TConfig.EDelayResurrect">
            <tip>DelayResurrect to swap</tip>
          </arg>
        </method>
        <method name="IsAcceptAllowed">
          <tip>Checks if ressurection source is allowed</tip>
          <help>Checks if ressurection source is allowed</help>
          <return type="boolean">
            <tip>True if allowed</tip>
            <help>True if allowed</help>
          </return>
          <arg name="caster" type="L2TConfig.EAcceptResurrect">
            <tip>AcceptResurrect to check</tip>
          </arg>
        </method>
        <method name="SwapAcceptAllowed">
          <tip>Swaps allowed source</tip>
          <help>Swaps allowed source</help>
          <arg name="caster" type="L2TConfig.EAcceptResurrect">
            <tip>AcceptResurrect to swap</tip>
          </arg>
        </method>
        <method name="GetReviveDelay">
          <tip>Gets revive delay in ms</tip>
          <help>Gets revive delay in ms</help>
          <return type="int">
            <tip>revive delay</tip>
            <help>revive delay</help>
          </return>
        </method>
      </class>
      <class name="MeleeSetting" creatable="false">
        <tip>Mele user setting class</tip>
        <help>Mele user setting class</help>
        <property type="boolean" name="enabled">
          <tip>enabled mele attack property, check property type</tip>
          <help>enabled mele attack property, check property type</help>
        </property>
        <property type="int" name="attackRange">
          <tip>attackRange mele attack property, check property type</tip>
          <help>attackRange mele attack property, check property type</help>
        </property>
        <property type="boolean" name="waitForPartyAttack">
          <tip>waitForPartyAttack mele attack property, check property type</tip>
          <help>waitForPartyAttack mele attack property, check property type</help>
        </property>
      </class>
      <class name="MeleePetSetting" creatable="false">
        <tip>Mele pet setting class</tip>
        <help>Mele pet setting class</help>
        <property type="boolean" name="enabled">
          <tip>enabled mele attack property, check property type</tip>
          <help>enabled mele attack property, check property type</help>
        </property>
        <property type="int" name="attackRange">
          <tip>attackRange mele attack property, check property type</tip>
          <help>attackRange mele attack property, check property type</help>
        </property>
        <property type="boolean" name="waitForSpoil">
          <tip>waitForSpoil mele attack property, check property type</tip>
          <help>waitForSpoil mele attack property, check property type</help>
        </property>
        <property type="boolean" name="waitForOtherAttack">
          <tip>waitForOtherAttack mele attack property, check property type</tip>
          <help>waitForOtherAttack mele attack property, check property type</help>
        </property>
      </class>
      <class name="MeleeSettings" creatable="false">
        <tip>Main mele setting class</tip>
        <help>Main mele setting class</help>
        <property type="L2TConfig.MeleeSetting" name="me">
          <tip>me mele attack property, check property type</tip>
          <help>me mele attack property, check property type</help>
        </property>
        <property type="L2TConfig.MeleePetSetting" name="pet">
          <tip>pet mele attack property, check property type</tip>
          <help>pet mele attack property, check property type</help>
        </property>
      </class>
      <class name="SharedConfig" creatable="false">
        <tip>Main class for condifuration data</tip>
        <help>Main class for condifuration data</help>
        <property type="L2TConfig.GlobalSettings" name="global">
          <tip>global settings</tip>
          <help>global settings</help>
        </property>
        <property type="L2TConfig.PvpClassAggro" name="pvp_class">
          <tip>pvp_class settings</tip>
          <help>pvp_class settings</help>
        </property>
        <property type="L2TConfig.PveMonsterCollection" name="pve">
          <tip>pve settings</tip>
          <help>pve settings</help>
        </property>
        <property type="L2TConfig.ConfigItemCollection" name="items">
          <tip>items settings</tip>
          <help>items settings</help>
        </property>
        <property type="L2TConfig.PotionSettings" name="potions">
          <tip>potions settings</tip>
          <help>potions settings</help>
        </property>
        <property type="L2TConfig.PickupSettings" name="pickup">
          <tip>pickup settings</tip>
          <help>pickup settings</help>
        </property>
        <property type="L2TConfig.FollowSettings" name="follow">
          <tip>follow settings</tip>
          <help>follow settings</help>
        </property>
        <property type="L2TConfig.PartyBuffsSettings" name="partyBuffs">
          <tip>partyBuffs settings</tip>
          <help>partyBuffs settings</help>
        </property>
        <property type="L2TConfig.BuffsSettings" name="selfBuffs">
          <tip>selfBuffs settings</tip>
          <help>selfBuffs settings</help>
        </property>
        <property type="L2TConfig.BuffsSettings" name="petBuffs">
          <tip>petBuffs settings</tip>
          <help>petBuffs settings</help>
        </property>
        <property type="L2TConfig.DanceSongsSettings" name="songsDancesBuffs">
          <tip>songsDancesBuffs settings</tip>
          <help>songsDancesBuffs settings</help>
        </property>
        <property type="L2TConfig.ReconverySettings" name="reconveryCP">
          <tip>reconveryCP settings</tip>
          <help>reconveryCP settings</help>
        </property>
        <property type="L2TConfig.ReconverySettings" name="reconveryHP">
          <tip>reconveryHP settings</tip>
          <help>reconveryHP settings</help>
        </property>
        <property type="L2TConfig.ReconverySettings" name="reconveryMP">
          <tip>reconveryMP settings</tip>
          <help>reconveryMP settings</help>
        </property>
        <property type="L2TConfig.NukeSettings" name="nuke">
          <tip>nuke settings</tip>
          <help>nuke settings</help>
        </property>
        <property type="L2TConfig.AssistSettings" name="assist">
          <tip>assist settings</tip>
          <help>assist settings</help>
        </property>
        <property type="L2TConfig.SpoilSettings" name="spoil">
          <tip>spoil settings</tip>
          <help>spoil settings</help>
        </property>
        <property type="L2TConfig.SleepSettings" name="sleep">
          <tip>sleep settings</tip>
          <help>sleep settings</help>
        </property>
        <property type="L2TConfig.TargetingSettings" name="targeting">
          <tip>targeting settings</tip>
          <help>targeting settings</help>
        </property>
        <property type="L2TConfig.AugmentCollection" name="augment">
          <tip>augment settings</tip>
          <help>augment settings</help>
        </property>
        <property type="L2TConfig.ResurrectSettings" name="resurrect">
          <tip>resurrect settings</tip>
          <help>resurrect settings</help>
        </property>
        <property type="L2TConfig.PartySettings" name="party">
          <tip>party settings</tip>
          <help>party settings</help>
        </property>
        <property type="L2TConfig.MeleeSettings" name="melee">
          <tip>melee settings</tip>
          <help>melee settings</help>
        </property>
      </class>
      <function name="GetConfig">
        <tip>Returns configuration</tip>
        <help>Returns configuration</help>
        <return type="L2TConfig.SharedConfig">
          <tip>Configuration</tip>
          <help>Configuration</help>
        </return>
      </function>
      <function name="LoadConfig">
        <tip>Loads configuration from file</tip>
        <help>Loads configuration from file</help>
        <return type="boolean">
          <tip>True on success</tip>
          <help>True on success</help>
        </return>
        <arg name="name" type="string">
          <tip>Filename prefix</tip>
        </arg>
      </function>
      <function name="SaveConfig">
        <tip>Save configuration to file</tip>
        <help>Save configuration to file</help>
        <return type="boolean">
          <tip>True on success</tip>
          <help>True on success</help>
        </return>
        <arg name="name" type="string">
          <tip>Filename prefix</tip>
        </arg>
      </function>
      <function name="ClearConfig">
        <tip>Clean up configuration back to default values</tip>
        <help>Clean up configuration back to default values</help>
      </function>
    </module>
  </package>
</Help>